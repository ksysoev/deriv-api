package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	// Input list of function names
	scanner := bufio.NewScanner(os.Stdin)
	var input []string
	for scanner.Scan() {
		input = append(input, scanner.Text())
	}

	fmt.Print("// Code generated by bin/generate_subscriptions.go, DO NOT EDIT.\npackage deriv\n\n")
	// Loop through the input list and generate functions
	for _, name := range input {
		// Capitalize the first letter of the function name
		var title string
		for _, s := range strings.Split(name, "_") {
			if s == "p2p" {
				s = "P2P"
			}
			title = title + strings.Title(s)
		}

		// Define the function signature
		signature := fmt.Sprintf("func (a *DerivAPI) Subscribe%s(r %s) (s *Subsciption[%sResp], err error)", title, title, title)

		// Define the function body
		var body string
		if name == "transaction" {
			body = fmt.Sprintf(
				`id := a.getNextRequestID()
	var f %sSubscribe = 1
	r.ReqId = &id
	r.Subscribe = f
	s = NewSubcription[%sResp](a)
	err = s.Start(id, r)
	return`, title, title)
		} else {
			body = fmt.Sprintf(
				`id := a.getNextRequestID()
	var f %sSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[%sResp](a)
	err = s.Start(id, r)
	return`, title, title)
		}

		// Combine the signature and body into a complete function
		function := fmt.Sprintf("%s {\n\t%s\n}\n\n", signature, body)

		// Print the function
		fmt.Print(function)
	}
}
