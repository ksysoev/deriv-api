// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

import "fmt"
import "reflect"
import "encoding/json"

// Retrieve a list of all currently active symbols (underlying markets upon which
// contracts are available for trading).
type ActiveSymbolsRequest struct {
	// If you use `brief`, only a subset of fields will be returned.
	ActiveSymbols ActiveSymbolsRequestActiveSymbols `json:"active_symbols"`

	// Deprecated - replaced by landing_company_short.
	LandingCompany *ActiveSymbolsRequestLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If you specify this field, only symbols available for trading by
	// that landing company will be returned. If you are logged in, only symbols
	// available for trading by your landing company will be returned regardless of
	// what you specify in this field.
	LandingCompanyShort *ActiveSymbolsRequestLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ActiveSymbolsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] If you specify this field, only symbols that can be traded through
	// that product type will be returned.
	ProductType *ActiveSymbolsRequestProductType `json:"product_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ActiveSymbolsRequestActiveSymbols string

const ActiveSymbolsRequestActiveSymbolsBrief ActiveSymbolsRequestActiveSymbols = "brief"
const ActiveSymbolsRequestActiveSymbolsFull ActiveSymbolsRequestActiveSymbols = "full"

type ActiveSymbolsRequestLandingCompany string

const ActiveSymbolsRequestLandingCompanyChampion ActiveSymbolsRequestLandingCompany = "champion"
const ActiveSymbolsRequestLandingCompanyChampionVirtual ActiveSymbolsRequestLandingCompany = "champion-virtual"
const ActiveSymbolsRequestLandingCompanyIom ActiveSymbolsRequestLandingCompany = "iom"
const ActiveSymbolsRequestLandingCompanyMalta ActiveSymbolsRequestLandingCompany = "malta"
const ActiveSymbolsRequestLandingCompanyMaltainvest ActiveSymbolsRequestLandingCompany = "maltainvest"

type ActiveSymbolsRequestLandingCompanyShort string

const ActiveSymbolsRequestLandingCompanyShortChampion ActiveSymbolsRequestLandingCompanyShort = "champion"
const ActiveSymbolsRequestLandingCompanyShortChampionVirtual ActiveSymbolsRequestLandingCompanyShort = "champion-virtual"
const ActiveSymbolsRequestLandingCompanyShortIom ActiveSymbolsRequestLandingCompanyShort = "iom"
const ActiveSymbolsRequestLandingCompanyShortMalta ActiveSymbolsRequestLandingCompanyShort = "malta"
const ActiveSymbolsRequestLandingCompanyShortMaltainvest ActiveSymbolsRequestLandingCompanyShort = "maltainvest"
const ActiveSymbolsRequestLandingCompanyShortSvg ActiveSymbolsRequestLandingCompanyShort = "svg"
const ActiveSymbolsRequestLandingCompanyShortVanuatu ActiveSymbolsRequestLandingCompanyShort = "vanuatu"
const ActiveSymbolsRequestLandingCompanyShortVirtual ActiveSymbolsRequestLandingCompanyShort = "virtual"
const ActiveSymbolsRequestLandingCompanySvg ActiveSymbolsRequestLandingCompany = "svg"
const ActiveSymbolsRequestLandingCompanyVanuatu ActiveSymbolsRequestLandingCompany = "vanuatu"
const ActiveSymbolsRequestLandingCompanyVirtual ActiveSymbolsRequestLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ActiveSymbolsRequestPassthrough map[string]interface{}

type ActiveSymbolsRequestProductType string

const ActiveSymbolsRequestProductTypeBasic ActiveSymbolsRequestProductType = "basic"

// A message containing the list of active symbols.
type ActiveSymbolsResponse struct {
	// List of active symbols.
	ActiveSymbols []ActiveSymbolsResponseActiveSymbolsElem `json:"active_symbols,omitempty"`

	// Echo of the request made.
	EchoReq ActiveSymbolsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ActiveSymbolsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// The information about each symbol.
type ActiveSymbolsResponseActiveSymbolsElem struct {
	// `1` if the symbol is tradable in a forward starting contract, `0` if not.
	AllowForwardStarting *ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting `json:"allow_forward_starting,omitempty"`

	// Amount the data feed is delayed (in minutes) due to Exchange licensing
	// requirements. Only returned on `full` active symbols call.
	DelayAmount *int `json:"delay_amount,omitempty"`

	// Display name.
	DisplayName string `json:"display_name"`

	// Display order.
	DisplayOrder int `json:"display_order"`

	// `1` if market is currently open, `0` if closed.
	ExchangeIsOpen ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen `json:"exchange_is_open"`

	// Exchange name (for underlyings listed on a Stock Exchange). Only returned on
	// `full` active symbols call.
	ExchangeName *string `json:"exchange_name,omitempty"`

	// Intraday interval minutes. Only returned on `full` active symbols call.
	IntradayIntervalMinutes *int `json:"intraday_interval_minutes,omitempty"`

	// `1` indicates that trading is currently suspended, `0` if not.
	IsTradingSuspended ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended `json:"is_trading_suspended"`

	// Market category (forex, indices, etc).
	Market string `json:"market"`

	// Translated market name.
	MarketDisplayName string `json:"market_display_name"`

	// Pip size (i.e. minimum fluctuation amount).
	Pip float64 `json:"pip"`

	// For stock indices, the underlying currency for that instrument. Only returned
	// on `full` active symbols call.
	QuotedCurrencySymbol *string `json:"quoted_currency_symbol,omitempty"`

	// Latest spot price of the underlying. Only returned on `full` active symbols
	// call.
	Spot interface{} `json:"spot,omitempty"`

	// Number of seconds elapsed since the last spot price. Only returned on `full`
	// active symbols call.
	SpotAge *string `json:"spot_age,omitempty"`

	// Daily percentage for a symbol. Only returned on 'full' active symbols call.
	SpotPercentageChange *string `json:"spot_percentage_change,omitempty"`

	// Latest spot epoch time. Only returned on `full` active symbols call.
	SpotTime *string `json:"spot_time,omitempty"`

	// Subgroup name.
	Subgroup string `json:"subgroup"`

	// Translated subgroup name.
	SubgroupDisplayName string `json:"subgroup_display_name"`

	// Submarket name.
	Submarket string `json:"submarket"`

	// Translated submarket name.
	SubmarketDisplayName string `json:"submarket_display_name"`

	// The symbol code for this underlying.
	Symbol string `json:"symbol"`

	// Symbol type (forex, commodities, etc).
	SymbolType string `json:"symbol_type"`
}

type ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting int

type ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen int

type ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended int

// Echo of the request made.
type ActiveSymbolsResponseEchoReq map[string]interface{}

type ActiveSymbolsResponseMsgType string

const ActiveSymbolsResponseMsgTypeActiveSymbols ActiveSymbolsResponseMsgType = "active_symbols"

// This call manages API tokens
type ApiTokenRequest struct {
	// Must be `1`
	ApiToken ApiTokenRequestApiToken `json:"api_token"`

	// [Optional] The token to remove.
	DeleteToken *string `json:"delete_token,omitempty"`

	// [Optional] The name of the created token.
	NewToken *string `json:"new_token,omitempty"`

	// [Optional] List of permission scopes to provide with the token.
	NewTokenScopes []ApiTokenRequestNewTokenScopesElem `json:"new_token_scopes,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ApiTokenRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If you set this parameter during token creation, then the token
	// created will only work for the IP address that was used to create the token
	ValidForCurrentIpOnly *ApiTokenRequestValidForCurrentIpOnly `json:"valid_for_current_ip_only,omitempty"`
}

type ApiTokenRequestApiToken int

type ApiTokenRequestNewTokenScopesElem string

const ApiTokenRequestNewTokenScopesElemAdmin ApiTokenRequestNewTokenScopesElem = "admin"
const ApiTokenRequestNewTokenScopesElemPayments ApiTokenRequestNewTokenScopesElem = "payments"
const ApiTokenRequestNewTokenScopesElemRead ApiTokenRequestNewTokenScopesElem = "read"
const ApiTokenRequestNewTokenScopesElemTrade ApiTokenRequestNewTokenScopesElem = "trade"
const ApiTokenRequestNewTokenScopesElemTradingInformation ApiTokenRequestNewTokenScopesElem = "trading_information"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ApiTokenRequestPassthrough map[string]interface{}

type ApiTokenRequestValidForCurrentIpOnly int

// The result of the API token request made.
type ApiTokenResponse struct {
	// Contains the result of API token according to the type of request.
	ApiToken *ApiTokenResponseApiToken `json:"api_token,omitempty"`

	// Echo of the request made.
	EchoReq ApiTokenResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ApiTokenResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Contains the result of API token according to the type of request.
type ApiTokenResponseApiToken struct {
	// Token deleted.
	DeleteToken *ApiTokenResponseApiTokenDeleteToken `json:"delete_token,omitempty"`

	// Token created.
	NewToken *ApiTokenResponseApiTokenNewToken `json:"new_token,omitempty"`

	// API tokens
	Tokens []ApiTokenResponseApiTokenTokensElem `json:"tokens,omitempty"`
}

type ApiTokenResponseApiTokenDeleteToken int

type ApiTokenResponseApiTokenNewToken int

// The information for each token.
type ApiTokenResponseApiTokenTokensElem struct {
	// The token name specified when creating.
	DisplayName *string `json:"display_name,omitempty"`

	// The last date which the token has been used.
	LastUsed *string `json:"last_used,omitempty"`

	// List of permission scopes of the token.
	Scopes []ApiTokenResponseApiTokenTokensElemScopesElem `json:"scopes,omitempty"`

	// The token that can be used to `authorize` with.
	Token *string `json:"token,omitempty"`

	// The IP restriction for the token. No restriction if empty.
	ValidForIp *string `json:"valid_for_ip,omitempty"`
}

type ApiTokenResponseApiTokenTokensElemScopesElem string

const ApiTokenResponseApiTokenTokensElemScopesElemAdmin ApiTokenResponseApiTokenTokensElemScopesElem = "admin"
const ApiTokenResponseApiTokenTokensElemScopesElemPayments ApiTokenResponseApiTokenTokensElemScopesElem = "payments"
const ApiTokenResponseApiTokenTokensElemScopesElemRead ApiTokenResponseApiTokenTokensElemScopesElem = "read"
const ApiTokenResponseApiTokenTokensElemScopesElemTrade ApiTokenResponseApiTokenTokensElemScopesElem = "trade"
const ApiTokenResponseApiTokenTokensElemScopesElemTradingInformation ApiTokenResponseApiTokenTokensElemScopesElem = "trading_information"

// Echo of the request made.
type ApiTokenResponseEchoReq map[string]interface{}

type ApiTokenResponseMsgType string

const ApiTokenResponseMsgTypeApiToken ApiTokenResponseMsgType = "api_token"

// The request for deleting an application.
type AppDeleteRequest struct {
	// Application app_id
	AppDelete int `json:"app_delete"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppDeleteRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppDeleteRequestPassthrough map[string]interface{}

// The result of delete application request made.
type AppDeleteResponse struct {
	// 1 on success
	AppDelete *int `json:"app_delete,omitempty"`

	// Echo of the request made.
	EchoReq AppDeleteResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppDeleteResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type AppDeleteResponseEchoReq map[string]interface{}

type AppDeleteResponseMsgType string

const AppDeleteResponseMsgTypeAppDelete AppDeleteResponseMsgType = "app_delete"

// To get the information of the OAuth application specified by 'app_id'
type AppGetRequest struct {
	// Application app_id
	AppGet int `json:"app_get"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppGetRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppGetRequestPassthrough map[string]interface{}

// A message with requested application details
type AppGetResponse struct {
	// The information of the requested application.
	AppGet *AppGetResponseAppGet `json:"app_get,omitempty"`

	// Echo of the request made.
	EchoReq AppGetResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppGetResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// The information of the requested application.
type AppGetResponseAppGet struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// Application's App Store URL.
	Appstore string `json:"appstore"`

	// Application's GitHub page (for open-source projects).
	Github string `json:"github"`

	// Application's Google Play URL.
	Googleplay string `json:"googleplay"`

	// Application's homepage URL.
	Homepage string `json:"homepage"`

	// Application name.
	Name string `json:"name"`

	// The URL to redirect to after a successful login.
	RedirectUri string `json:"redirect_uri"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri string `json:"verification_uri"`
}

// Echo of the request made.
type AppGetResponseEchoReq map[string]interface{}

type AppGetResponseMsgType string

const AppGetResponseMsgTypeAppGet AppGetResponseMsgType = "app_get"

// List all of the account's OAuth applications
type AppListRequest struct {
	// Must be `1`
	AppList AppListRequestAppList `json:"app_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AppListRequestAppList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppListRequestPassthrough map[string]interface{}

// A message with created applications
type AppListResponse struct {
	// List of created applications for the authorized account.
	AppList []AppListResponseAppListElem `json:"app_list,omitempty"`

	// Echo of the request made.
	EchoReq AppListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppListResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

type AppListResponseAppListElem struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// Application's App Store URL.
	Appstore interface{} `json:"appstore"`

	// Application's GitHub page. (for open-source projects)
	Github interface{} `json:"github"`

	// Application's Google Play URL.
	Googleplay interface{} `json:"googleplay"`

	// Application's homepage URL.
	Homepage interface{} `json:"homepage"`

	// Application name.
	Name string `json:"name"`

	// The URL to redirect to after a successful login.
	RedirectUri string `json:"redirect_uri"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri interface{} `json:"verification_uri"`
}

// Echo of the request made.
type AppListResponseEchoReq map[string]interface{}

type AppListResponseMsgType string

const AppListResponseMsgTypeAppList AppListResponseMsgType = "app_list"

// Retrieve details of `app_markup` according to criteria specified.
type AppMarkupDetailsRequest struct {
	// [Optional] Specific application `app_id` to report on.
	AppId *int `json:"app_id,omitempty"`

	// Must be `1`
	AppMarkupDetails AppMarkupDetailsRequestAppMarkupDetails `json:"app_markup_details"`

	// [Optional] Specific client loginid to report on, like CR12345
	ClientLoginid *string `json:"client_loginid,omitempty"`

	// Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
	DateFrom string `json:"date_from"`

	// End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
	DateTo string `json:"date_to"`

	// [Optional] If set to 1, will return `app_markup` transaction details.
	Description *AppMarkupDetailsRequestDescription `json:"description,omitempty"`

	// [Optional] Apply upper limit to count of transactions received.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] Number of transactions to skip.
	Offset *int `json:"offset,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppMarkupDetailsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Sort direction on `transaction_time`. Other fields sort order is
	// ASC.
	Sort AppMarkupDetailsRequestSort `json:"sort,omitempty"`

	// [Optional] One or more of the specified fields to sort on. Default sort field
	// is by `transaction_time`.
	SortFields []AppMarkupDetailsRequestSortFieldsElem `json:"sort_fields,omitempty"`
}

type AppMarkupDetailsRequestAppMarkupDetails int

type AppMarkupDetailsRequestDescription int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppMarkupDetailsRequestPassthrough map[string]interface{}

type AppMarkupDetailsRequestSort string

const AppMarkupDetailsRequestSortASC AppMarkupDetailsRequestSort = "ASC"
const AppMarkupDetailsRequestSortDESC AppMarkupDetailsRequestSort = "DESC"

type AppMarkupDetailsRequestSortFieldsElem string

const AppMarkupDetailsRequestSortFieldsElemAppId AppMarkupDetailsRequestSortFieldsElem = "app_id"
const AppMarkupDetailsRequestSortFieldsElemClientLoginid AppMarkupDetailsRequestSortFieldsElem = "client_loginid"
const AppMarkupDetailsRequestSortFieldsElemTransactionTime AppMarkupDetailsRequestSortFieldsElem = "transaction_time"

// Per transaction reporting of app_markup
type AppMarkupDetailsResponse struct {
	// App Markup transaction details
	AppMarkupDetails *AppMarkupDetailsResponseAppMarkupDetails `json:"app_markup_details,omitempty"`

	// Echo of the request made.
	EchoReq AppMarkupDetailsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppMarkupDetailsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// App Markup transaction details
type AppMarkupDetailsResponseAppMarkupDetails struct {
	// Array of returned transactions
	Transactions []AppMarkupDetailsResponseAppMarkupDetailsTransactionsElem `json:"transactions,omitempty"`
}

type AppMarkupDetailsResponseAppMarkupDetailsTransactionsElem struct {
	// ID of the application where this contract was purchased.
	AppId *int `json:"app_id,omitempty"`

	// The markup the client paid in their currency
	AppMarkup *float64 `json:"app_markup,omitempty"`

	// The markup the client paid in USD
	AppMarkupUsd *float64 `json:"app_markup_usd,omitempty"`

	// The markup the client paid in the app developer's currency
	AppMarkupValue *float64 `json:"app_markup_value,omitempty"`

	// Currency code of the client
	ClientCurrcode *string `json:"client_currcode,omitempty"`

	// Login ID of the client
	ClientLoginid *string `json:"client_loginid,omitempty"`

	// Currency code of the app developer
	DevCurrcode *string `json:"dev_currcode,omitempty"`

	// Login ID of the app developer
	DevLoginid *string `json:"dev_loginid,omitempty"`

	// The transaction ID. Every contract (buy or sell) and every payment has a unique
	// ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// The epoch value of purchase time of transaction
	TransactionTime *string `json:"transaction_time,omitempty"`
}

// Echo of the request made.
type AppMarkupDetailsResponseEchoReq map[string]interface{}

type AppMarkupDetailsResponseMsgType string

const AppMarkupDetailsResponseMsgTypeAppMarkupDetails AppMarkupDetailsResponseMsgType = "app_markup_details"

// Retrieve statistics of `app_markup`.
type AppMarkupStatisticsRequest struct {
	// Must be `1`
	AppMarkupStatistics AppMarkupStatisticsRequestAppMarkupStatistics `json:"app_markup_statistics"`

	// Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
	DateFrom string `json:"date_from"`

	// End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
	DateTo string `json:"date_to"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppMarkupStatisticsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AppMarkupStatisticsRequestAppMarkupStatistics int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppMarkupStatisticsRequestPassthrough map[string]interface{}

// Per application reporting of app_markup
type AppMarkupStatisticsResponse struct {
	// App Markup transaction statistics
	AppMarkupStatistics *AppMarkupStatisticsResponseAppMarkupStatistics `json:"app_markup_statistics,omitempty"`

	// Echo of the request made.
	EchoReq AppMarkupStatisticsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppMarkupStatisticsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// App Markup transaction statistics
type AppMarkupStatisticsResponseAppMarkupStatistics struct {
	// Array of summed app markups grouped by app_id
	Breakdown []AppMarkupStatisticsResponseAppMarkupStatisticsBreakdownElem `json:"breakdown,omitempty"`

	// The sum of markup the client paid in USD
	TotalAppMarkupUsd *float64 `json:"total_app_markup_usd,omitempty"`

	// The total count of transactions
	TotalTransactionsCount *float64 `json:"total_transactions_count,omitempty"`
}

type AppMarkupStatisticsResponseAppMarkupStatisticsBreakdownElem struct {
	// ID of the application where this contract was purchased.
	AppId *int `json:"app_id,omitempty"`

	// The sum of markup the client paid in USD
	AppMarkupUsd *float64 `json:"app_markup_usd,omitempty"`

	// The sum of markup the client paid in developer's currency
	AppMarkupValue *float64 `json:"app_markup_value,omitempty"`

	// Currency code of the app developer
	DevCurrcode *string `json:"dev_currcode,omitempty"`

	// The count of app transactions
	TransactionsCount *float64 `json:"transactions_count,omitempty"`
}

// Echo of the request made.
type AppMarkupStatisticsResponseEchoReq map[string]interface{}

type AppMarkupStatisticsResponseMsgType string

const AppMarkupStatisticsResponseMsgTypeAppMarkupStatistics AppMarkupStatisticsResponseMsgType = "app_markup_statistics"

// Register a new OAuth application
type AppRegisterRequest struct {
	// [Optional] Markup to be added to contract prices (as a percentage of contract
	// payout).
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Must be `1`
	AppRegister AppRegisterRequestAppRegister `json:"app_register"`

	// [Optional] Application's App Store URL (if applicable).
	Appstore *string `json:"appstore,omitempty"`

	// [Optional] Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// [Optional] Application's Google Play URL (if applicable).
	Googleplay *string `json:"googleplay,omitempty"`

	// [Optional] Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// Application name.
	Name string `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppRegisterRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] The URL to redirect to after a successful login. Required if
	// charging markup percentage
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// List of permission scopes to grant the application.
	Scopes []AppRegisterRequestScopesElem `json:"scopes"`

	// [Optional] Used when `verify_email` called. If available, a URL containing the
	// verification token will be sent to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

type AppRegisterRequestAppRegister int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppRegisterRequestPassthrough map[string]interface{}

type AppRegisterRequestScopesElem string

const AppRegisterRequestScopesElemAdmin AppRegisterRequestScopesElem = "admin"
const AppRegisterRequestScopesElemPayments AppRegisterRequestScopesElem = "payments"
const AppRegisterRequestScopesElemRead AppRegisterRequestScopesElem = "read"
const AppRegisterRequestScopesElemTrade AppRegisterRequestScopesElem = "trade"
const AppRegisterRequestScopesElemTradingInformation AppRegisterRequestScopesElem = "trading_information"

// A message with created application details
type AppRegisterResponse struct {
	// The information of the created application.
	AppRegister *AppRegisterResponseAppRegister `json:"app_register,omitempty"`

	// Echo of the request made.
	EchoReq AppRegisterResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppRegisterResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// The information of the created application.
type AppRegisterResponseAppRegister struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// Application's App Store URL.
	Appstore string `json:"appstore"`

	// Application's GitHub page (for open-source projects).
	Github string `json:"github"`

	// Application's Google Play URL.
	Googleplay string `json:"googleplay"`

	// Application's homepage URL.
	Homepage string `json:"homepage"`

	// Application name.
	Name string `json:"name"`

	// The URL to redirect to after a successful login.
	RedirectUri string `json:"redirect_uri"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri string `json:"verification_uri"`
}

// Echo of the request made.
type AppRegisterResponseEchoReq map[string]interface{}

type AppRegisterResponseMsgType string

const AppRegisterResponseMsgTypeAppRegister AppRegisterResponseMsgType = "app_register"

// Update a new OAuth application
type AppUpdateRequest struct {
	// [Optional] Markup to be added to contract prices (as a percentage of contract
	// payout).
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Application app_id.
	AppUpdate int `json:"app_update"`

	// [Optional] Application's App Store URL (if applicable).
	Appstore *string `json:"appstore,omitempty"`

	// [Optional] Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// [Optional] Application's Google Play URL (if applicable).
	Googleplay *string `json:"googleplay,omitempty"`

	// [Optional] Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// Application name.
	Name string `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppUpdateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] The URL to redirect to after a successful login. Required if
	// charging markup percentage.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Change scopes will revoke all user's grants and log them out.
	Scopes []AppUpdateRequestScopesElem `json:"scopes"`

	// [Optional] Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppUpdateRequestPassthrough map[string]interface{}

type AppUpdateRequestScopesElem string

const AppUpdateRequestScopesElemAdmin AppUpdateRequestScopesElem = "admin"
const AppUpdateRequestScopesElemPayments AppUpdateRequestScopesElem = "payments"
const AppUpdateRequestScopesElemRead AppUpdateRequestScopesElem = "read"
const AppUpdateRequestScopesElemTrade AppUpdateRequestScopesElem = "trade"
const AppUpdateRequestScopesElemTradingInformation AppUpdateRequestScopesElem = "trading_information"

// A message with created application
type AppUpdateResponse struct {
	// Information of the updated application.
	AppUpdate *AppUpdateResponseAppUpdate `json:"app_update,omitempty"`

	// Echo of the request made.
	EchoReq AppUpdateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppUpdateResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Information of the updated application.
type AppUpdateResponseAppUpdate struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId *int `json:"app_id,omitempty"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Application's App Store URL.
	Appstore *string `json:"appstore,omitempty"`

	// Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// Application's Google Play URL.
	Googleplay *string `json:"googleplay,omitempty"`

	// Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// Application name.
	Name *string `json:"name,omitempty"`

	// The URL to redirect to after a successful login.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will be sent to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

// Echo of the request made.
type AppUpdateResponseEchoReq map[string]interface{}

type AppUpdateResponseMsgType string

const AppUpdateResponseMsgTypeAppUpdate AppUpdateResponseMsgType = "app_update"

// Retrieve a list of all available underlyings and the corresponding contract
// types and duration boundaries. If the user is logged in, only the assets
// available for that user's landing company will be returned.
type AssetIndexRequest struct {
	// Must be `1`
	AssetIndex AssetIndexRequestAssetIndex `json:"asset_index"`

	// Deprecated - replaced by landing_company_short.
	LandingCompany *AssetIndexRequestLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *AssetIndexRequestLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AssetIndexRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AssetIndexRequestAssetIndex int

type AssetIndexRequestLandingCompany string

const AssetIndexRequestLandingCompanyChampion AssetIndexRequestLandingCompany = "champion"
const AssetIndexRequestLandingCompanyChampionVirtual AssetIndexRequestLandingCompany = "champion-virtual"
const AssetIndexRequestLandingCompanyIom AssetIndexRequestLandingCompany = "iom"
const AssetIndexRequestLandingCompanyMalta AssetIndexRequestLandingCompany = "malta"
const AssetIndexRequestLandingCompanyMaltainvest AssetIndexRequestLandingCompany = "maltainvest"

type AssetIndexRequestLandingCompanyShort string

const AssetIndexRequestLandingCompanyShortChampion AssetIndexRequestLandingCompanyShort = "champion"
const AssetIndexRequestLandingCompanyShortChampionVirtual AssetIndexRequestLandingCompanyShort = "champion-virtual"
const AssetIndexRequestLandingCompanyShortIom AssetIndexRequestLandingCompanyShort = "iom"
const AssetIndexRequestLandingCompanyShortMalta AssetIndexRequestLandingCompanyShort = "malta"
const AssetIndexRequestLandingCompanyShortMaltainvest AssetIndexRequestLandingCompanyShort = "maltainvest"
const AssetIndexRequestLandingCompanyShortSvg AssetIndexRequestLandingCompanyShort = "svg"
const AssetIndexRequestLandingCompanyShortVanuatu AssetIndexRequestLandingCompanyShort = "vanuatu"
const AssetIndexRequestLandingCompanyShortVirtual AssetIndexRequestLandingCompanyShort = "virtual"
const AssetIndexRequestLandingCompanySvg AssetIndexRequestLandingCompany = "svg"
const AssetIndexRequestLandingCompanyVanuatu AssetIndexRequestLandingCompany = "vanuatu"
const AssetIndexRequestLandingCompanyVirtual AssetIndexRequestLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AssetIndexRequestPassthrough map[string]interface{}

// A message with Asset Index
type AssetIndexResponse struct {
	// List of underlyings by their display name and symbol followed by their
	// available contract types and duration boundaries.
	AssetIndex []interface{} `json:"asset_index,omitempty"`

	// Echo of the request made.
	EchoReq AssetIndexResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AssetIndexResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type AssetIndexResponseEchoReq map[string]interface{}

type AssetIndexResponseMsgType string

const AssetIndexResponseMsgTypeAssetIndex AssetIndexResponseMsgType = "asset_index"

// Authorize current WebSocket session to act on behalf of the owner of a given
// token. Must precede requests that need to access client account, for example
// purchasing and selling contracts or viewing portfolio.
type AuthorizeRequest struct {
	// [Optional] Send this when you use api tokens for authorization and want to
	// track activity using `login_history` call.
	AddToLoginHistory AuthorizeRequestAddToLoginHistory `json:"add_to_login_history,omitempty"`

	// Authentication token. May be retrieved from
	// https://www.binary.com/en/user/security/api_tokenws.html
	Authorize string `json:"authorize"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AuthorizeRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AuthorizeRequestAddToLoginHistory int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AuthorizeRequestPassthrough map[string]interface{}

// A message containing account information for the holder of that token.
type AuthorizeResponse struct {
	// Account information for the holder of the token.
	Authorize *AuthorizeResponseAuthorize `json:"authorize,omitempty"`

	// Echo of the request made.
	EchoReq AuthorizeResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AuthorizeResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Account information for the holder of the token.
type AuthorizeResponseAuthorize struct {
	// List of accounts for current user.
	AccountList []AuthorizeResponseAuthorizeAccountListElem `json:"account_list,omitempty"`

	// Cash balance of the account.
	Balance *float64 `json:"balance,omitempty"`

	// 2-letter country code (ISO standard).
	Country *string `json:"country,omitempty"`

	// Currency of the account.
	Currency *string `json:"currency,omitempty"`

	// User email.
	Email *string `json:"email,omitempty"`

	// User's full name. Will be empty for virtual accounts.
	Fullname *string `json:"fullname,omitempty"`

	// Boolean value: 1 or 0, indicating whether the account is a virtual-money
	// account.
	IsVirtual *AuthorizeResponseAuthorizeIsVirtual `json:"is_virtual,omitempty"`

	// Landing company name the account belongs to.
	LandingCompanyFullname *string `json:"landing_company_fullname,omitempty"`

	// Landing company shortcode the account belongs to.
	LandingCompanyName *string `json:"landing_company_name,omitempty"`

	// Currencies in client's residence country
	LocalCurrencies AuthorizeResponseAuthorizeLocalCurrencies `json:"local_currencies,omitempty"`

	// The account ID that the token was issued for.
	Loginid *string `json:"loginid,omitempty"`

	// User's preferred language, ISO standard code of language
	PreferredLanguage interface{} `json:"preferred_language,omitempty"`

	// Scopes available to the token.
	Scopes []string `json:"scopes,omitempty"`

	// Details of the Trading account.
	Trading *AuthorizeResponseAuthorizeTrading `json:"trading,omitempty"`

	// List of landing company shortcodes the account can upgrade to.
	UpgradeableLandingCompanies []interface{} `json:"upgradeable_landing_companies,omitempty"`

	// The internal user ID for this account.
	UserId *int `json:"user_id,omitempty"`

	// Details of the Wallet account.
	Wallet *AuthorizeResponseAuthorizeWallet `json:"wallet,omitempty"`
}

type AuthorizeResponseAuthorizeAccountListElem struct {
	// Account type.
	AccountType *AuthorizeResponseAuthorizeAccountListElemAccountType `json:"account_type,omitempty"`

	// Creation time of the account as epoch.
	CreatedAt *int `json:"created_at,omitempty"`

	// Currency of specified account.
	Currency *string `json:"currency,omitempty"`

	// Epoch of date till client has excluded him/herself from the website, only
	// present if client is self excluded.
	ExcludedUntil *int `json:"excluded_until,omitempty"`

	// Boolean value: 1 or 0, indicating whether the account is marked as disabled or
	// not.
	IsDisabled *AuthorizeResponseAuthorizeAccountListElemIsDisabled `json:"is_disabled,omitempty"`

	// Boolean value: 1 or 0, indicating whether the account is a virtual-money
	// account.
	IsVirtual *AuthorizeResponseAuthorizeAccountListElemIsVirtual `json:"is_virtual,omitempty"`

	// Landing company shortcode the account belongs to.
	LandingCompanyName *string `json:"landing_company_name,omitempty"`

	// The account ID of specified account.
	Loginid *string `json:"loginid,omitempty"`

	// Details of the Trading account.
	Trading *AuthorizeResponseAuthorizeAccountListElemTrading `json:"trading,omitempty"`

	// Details of the Wallet account.
	Wallet *AuthorizeResponseAuthorizeAccountListElemWallet `json:"wallet,omitempty"`
}

type AuthorizeResponseAuthorizeAccountListElemAccountType string

const AuthorizeResponseAuthorizeAccountListElemAccountTypeTrading AuthorizeResponseAuthorizeAccountListElemAccountType = "trading"
const AuthorizeResponseAuthorizeAccountListElemAccountTypeWallet AuthorizeResponseAuthorizeAccountListElemAccountType = "wallet"

type AuthorizeResponseAuthorizeAccountListElemIsDisabled int

type AuthorizeResponseAuthorizeAccountListElemIsVirtual int

// Details of the Trading account.
type AuthorizeResponseAuthorizeAccountListElemTrading struct {
	// Details of the Wallet account linked to the Trading account.
	LinkedTo []AuthorizeResponseAuthorizeAccountListElemTradingLinkedToElem `json:"linked_to,omitempty"`
}

type AuthorizeResponseAuthorizeAccountListElemTradingLinkedToElem struct {
	// Wallet account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Wallet account balance.
	Balance *string `json:"balance,omitempty"`

	// Wallet account currency.
	Currency *string `json:"currency,omitempty"`

	// Wallet account payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`
}

// Details of the Wallet account.
type AuthorizeResponseAuthorizeAccountListElemWallet struct {
	// Wallet account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Wallet account balance.
	Balance *float64 `json:"balance,omitempty"`

	// Wallet account currency.
	Currency *string `json:"currency,omitempty"`

	// Details of the list of Trading accounts linked to the Wallet account.
	LinkedTo []AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElem `json:"linked_to,omitempty"`

	// Wallet account payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElem struct {
	// Trading account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Trading account balance.
	Balance *string `json:"balance,omitempty"`

	// Trading account currency.
	Currency *string `json:"currency,omitempty"`

	// Trading account platform name.
	Platform *AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform `json:"platform,omitempty"`
}

type AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform string

const AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatformDeriv AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform = "deriv"
const AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatformDxtrade AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform = "dxtrade"
const AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatformMt5 AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform = "mt5"

type AuthorizeResponseAuthorizeIsVirtual int

// Currencies in client's residence country
type AuthorizeResponseAuthorizeLocalCurrencies map[string]interface{}

// Details of the Trading account.
type AuthorizeResponseAuthorizeTrading struct {
	// Details of the Wallet account linked to the Trading account.
	LinkedTo []AuthorizeResponseAuthorizeTradingLinkedToElem `json:"linked_to,omitempty"`
}

type AuthorizeResponseAuthorizeTradingLinkedToElem struct {
	// Wallet account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Wallet account balance.
	Balance *string `json:"balance,omitempty"`

	// Wallet account currency.
	Currency *string `json:"currency,omitempty"`

	// Wallet account payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`
}

// Details of the Wallet account.
type AuthorizeResponseAuthorizeWallet struct {
	// Wallet account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Wallet account balance.
	Balance *float64 `json:"balance,omitempty"`

	// Wallet account currency.
	Currency *string `json:"currency,omitempty"`

	// Details of the list of Trading accounts linked to the Wallet account.
	LinkedTo []AuthorizeResponseAuthorizeWalletLinkedToElem `json:"linked_to,omitempty"`

	// Wallet account payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type AuthorizeResponseAuthorizeWalletLinkedToElem struct {
	// Trading account ID.
	AccountId *string `json:"account_id,omitempty"`

	// Trading account balance.
	Balance *string `json:"balance,omitempty"`

	// Trading account currency.
	Currency *string `json:"currency,omitempty"`

	// Trading account platform name.
	Platform *AuthorizeResponseAuthorizeWalletLinkedToElemPlatform `json:"platform,omitempty"`
}

type AuthorizeResponseAuthorizeWalletLinkedToElemPlatform string

const AuthorizeResponseAuthorizeWalletLinkedToElemPlatformDeriv AuthorizeResponseAuthorizeWalletLinkedToElemPlatform = "deriv"
const AuthorizeResponseAuthorizeWalletLinkedToElemPlatformDxtrade AuthorizeResponseAuthorizeWalletLinkedToElemPlatform = "dxtrade"
const AuthorizeResponseAuthorizeWalletLinkedToElemPlatformMt5 AuthorizeResponseAuthorizeWalletLinkedToElemPlatform = "mt5"

// Echo of the request made.
type AuthorizeResponseEchoReq map[string]interface{}

type AuthorizeResponseMsgType string

const AuthorizeResponseMsgTypeAuthorize AuthorizeResponseMsgType = "authorize"

// Get user account balance
type BalanceRequest struct {
	// [Optional] If set to `all`, return the balances of all accounts one by one; if
	// set to `current`, return the balance of current account; if set as an account
	// id, return the balance of that account.
	Account string `json:"account,omitempty"`

	// Must be `1`
	Balance BalanceRequestBalance `json:"balance"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough BalanceRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever the balance changes.
	Subscribe *BalanceRequestSubscribe `json:"subscribe,omitempty"`
}

type BalanceRequestBalance int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type BalanceRequestPassthrough map[string]interface{}

type BalanceRequestSubscribe int

// Return details of user account balance
type BalanceResponse struct {
	// Current balance of one or more accounts.
	Balance *BalanceResponseBalance `json:"balance,omitempty"`

	// Echo of the request made.
	EchoReq BalanceResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType BalanceResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *BalanceResponseSubscription `json:"subscription,omitempty"`
}

// Current balance of one or more accounts.
type BalanceResponseBalance struct {
	// List of active accounts.
	Accounts BalanceResponseBalanceAccounts `json:"accounts,omitempty"`

	// Balance of current account.
	Balance float64 `json:"balance"`

	// Currency of current account.
	Currency string `json:"currency"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// Client loginid.
	Loginid string `json:"loginid"`

	// Summary totals of accounts by type.
	Total *BalanceResponseBalanceTotal `json:"total,omitempty"`
}

// List of active accounts.
type BalanceResponseBalanceAccounts map[string]interface{}

// Summary totals of accounts by type.
type BalanceResponseBalanceTotal struct {
	// Total balance of all real money Deriv accounts.
	Deriv *BalanceResponseBalanceTotalDeriv `json:"deriv,omitempty"`

	// Total balance of all demo Deriv accounts.
	DerivDemo *BalanceResponseBalanceTotalDerivDemo `json:"deriv_demo,omitempty"`

	// Total balance of all MT5 real money accounts.
	Mt5 *BalanceResponseBalanceTotalMt5 `json:"mt5,omitempty"`

	// Total balance of all MT5 demo accounts.
	Mt5Demo *BalanceResponseBalanceTotalMt5Demo `json:"mt5_demo,omitempty"`
}

// Total balance of all real money Deriv accounts.
type BalanceResponseBalanceTotalDeriv struct {
	// Total of balances.
	Amount float64 `json:"amount"`

	// Currency of total.
	Currency string `json:"currency"`
}

// Total balance of all demo Deriv accounts.
type BalanceResponseBalanceTotalDerivDemo struct {
	// Total of balances.
	Amount float64 `json:"amount"`

	// Currency of total.
	Currency string `json:"currency"`
}

// Total balance of all MT5 real money accounts.
type BalanceResponseBalanceTotalMt5 struct {
	// Total balance of all MT5 accounts
	Amount float64 `json:"amount"`

	// Currency of total.
	Currency string `json:"currency"`
}

// Total balance of all MT5 demo accounts.
type BalanceResponseBalanceTotalMt5Demo struct {
	// Total of balances.
	Amount float64 `json:"amount"`

	// Currency of total.
	Currency string `json:"currency"`
}

// Echo of the request made.
type BalanceResponseEchoReq map[string]interface{}

type BalanceResponseMsgType string

const BalanceResponseMsgTypeBalance BalanceResponseMsgType = "balance"

// For subscription requests only.
type BalanceResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Buy a Contract for multiple Accounts specified by the `tokens` parameter. Note,
// although this is an authorized call, the contract is not bought for the
// authorized account.
type BuyContractForMultipleAccountsRequest struct {
	// Either the ID received from a Price Proposal (`proposal` call), or `1` if
	// contract buy parameters are passed in the `parameters` field.
	BuyContractForMultipleAccounts string `json:"buy_contract_for_multiple_accounts"`

	// [Optional] Used to pass the parameters for contract buy.
	Parameters *BuyContractForMultipleAccountsRequestParameters `json:"parameters,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough BuyContractForMultipleAccountsRequestPassthrough `json:"passthrough,omitempty"`

	// Maximum price at which to purchase the contract.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// List of API tokens identifying the accounts for which the contract is bought.
	// Note: If the same token appears multiple times or if multiple tokens designate
	// the same account, the contract is bought multiple times for this account.
	Tokens []string `json:"tokens"`
}

// [Optional] Used to pass the parameters for contract buy.
type BuyContractForMultipleAccountsRequestParameters struct {
	// [Optional] Proposed `payout` or `stake` value
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Markup added to contract prices (as a percentage of contract payout)
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// [Optional] Barrier for the contract (or last digit prediction for digit
	// contracts). Contracts less than 24 hours in duration would need a relative
	// barrier (barriers which need +/-), where entry spot would be adjusted
	// accordingly with that amount to define a barrier, except for Synthetic Indices
	// as they support both relative and absolute barriers.
	Barrier *string `json:"barrier,omitempty"`

	// [Optional] Low barrier for the contract (for contracts with two barriers).
	// Contracts less than 24 hours in duration would need a relative barrier
	// (barriers which need +/-), where entry spot would be adjusted accordingly with
	// that amount to define a barrier, except for Synthetic Indices as they support
	// both relative and absolute barriers.
	Barrier2 *string `json:"barrier2,omitempty"`

	// [Optional] Indicate whether amount is 'payout' or 'stake'.
	Basis *BuyContractForMultipleAccountsRequestParametersBasis `json:"basis,omitempty"`

	// A valid contract-type
	ContractType BuyContractForMultipleAccountsRequestParametersContractType `json:"contract_type"`

	// This can only be the account-holder's currency
	Currency string `json:"currency"`

	// [Optional] Epoch value of the expiry time of the contract. You must either
	// specify `date_expiry` or `duration`.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// [Optional] For forward-starting contracts, epoch value of the starting time of
	// the contract.
	DateStart *int `json:"date_start,omitempty"`

	// [Optional] Duration quantity
	Duration *int `json:"duration,omitempty"`

	// [Optional] Duration unit is `s`: seconds, `m`: minutes, `h`: hours, `d`: days,
	// `t`: ticks
	DurationUnit *BuyContractForMultipleAccountsRequestParametersDurationUnit `json:"duration_unit,omitempty"`

	// [Optional] The multiplier for non-binary options. E.g. lookbacks.
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Optional] The tick that is predicted to have the highest/lowest value - for
	// tickhigh and ticklow contracts.
	SelectedTick *int `json:"selected_tick,omitempty"`

	// Symbol code
	Symbol string `json:"symbol"`
}

type BuyContractForMultipleAccountsRequestParametersBasis string

const BuyContractForMultipleAccountsRequestParametersBasisPayout BuyContractForMultipleAccountsRequestParametersBasis = "payout"
const BuyContractForMultipleAccountsRequestParametersBasisStake BuyContractForMultipleAccountsRequestParametersBasis = "stake"

type BuyContractForMultipleAccountsRequestParametersContractType string

const BuyContractForMultipleAccountsRequestParametersContractTypeASIAND BuyContractForMultipleAccountsRequestParametersContractType = "ASIAND"
const BuyContractForMultipleAccountsRequestParametersContractTypeASIANU BuyContractForMultipleAccountsRequestParametersContractType = "ASIANU"
const BuyContractForMultipleAccountsRequestParametersContractTypeCALL BuyContractForMultipleAccountsRequestParametersContractType = "CALL"
const BuyContractForMultipleAccountsRequestParametersContractTypeCALLE BuyContractForMultipleAccountsRequestParametersContractType = "CALLE"
const BuyContractForMultipleAccountsRequestParametersContractTypeCALLSPREAD BuyContractForMultipleAccountsRequestParametersContractType = "CALLSPREAD"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITDIFF BuyContractForMultipleAccountsRequestParametersContractType = "DIGITDIFF"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITEVEN BuyContractForMultipleAccountsRequestParametersContractType = "DIGITEVEN"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITMATCH BuyContractForMultipleAccountsRequestParametersContractType = "DIGITMATCH"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITODD BuyContractForMultipleAccountsRequestParametersContractType = "DIGITODD"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITOVER BuyContractForMultipleAccountsRequestParametersContractType = "DIGITOVER"
const BuyContractForMultipleAccountsRequestParametersContractTypeDIGITUNDER BuyContractForMultipleAccountsRequestParametersContractType = "DIGITUNDER"
const BuyContractForMultipleAccountsRequestParametersContractTypeEXPIRYMISS BuyContractForMultipleAccountsRequestParametersContractType = "EXPIRYMISS"
const BuyContractForMultipleAccountsRequestParametersContractTypeEXPIRYMISSE BuyContractForMultipleAccountsRequestParametersContractType = "EXPIRYMISSE"
const BuyContractForMultipleAccountsRequestParametersContractTypeEXPIRYRANGE BuyContractForMultipleAccountsRequestParametersContractType = "EXPIRYRANGE"
const BuyContractForMultipleAccountsRequestParametersContractTypeEXPIRYRANGEE BuyContractForMultipleAccountsRequestParametersContractType = "EXPIRYRANGEE"
const BuyContractForMultipleAccountsRequestParametersContractTypeLBFLOATCALL BuyContractForMultipleAccountsRequestParametersContractType = "LBFLOATCALL"
const BuyContractForMultipleAccountsRequestParametersContractTypeLBFLOATPUT BuyContractForMultipleAccountsRequestParametersContractType = "LBFLOATPUT"
const BuyContractForMultipleAccountsRequestParametersContractTypeLBHIGHLOW BuyContractForMultipleAccountsRequestParametersContractType = "LBHIGHLOW"
const BuyContractForMultipleAccountsRequestParametersContractTypeMULTDOWN BuyContractForMultipleAccountsRequestParametersContractType = "MULTDOWN"
const BuyContractForMultipleAccountsRequestParametersContractTypeMULTUP BuyContractForMultipleAccountsRequestParametersContractType = "MULTUP"
const BuyContractForMultipleAccountsRequestParametersContractTypeNOTOUCH BuyContractForMultipleAccountsRequestParametersContractType = "NOTOUCH"
const BuyContractForMultipleAccountsRequestParametersContractTypeONETOUCH BuyContractForMultipleAccountsRequestParametersContractType = "ONETOUCH"
const BuyContractForMultipleAccountsRequestParametersContractTypePUT BuyContractForMultipleAccountsRequestParametersContractType = "PUT"
const BuyContractForMultipleAccountsRequestParametersContractTypePUTE BuyContractForMultipleAccountsRequestParametersContractType = "PUTE"
const BuyContractForMultipleAccountsRequestParametersContractTypePUTSPREAD BuyContractForMultipleAccountsRequestParametersContractType = "PUTSPREAD"
const BuyContractForMultipleAccountsRequestParametersContractTypeRANGE BuyContractForMultipleAccountsRequestParametersContractType = "RANGE"
const BuyContractForMultipleAccountsRequestParametersContractTypeRESETCALL BuyContractForMultipleAccountsRequestParametersContractType = "RESETCALL"
const BuyContractForMultipleAccountsRequestParametersContractTypeRESETPUT BuyContractForMultipleAccountsRequestParametersContractType = "RESETPUT"
const BuyContractForMultipleAccountsRequestParametersContractTypeRUNHIGH BuyContractForMultipleAccountsRequestParametersContractType = "RUNHIGH"
const BuyContractForMultipleAccountsRequestParametersContractTypeRUNLOW BuyContractForMultipleAccountsRequestParametersContractType = "RUNLOW"
const BuyContractForMultipleAccountsRequestParametersContractTypeTICKHIGH BuyContractForMultipleAccountsRequestParametersContractType = "TICKHIGH"
const BuyContractForMultipleAccountsRequestParametersContractTypeTICKLOW BuyContractForMultipleAccountsRequestParametersContractType = "TICKLOW"
const BuyContractForMultipleAccountsRequestParametersContractTypeTURBOSLONG BuyContractForMultipleAccountsRequestParametersContractType = "TURBOSLONG"
const BuyContractForMultipleAccountsRequestParametersContractTypeTURBOSSHORT BuyContractForMultipleAccountsRequestParametersContractType = "TURBOSSHORT"
const BuyContractForMultipleAccountsRequestParametersContractTypeUPORDOWN BuyContractForMultipleAccountsRequestParametersContractType = "UPORDOWN"
const BuyContractForMultipleAccountsRequestParametersContractTypeVANILLALONGCALL BuyContractForMultipleAccountsRequestParametersContractType = "VANILLALONGCALL"
const BuyContractForMultipleAccountsRequestParametersContractTypeVANILLALONGPUT BuyContractForMultipleAccountsRequestParametersContractType = "VANILLALONGPUT"

type BuyContractForMultipleAccountsRequestParametersDurationUnit string

const BuyContractForMultipleAccountsRequestParametersDurationUnitD BuyContractForMultipleAccountsRequestParametersDurationUnit = "d"
const BuyContractForMultipleAccountsRequestParametersDurationUnitH BuyContractForMultipleAccountsRequestParametersDurationUnit = "h"
const BuyContractForMultipleAccountsRequestParametersDurationUnitM BuyContractForMultipleAccountsRequestParametersDurationUnit = "m"
const BuyContractForMultipleAccountsRequestParametersDurationUnitS BuyContractForMultipleAccountsRequestParametersDurationUnit = "s"
const BuyContractForMultipleAccountsRequestParametersDurationUnitT BuyContractForMultipleAccountsRequestParametersDurationUnit = "t"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type BuyContractForMultipleAccountsRequestPassthrough map[string]interface{}

// A message with transaction results is received
type BuyContractForMultipleAccountsResponse struct {
	// Receipt confirmation for the purchase
	BuyContractForMultipleAccounts *BuyContractForMultipleAccountsResponseBuyContractForMultipleAccounts `json:"buy_contract_for_multiple_accounts,omitempty"`

	// Echo of the request made.
	EchoReq BuyContractForMultipleAccountsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType BuyContractForMultipleAccountsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Receipt confirmation for the purchase
type BuyContractForMultipleAccountsResponseBuyContractForMultipleAccounts struct {
	// List of results containing transactions and/or errors for the bought contracts.
	Result []interface{} `json:"result"`
}

// Echo of the request made.
type BuyContractForMultipleAccountsResponseEchoReq map[string]interface{}

type BuyContractForMultipleAccountsResponseMsgType string

const BuyContractForMultipleAccountsResponseMsgTypeBuyContractForMultipleAccounts BuyContractForMultipleAccountsResponseMsgType = "buy_contract_for_multiple_accounts"

// Buy a Contract
type BuyRequest struct {
	// Either the ID received from a Price Proposal (`proposal` call), or `1` if
	// contract buy parameters are passed in the `parameters` field.
	Buy string `json:"buy"`

	// [Optional] Used to pass the parameters for contract buy.
	Parameters *BuyRequestParameters `json:"parameters,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough BuyRequestPassthrough `json:"passthrough,omitempty"`

	// Maximum price at which to purchase the contract.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] `1` to stream.
	Subscribe *BuyRequestSubscribe `json:"subscribe,omitempty"`
}

// [Optional] Used to pass the parameters for contract buy.
type BuyRequestParameters struct {
	// [Optional] Proposed payout or stake value
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Markup added to contract prices (as a percentage of contract payout)
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// [Optional] Barrier for the contract (or last digit prediction for digit
	// contracts). Contracts less than 24 hours in duration would need a relative
	// barrier (barriers which need +/-), where entry spot would be adjusted
	// accordingly with that amount to define a barrier, except for Synthetic Indices
	// as they support both relative and absolute barriers.
	Barrier *string `json:"barrier,omitempty"`

	// [Optional] Low barrier for the contract (for contracts with two barriers).
	// Contracts less than 24 hours in duration would need a relative barrier
	// (barriers which need +/-), where entry spot would be adjusted accordingly with
	// that amount to define a barrier, except for Synthetic Indices as they support
	// both relative and absolute barriers.
	Barrier2 *string `json:"barrier2,omitempty"`

	// [Optional] Barrier range for callputspread.
	BarrierRange *BuyRequestParametersBarrierRange `json:"barrier_range,omitempty"`

	// [Optional] Indicates whether amount is 'payout' or 'stake' for binary options.
	Basis *BuyRequestParametersBasis `json:"basis,omitempty"`

	// Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).
	Cancellation *string `json:"cancellation,omitempty"`

	// A valid contract-type
	ContractType BuyRequestParametersContractType `json:"contract_type"`

	// This can only be the account-holder's currency
	Currency string `json:"currency"`

	// [Optional] Epoch value of the expiry time of the contract. You must either
	// specify date_expiry or duration.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// [Optional] For forward-starting contracts, epoch value of the starting time of
	// the contract.
	DateStart *int `json:"date_start,omitempty"`

	// [Optional] Duration quantity
	Duration *int `json:"duration,omitempty"`

	// [Optional] Duration unit is `s`: seconds, `m`: minutes, `h`: hours, `d`: days,
	// `t`: ticks
	DurationUnit *BuyRequestParametersDurationUnit `json:"duration_unit,omitempty"`

	// [Optional] Growth rate of an accumulator contract.
	GrowthRate *float64 `json:"growth_rate,omitempty"`

	// Add an order to close the contract once the order condition is met (only for
	// `MULTUP` and `MULTDOWN` and `ACCU` contracts).
	LimitOrder *BuyRequestParametersLimitOrder `json:"limit_order,omitempty"`

	// [Optional] The multiplier for non-binary options. E.g. lookbacks.
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Optional] The product type.
	ProductType BuyRequestParametersProductType `json:"product_type,omitempty"`

	// [Optional] The tick that is predicted to have the highest/lowest value - for
	// tickhigh and ticklow contracts.
	SelectedTick *int `json:"selected_tick,omitempty"`

	// Symbol code
	Symbol string `json:"symbol"`

	// [Optional] An epoch value of a predefined trading period start time
	TradingPeriodStart *int `json:"trading_period_start,omitempty"`
}

type BuyRequestParametersBarrierRange string

const BuyRequestParametersBarrierRangeMiddle BuyRequestParametersBarrierRange = "middle"
const BuyRequestParametersBarrierRangeTight BuyRequestParametersBarrierRange = "tight"
const BuyRequestParametersBarrierRangeWide BuyRequestParametersBarrierRange = "wide"

type BuyRequestParametersBasis string

const BuyRequestParametersBasisPayout BuyRequestParametersBasis = "payout"
const BuyRequestParametersBasisStake BuyRequestParametersBasis = "stake"

type BuyRequestParametersContractType string

const BuyRequestParametersContractTypeACCU BuyRequestParametersContractType = "ACCU"
const BuyRequestParametersContractTypeASIAND BuyRequestParametersContractType = "ASIAND"
const BuyRequestParametersContractTypeASIANU BuyRequestParametersContractType = "ASIANU"
const BuyRequestParametersContractTypeCALL BuyRequestParametersContractType = "CALL"
const BuyRequestParametersContractTypeCALLE BuyRequestParametersContractType = "CALLE"
const BuyRequestParametersContractTypeCALLSPREAD BuyRequestParametersContractType = "CALLSPREAD"
const BuyRequestParametersContractTypeDIGITDIFF BuyRequestParametersContractType = "DIGITDIFF"
const BuyRequestParametersContractTypeDIGITEVEN BuyRequestParametersContractType = "DIGITEVEN"
const BuyRequestParametersContractTypeDIGITMATCH BuyRequestParametersContractType = "DIGITMATCH"
const BuyRequestParametersContractTypeDIGITODD BuyRequestParametersContractType = "DIGITODD"
const BuyRequestParametersContractTypeDIGITOVER BuyRequestParametersContractType = "DIGITOVER"
const BuyRequestParametersContractTypeDIGITUNDER BuyRequestParametersContractType = "DIGITUNDER"
const BuyRequestParametersContractTypeEXPIRYMISS BuyRequestParametersContractType = "EXPIRYMISS"
const BuyRequestParametersContractTypeEXPIRYMISSE BuyRequestParametersContractType = "EXPIRYMISSE"
const BuyRequestParametersContractTypeEXPIRYRANGE BuyRequestParametersContractType = "EXPIRYRANGE"
const BuyRequestParametersContractTypeEXPIRYRANGEE BuyRequestParametersContractType = "EXPIRYRANGEE"
const BuyRequestParametersContractTypeLBFLOATCALL BuyRequestParametersContractType = "LBFLOATCALL"
const BuyRequestParametersContractTypeLBFLOATPUT BuyRequestParametersContractType = "LBFLOATPUT"
const BuyRequestParametersContractTypeLBHIGHLOW BuyRequestParametersContractType = "LBHIGHLOW"
const BuyRequestParametersContractTypeMULTDOWN BuyRequestParametersContractType = "MULTDOWN"
const BuyRequestParametersContractTypeMULTUP BuyRequestParametersContractType = "MULTUP"
const BuyRequestParametersContractTypeNOTOUCH BuyRequestParametersContractType = "NOTOUCH"
const BuyRequestParametersContractTypeONETOUCH BuyRequestParametersContractType = "ONETOUCH"
const BuyRequestParametersContractTypePUT BuyRequestParametersContractType = "PUT"
const BuyRequestParametersContractTypePUTE BuyRequestParametersContractType = "PUTE"
const BuyRequestParametersContractTypePUTSPREAD BuyRequestParametersContractType = "PUTSPREAD"
const BuyRequestParametersContractTypeRANGE BuyRequestParametersContractType = "RANGE"
const BuyRequestParametersContractTypeRESETCALL BuyRequestParametersContractType = "RESETCALL"
const BuyRequestParametersContractTypeRESETPUT BuyRequestParametersContractType = "RESETPUT"
const BuyRequestParametersContractTypeRUNHIGH BuyRequestParametersContractType = "RUNHIGH"
const BuyRequestParametersContractTypeRUNLOW BuyRequestParametersContractType = "RUNLOW"
const BuyRequestParametersContractTypeTICKHIGH BuyRequestParametersContractType = "TICKHIGH"
const BuyRequestParametersContractTypeTICKLOW BuyRequestParametersContractType = "TICKLOW"
const BuyRequestParametersContractTypeTURBOSLONG BuyRequestParametersContractType = "TURBOSLONG"
const BuyRequestParametersContractTypeTURBOSSHORT BuyRequestParametersContractType = "TURBOSSHORT"
const BuyRequestParametersContractTypeUPORDOWN BuyRequestParametersContractType = "UPORDOWN"
const BuyRequestParametersContractTypeVANILLALONGCALL BuyRequestParametersContractType = "VANILLALONGCALL"
const BuyRequestParametersContractTypeVANILLALONGPUT BuyRequestParametersContractType = "VANILLALONGPUT"

type BuyRequestParametersDurationUnit string

const BuyRequestParametersDurationUnitD BuyRequestParametersDurationUnit = "d"
const BuyRequestParametersDurationUnitH BuyRequestParametersDurationUnit = "h"
const BuyRequestParametersDurationUnitM BuyRequestParametersDurationUnit = "m"
const BuyRequestParametersDurationUnitS BuyRequestParametersDurationUnit = "s"
const BuyRequestParametersDurationUnitT BuyRequestParametersDurationUnit = "t"

// Add an order to close the contract once the order condition is met (only for
// `MULTUP` and `MULTDOWN` and `ACCU` contracts).
type BuyRequestParametersLimitOrder struct {
	// Contract will be automatically closed when the value of the contract reaches a
	// specific loss.
	StopLoss *float64 `json:"stop_loss,omitempty"`

	// Contract will be automatically closed when the value of the contract reaches a
	// specific profit.
	TakeProfit *float64 `json:"take_profit,omitempty"`
}

type BuyRequestParametersProductType string

const BuyRequestParametersProductTypeBasic BuyRequestParametersProductType = "basic"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type BuyRequestPassthrough map[string]interface{}

type BuyRequestSubscribe int

// A message with transaction results is received
type BuyResponse struct {
	// Receipt confirmation for the purchase
	Buy *BuyResponseBuy `json:"buy,omitempty"`

	// Echo of the request made.
	EchoReq BuyResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType BuyResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *BuyResponseSubscription `json:"subscription,omitempty"`
}

// Receipt confirmation for the purchase
type BuyResponseBuy struct {
	// The new account balance after completion of the purchase
	BalanceAfter float64 `json:"balance_after"`

	// Actual effected purchase price
	BuyPrice float64 `json:"buy_price"`

	// Internal contract identifier
	ContractId int `json:"contract_id"`

	// The description of contract purchased
	Longcode string `json:"longcode"`

	// Proposed payout value
	Payout float64 `json:"payout"`

	// Epoch value of the transaction purchase time
	PurchaseTime int `json:"purchase_time"`

	// Compact description of the contract purchased
	Shortcode string `json:"shortcode"`

	// Epoch value showing the expected start time of the contract
	StartTime int `json:"start_time"`

	// Internal transaction identifier
	TransactionId int `json:"transaction_id"`
}

// Echo of the request made.
type BuyResponseEchoReq map[string]interface{}

type BuyResponseMsgType string

const BuyResponseMsgTypeBuy BuyResponseMsgType = "buy"

// For subscription requests only.
type BuyResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Cancel contract with contract id
type CancelRequest struct {
	// Value should be the `contract_id` which received from the `portfolio` call.
	Cancel int `json:"cancel"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CancelRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CancelRequestPassthrough map[string]interface{}

// A message with transaction results is received
type CancelResponse struct {
	// Receipt for the transaction
	Cancel *CancelResponseCancel `json:"cancel,omitempty"`

	// Echo of the request made.
	EchoReq CancelResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CancelResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Receipt for the transaction
type CancelResponseCancel struct {
	// New account balance after completion of the sale
	BalanceAfter *float64 `json:"balance_after,omitempty"`

	// Internal contract identifier for the sold contract
	ContractId *int `json:"contract_id,omitempty"`

	// Internal transaction identifier for the corresponding buy transaction
	ReferenceId *int `json:"reference_id,omitempty"`

	// Actual effected sale price
	SoldFor *float64 `json:"sold_for,omitempty"`

	// Internal transaction identifier for the sale transaction
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Echo of the request made.
type CancelResponseEchoReq map[string]interface{}

type CancelResponseMsgType string

const CancelResponseMsgTypeCancel CancelResponseMsgType = "cancel"

// Request the cashier info for the specified type.
type CashierRequest struct {
	// [Optional] Address for crypto withdrawal. Only applicable for `api` type.
	Address *string `json:"address,omitempty"`

	// [Optional] Amount for crypto withdrawal. Only applicable for `api` type.
	Amount *float64 `json:"amount,omitempty"`

	// Operation which needs to be requested from cashier
	Cashier CashierRequestCashier `json:"cashier"`

	// [Optional] If set to `1`, only validation is performed. Only applicable for
	// `withdraw` using `crypto` provider and `api` type.
	DryRun CashierRequestDryRun `json:"dry_run,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CashierRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Cashier provider. `crypto` will be default option for crypto
	// currency accounts.
	Provider CashierRequestProvider `json:"provider,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Data need to be returned from cashier. `api` is supported only for
	// `crypto` provider.
	Type CashierRequestType `json:"type,omitempty"`

	// [Optional] Email verification code (received from a `verify_email` call, which
	// must be done first)
	VerificationCode *string `json:"verification_code,omitempty"`
}

type CashierRequestCashier string

const CashierRequestCashierDeposit CashierRequestCashier = "deposit"
const CashierRequestCashierWithdraw CashierRequestCashier = "withdraw"

type CashierRequestDryRun int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CashierRequestPassthrough map[string]interface{}

type CashierRequestProvider string

const CashierRequestProviderCrypto CashierRequestProvider = "crypto"
const CashierRequestProviderDoughflow CashierRequestProvider = "doughflow"

type CashierRequestType string

const CashierRequestTypeApi CashierRequestType = "api"
const CashierRequestTypeUrl CashierRequestType = "url"

// Cashier information for the specified type.
type CashierResponse struct {
	// Possible error codes are:
	// - `ASK_TNC_APPROVAL`: API call `tnc_approval`
	// - `ASK_AUTHENTICATE`
	// - `ASK_UK_FUNDS_PROTECTION`: API call `tnc_approval`
	// - `ASK_CURRENCY`: API call `set_account_currency`
	// - `ASK_EMAIL_VERIFY`: API call `verify_email`
	// - `ASK_FIX_DETAILS`: API call `set_settings`
	Cashier interface{} `json:"cashier,omitempty"`

	// Echo of the request made.
	EchoReq CashierResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CashierResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type CashierResponseEchoReq map[string]interface{}

type CashierResponseMsgType string

const CashierResponseMsgTypeCashier CashierResponseMsgType = "cashier"

// Request for contract update history.
type ContractUpdateHistoryRequest struct {
	// Internal unique contract identifier.
	ContractId int `json:"contract_id"`

	// Must be `1`
	ContractUpdateHistory ContractUpdateHistoryRequestContractUpdateHistory `json:"contract_update_history"`

	// [Optional] Maximum number of historical updates to receive.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractUpdateHistoryRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ContractUpdateHistoryRequestContractUpdateHistory int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractUpdateHistoryRequestPassthrough map[string]interface{}

// Contract update history status
type ContractUpdateHistoryResponse struct {
	// Contains the historical and the most recent update status of the contract
	ContractUpdateHistory []ContractUpdateHistoryResponseContractUpdateHistoryElem `json:"contract_update_history,omitempty"`

	// Echo of the request made.
	EchoReq ContractUpdateHistoryResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ContractUpdateHistoryResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Contains the changed parameter.
type ContractUpdateHistoryResponseContractUpdateHistoryElem struct {
	// Display name of the changed parameter.
	DisplayName *string `json:"display_name,omitempty"`

	// The amount.
	OrderAmount *string `json:"order_amount,omitempty"`

	// The epoch when the changed was done.
	OrderDate *int `json:"order_date,omitempty"`

	// The contract parameter updated.
	OrderType *string `json:"order_type,omitempty"`

	// The pip-sized barrier value.
	Value interface{} `json:"value,omitempty"`
}

// Echo of the request made.
type ContractUpdateHistoryResponseEchoReq map[string]interface{}

type ContractUpdateHistoryResponseMsgType string

const ContractUpdateHistoryResponseMsgTypeContractUpdateHistory ContractUpdateHistoryResponseMsgType = "contract_update_history"

// Update a contract condition.
type ContractUpdateRequest struct {
	// Internal unique contract identifier.
	ContractId int `json:"contract_id"`

	// Must be `1`
	ContractUpdate ContractUpdateRequestContractUpdate `json:"contract_update"`

	// Specify limit order to update.
	LimitOrder ContractUpdateRequestLimitOrder `json:"limit_order"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractUpdateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ContractUpdateRequestContractUpdate int

// Specify limit order to update.
type ContractUpdateRequestLimitOrder struct {
	// New stop loss value for a contract. To cancel, pass `null`.
	StopLoss interface{} `json:"stop_loss,omitempty"`

	// New take profit value for a contract. To cancel, pass `null`.
	TakeProfit interface{} `json:"take_profit,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractUpdateRequestPassthrough map[string]interface{}

// Contract update status
type ContractUpdateResponse struct {
	// Contains the update status of the request
	ContractUpdate *ContractUpdateResponseContractUpdate `json:"contract_update,omitempty"`

	// Echo of the request made.
	EchoReq ContractUpdateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ContractUpdateResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Contains the update status of the request
type ContractUpdateResponseContractUpdate struct {
	// The target spot price where the contract will be closed automatically at the
	// loss specified by the user.
	StopLoss *ContractUpdateResponseContractUpdateStopLoss `json:"stop_loss,omitempty"`

	// The target spot price where the contract will be closed automatically at the
	// profit specified by the user.
	TakeProfit *ContractUpdateResponseContractUpdateTakeProfit `json:"take_profit,omitempty"`
}

// The target spot price where the contract will be closed automatically at the
// loss specified by the user.
type ContractUpdateResponseContractUpdateStopLoss struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Stop loss amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Stop loss order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Stop loss pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

// The target spot price where the contract will be closed automatically at the
// profit specified by the user.
type ContractUpdateResponseContractUpdateTakeProfit struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Take profit amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Take profit order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Take profit pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

// Echo of the request made.
type ContractUpdateResponseEchoReq map[string]interface{}

type ContractUpdateResponseMsgType string

const ContractUpdateResponseMsgTypeContractUpdate ContractUpdateResponseMsgType = "contract_update"

// For a given symbol, get the list of currently available contracts, and the
// latest barrier and duration limits for each contract.
type ContractsForRequest struct {
	// The short symbol name (obtained from `active_symbols` call).
	ContractsFor string `json:"contracts_for"`

	// [Optional] Currency of the contract's stake and payout (obtained from
	// `payout_currencies` call).
	Currency string `json:"currency,omitempty"`

	// Deprecated - Replaced by landing_company_short.
	LandingCompany ContractsForRequestLandingCompany `json:"landing_company,omitempty"`

	// [Optional] Indicates which landing company to get a list of contracts for. If
	// you are logged in, your account's landing company will override this field.
	// Note that when landing_company_short is set to 'virtual', landing_company will
	// take precendce until the deprecated field is removed from the api.
	LandingCompanyShort ContractsForRequestLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractsForRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] If you specify this field, only contracts tradable through that
	// contract type will be returned.
	ProductType *ContractsForRequestProductType `json:"product_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ContractsForRequestLandingCompany string

const ContractsForRequestLandingCompanyChampion ContractsForRequestLandingCompany = "champion"
const ContractsForRequestLandingCompanyChampionVirtual ContractsForRequestLandingCompany = "champion-virtual"
const ContractsForRequestLandingCompanyIom ContractsForRequestLandingCompany = "iom"
const ContractsForRequestLandingCompanyMalta ContractsForRequestLandingCompany = "malta"
const ContractsForRequestLandingCompanyMaltainvest ContractsForRequestLandingCompany = "maltainvest"

type ContractsForRequestLandingCompanyShort string

const ContractsForRequestLandingCompanyShortChampion ContractsForRequestLandingCompanyShort = "champion"
const ContractsForRequestLandingCompanyShortChampionVirtual ContractsForRequestLandingCompanyShort = "champion-virtual"
const ContractsForRequestLandingCompanyShortIom ContractsForRequestLandingCompanyShort = "iom"
const ContractsForRequestLandingCompanyShortMalta ContractsForRequestLandingCompanyShort = "malta"
const ContractsForRequestLandingCompanyShortMaltainvest ContractsForRequestLandingCompanyShort = "maltainvest"
const ContractsForRequestLandingCompanyShortSvg ContractsForRequestLandingCompanyShort = "svg"
const ContractsForRequestLandingCompanyShortVanuatu ContractsForRequestLandingCompanyShort = "vanuatu"
const ContractsForRequestLandingCompanyShortVirtual ContractsForRequestLandingCompanyShort = "virtual"
const ContractsForRequestLandingCompanySvg ContractsForRequestLandingCompany = "svg"
const ContractsForRequestLandingCompanyVanuatu ContractsForRequestLandingCompany = "vanuatu"
const ContractsForRequestLandingCompanyVirtual ContractsForRequestLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractsForRequestPassthrough map[string]interface{}

type ContractsForRequestProductType string

const ContractsForRequestProductTypeBasic ContractsForRequestProductType = "basic"

// Get the list of currently available contracts
type ContractsForResponse struct {
	// List of available contracts. Note: if the user is authenticated, then only
	// contracts allowed under his account will be returned.
	ContractsFor *ContractsForResponseContractsFor `json:"contracts_for,omitempty"`

	// Echo of the request made.
	EchoReq ContractsForResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ContractsForResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// List of available contracts. Note: if the user is authenticated, then only
// contracts allowed under his account will be returned.
type ContractsForResponseContractsFor struct {
	// Array of available contracts details
	Available []ContractsForResponseContractsForAvailableElem `json:"available"`

	// Symbol's next market-close time as an epoch value
	Close interface{} `json:"close,omitempty"`

	// Indicates the feed license for symbol, for example whether its realtime or
	// delayed
	FeedLicense *string `json:"feed_license,omitempty"`

	// Count of contracts available
	HitCount *float64 `json:"hit_count,omitempty"`

	// Symbol's next market-open time as an epoch value
	Open interface{} `json:"open,omitempty"`

	// Current spot price for this underlying
	Spot interface{} `json:"spot,omitempty"`
}

type ContractsForResponseContractsForAvailableElem struct {
	// Array of available barriers for a predefined trading period
	AvailableBarriers []interface{} `json:"available_barriers,omitempty"`

	// Barrier Details.
	Barrier interface{} `json:"barrier,omitempty"`

	// Category of barrier.
	BarrierCategory string `json:"barrier_category"`

	// [Only for Vanilla] Barrier Choices
	BarrierChoices []interface{} `json:"barrier_choices,omitempty"`

	// Number of barriers.
	Barriers float64 `json:"barriers"`

	// Cancellation range
	CancellationRange []interface{} `json:"cancellation_range,omitempty"`

	// Category of contract.
	ContractCategory string `json:"contract_category"`

	// Category of the contract.
	ContractCategoryDisplay string `json:"contract_category_display"`

	// Display name for the type of contract.
	ContractDisplay *string `json:"contract_display,omitempty"`

	// Type of contract.
	ContractType string `json:"contract_type"`

	// Name of exchange
	ExchangeName string `json:"exchange_name"`

	// Array of barriers already expired
	ExpiredBarriers []interface{} `json:"expired_barriers,omitempty"`

	// Expiry Type.
	ExpiryType string `json:"expiry_type"`

	// Array of returned forward starting options
	ForwardStartingOptions []ContractsForResponseContractsForAvailableElemForwardStartingOptionsElem `json:"forward_starting_options,omitempty"`

	// Growth rate range.
	GrowthRateRange []interface{} `json:"growth_rate_range,omitempty"`

	// High barrier Details.
	HighBarrier interface{} `json:"high_barrier,omitempty"`

	// Last digit range
	LastDigitRange []interface{} `json:"last_digit_range,omitempty"`

	// Low barrier Details.
	LowBarrier interface{} `json:"low_barrier,omitempty"`

	// Type of market.
	Market string `json:"market"`

	// Maximum contract duration
	MaxContractDuration string `json:"max_contract_duration"`

	// [Only for turbos options] Maximum contract stake
	MaxStake interface{} `json:"max_stake,omitempty"`

	// Minimum contract duration.
	MinContractDuration string `json:"min_contract_duration"`

	// [Only for turbos options] Minimum contract stake
	MinStake interface{} `json:"min_stake,omitempty"`

	// Multiplier range.
	MultiplierRange []interface{} `json:"multiplier_range,omitempty"`

	// Maximum payout.
	PayoutLimit *float64 `json:"payout_limit,omitempty"`

	// Type of sentiment.
	Sentiment string `json:"sentiment"`

	// Start Type.
	StartType string `json:"start_type"`

	// Type of submarket.
	Submarket string `json:"submarket"`

	// A hash of predefined trading period
	TradingPeriod ContractsForResponseContractsForAvailableElemTradingPeriod `json:"trading_period,omitempty"`

	// Symbol code
	UnderlyingSymbol string `json:"underlying_symbol"`
}

type ContractsForResponseContractsForAvailableElemForwardStartingOptionsElem struct {
	// The epoch value for the blackouts of forward starting session.
	Blackouts []interface{} `json:"blackouts,omitempty"`

	// The epoch value for the closing date of forward starting session.
	Close *string `json:"close,omitempty"`

	// The epoch value for the date of forward starting session.
	Date *string `json:"date,omitempty"`

	// The epoch value for the opening date of forward starting session.
	Open *string `json:"open,omitempty"`
}

// A hash of predefined trading period
type ContractsForResponseContractsForAvailableElemTradingPeriod map[string]interface{}

// Echo of the request made.
type ContractsForResponseEchoReq map[string]interface{}

type ContractsForResponseMsgType string

const ContractsForResponseMsgTypeContractsFor ContractsForResponseMsgType = "contracts_for"

// Start copy trader bets
type CopyStartRequest struct {
	// [Optional] Used to set assets to be copied. E.x ["frxUSDJPY", "R_50"]
	Assets interface{} `json:"assets,omitempty"`

	// API tokens identifying the accounts of trader which will be used to copy trades
	CopyStart string `json:"copy_start"`

	// [Optional] Used to set maximum trade stake to be copied.
	MaxTradeStake *float64 `json:"max_trade_stake,omitempty"`

	// [Optional] Used to set minimal trade stake to be copied.
	MinTradeStake *float64 `json:"min_trade_stake,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopyStartRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Used to set trade types to be copied. E.x ["CALL", "PUT"]
	TradeTypes interface{} `json:"trade_types,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopyStartRequestPassthrough map[string]interface{}

// A message with results is received
type CopyStartResponse struct {
	// Copy start confirmation. Returns 1 is success.
	CopyStart *int `json:"copy_start,omitempty"`

	// Echo of the request made.
	EchoReq CopyStartResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopyStartResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type CopyStartResponseEchoReq map[string]interface{}

type CopyStartResponseMsgType string

const CopyStartResponseMsgTypeCopyStart CopyStartResponseMsgType = "copy_start"

// Stop copy trader bets
type CopyStopRequest struct {
	// API tokens identifying the accounts which needs not to be copied
	CopyStop string `json:"copy_stop"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopyStopRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopyStopRequestPassthrough map[string]interface{}

// A message with results is received
type CopyStopResponse struct {
	// Copy stopping confirmation. Returns 1 is success.
	CopyStop *int `json:"copy_stop,omitempty"`

	// Echo of the request made.
	EchoReq CopyStopResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopyStopResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type CopyStopResponseEchoReq map[string]interface{}

type CopyStopResponseMsgType string

const CopyStopResponseMsgTypeCopyStop CopyStopResponseMsgType = "copy_stop"

// Retrieves a list of active copiers and/or traders for Copy Trading
type CopytradingListRequest struct {
	// Must be `1`
	CopytradingList CopytradingListRequestCopytradingList `json:"copytrading_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopytradingListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type CopytradingListRequestCopytradingList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopytradingListRequestPassthrough map[string]interface{}

// Details of copiers and/or traders for Copy Trading
type CopytradingListResponse struct {
	// The trading information of copiers or traders.
	CopytradingList *CopytradingListResponseCopytradingList `json:"copytrading_list,omitempty"`

	// Echo of the request made.
	EchoReq CopytradingListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopytradingListResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// The trading information of copiers or traders.
type CopytradingListResponseCopytradingList struct {
	// List of users who are currently copy trading the authenticated user
	Copiers []CopytradingListResponseCopytradingListCopiersElem `json:"copiers"`

	// List of traders being followed by the authenticated user
	Traders []CopytradingListResponseCopytradingListTradersElem `json:"traders"`
}

type CopytradingListResponseCopytradingListCopiersElem struct {
	// The loginid of the copier's account.
	Loginid string `json:"loginid"`
}

type CopytradingListResponseCopytradingListTradersElem struct {
	// The list of assets to copy the trades of.
	Assets []string `json:"assets,omitempty"`

	// The loginid of the trader's account.
	Loginid *string `json:"loginid,omitempty"`

	// Maximum trading stake set for the trader.
	MaxTradeStake interface{} `json:"max_trade_stake,omitempty"`

	// Minimum trading stake set for the trader.
	MinTradeStake interface{} `json:"min_trade_stake,omitempty"`

	// The token provided for the trader.
	Token *string `json:"token,omitempty"`

	// The type of trades set.
	TradeTypes []string `json:"trade_types,omitempty"`
}

// Echo of the request made.
type CopytradingListResponseEchoReq map[string]interface{}

type CopytradingListResponseMsgType string

const CopytradingListResponseMsgTypeCopytradingList CopytradingListResponseMsgType = "copytrading_list"

// Retrieve performance, trading, risk and copiers statistics of trader.
type CopytradingStatisticsRequest struct {
	// Must be `1`
	CopytradingStatistics CopytradingStatisticsRequestCopytradingStatistics `json:"copytrading_statistics"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopytradingStatisticsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The ID of the target trader.
	TraderId string `json:"trader_id"`
}

type CopytradingStatisticsRequestCopytradingStatistics int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopytradingStatisticsRequestPassthrough map[string]interface{}

// The statistics of the trader.
type CopytradingStatisticsResponse struct {
	// Statistics of the trader
	CopytradingStatistics *CopytradingStatisticsResponseCopytradingStatistics `json:"copytrading_statistics,omitempty"`

	// Echo of the request made.
	EchoReq CopytradingStatisticsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopytradingStatisticsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Statistics of the trader
type CopytradingStatisticsResponseCopytradingStatistics struct {
	// This is the epoch the investor started trading.
	ActiveSince int `json:"active_since"`

	// Average seconds of keeping positions open.
	AvgDuration int `json:"avg_duration"`

	// Average loss of trades in percentage.
	AvgLoss float64 `json:"avg_loss"`

	// Average profitable trades in percentage.
	AvgProfit float64 `json:"avg_profit"`

	// Number of copiers for this trader.
	Copiers float64 `json:"copiers"`

	// Represents the net change in equity for a 12-month period.
	Last12MonthsProfitableTrades float64 `json:"last_12months_profitable_trades"`

	// Represents the net change in equity per month.
	MonthlyProfitableTrades CopytradingStatisticsResponseCopytradingStatisticsMonthlyProfitableTrades `json:"monthly_profitable_trades"`

	// Trader performance probability.
	PerformanceProbability float64 `json:"performance_probability"`

	// Total number of trades for all time.
	TotalTrades int `json:"total_trades"`

	// Represents the portfolio distribution by markets.
	TradesBreakdown CopytradingStatisticsResponseCopytradingStatisticsTradesBreakdown `json:"trades_breakdown"`

	// Number of profit trades in percentage.
	TradesProfitable float64 `json:"trades_profitable"`

	// Represents the net change in equity per year.
	YearlyProfitableTrades CopytradingStatisticsResponseCopytradingStatisticsYearlyProfitableTrades `json:"yearly_profitable_trades,omitempty"`
}

// Represents the net change in equity per month.
type CopytradingStatisticsResponseCopytradingStatisticsMonthlyProfitableTrades map[string]interface{}

// Represents the portfolio distribution by markets.
type CopytradingStatisticsResponseCopytradingStatisticsTradesBreakdown map[string]interface{}

// Represents the net change in equity per year.
type CopytradingStatisticsResponseCopytradingStatisticsYearlyProfitableTrades map[string]interface{}

// Echo of the request made.
type CopytradingStatisticsResponseEchoReq map[string]interface{}

type CopytradingStatisticsResponseMsgType string

const CopytradingStatisticsResponseMsgTypeCopytradingStatistics CopytradingStatisticsResponseMsgType = "copytrading_statistics"

// The request for cryptocurrencies configuration.
type CryptoConfigRequest struct {
	// Must be `1`
	CryptoConfig CryptoConfigRequestCryptoConfig `json:"crypto_config"`

	// [Optional] Cryptocurrency code. Sending request with currency_code provides
	// crypto config for the sent cryptocurrency code only.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CryptoConfigRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type CryptoConfigRequestCryptoConfig int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CryptoConfigRequestPassthrough map[string]interface{}

// The response will display the configuration details related to cryptocurrencies
type CryptoConfigResponse struct {
	// Provides cryptocurrencies configuration.
	CryptoConfig *CryptoConfigResponseCryptoConfig `json:"crypto_config,omitempty"`

	// Echo of the request made.
	EchoReq CryptoConfigResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CryptoConfigResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Provides cryptocurrencies configuration.
type CryptoConfigResponseCryptoConfig struct {
	// Currency configuration including limitiations for each crypto currency.
	CurrenciesConfig CryptoConfigResponseCryptoConfigCurrenciesConfig `json:"currencies_config"`
}

// Currency configuration including limitiations for each crypto currency.
type CryptoConfigResponseCryptoConfigCurrenciesConfig map[string]interface{}

// Echo of the request made.
type CryptoConfigResponseEchoReq map[string]interface{}

type CryptoConfigResponseMsgType string

const CryptoConfigResponseMsgTypeCryptoConfig CryptoConfigResponseMsgType = "crypto_config"

// Request KYC information from client
type DocumentUploadRequest struct {
	// Document file format
	DocumentFormat DocumentUploadRequestDocumentFormat `json:"document_format"`

	// [Optional] Document ID (required for Passport, Proof of ID and Driver's
	// License)
	DocumentId *string `json:"document_id,omitempty"`

	// [Optional] 2-letter country code
	DocumentIssuingCountry *string `json:"document_issuing_country,omitempty"`

	// Document type
	DocumentType DocumentUploadRequestDocumentType `json:"document_type"`

	// Must be `1`
	DocumentUpload DocumentUploadRequestDocumentUpload `json:"document_upload"`

	// The checksum of the file to be uploaded
	ExpectedChecksum string `json:"expected_checksum"`

	// [Optional] Document expiration date (required for Passport, Proof of ID and
	// Driver's License)
	ExpirationDate *string `json:"expiration_date,omitempty"`

	// Document size (should be less than 10MB)
	FileSize int `json:"file_size"`

	// [Optional] Boolean value that indicates whether this document is lifetime valid
	// (only applies to POI document types, cancels out the expiration_date given if
	// any)
	LifetimeValid *DocumentUploadRequestLifetimeValid `json:"lifetime_valid,omitempty"`

	// [Optional] To determine document side
	PageType *DocumentUploadRequestPageType `json:"page_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough DocumentUploadRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] It contains info about the proof of ownership being uploaded
	// (mandatory for proof_of_ownership document type)
	ProofOfOwnership *DocumentUploadRequestProofOfOwnership `json:"proof_of_ownership,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type DocumentUploadRequestDocumentFormat string

const DocumentUploadRequestDocumentFormatGIF DocumentUploadRequestDocumentFormat = "GIF"
const DocumentUploadRequestDocumentFormatJPEG DocumentUploadRequestDocumentFormat = "JPEG"
const DocumentUploadRequestDocumentFormatJPG DocumentUploadRequestDocumentFormat = "JPG"
const DocumentUploadRequestDocumentFormatPDF DocumentUploadRequestDocumentFormat = "PDF"
const DocumentUploadRequestDocumentFormatPNG DocumentUploadRequestDocumentFormat = "PNG"

type DocumentUploadRequestDocumentType string

const DocumentUploadRequestDocumentTypeAmlglobalcheck DocumentUploadRequestDocumentType = "amlglobalcheck"
const DocumentUploadRequestDocumentTypeArticleOfAssociation DocumentUploadRequestDocumentType = "article_of_association"
const DocumentUploadRequestDocumentTypeAuthorisationLetter DocumentUploadRequestDocumentType = "authorisation_letter"
const DocumentUploadRequestDocumentTypeBankstatement DocumentUploadRequestDocumentType = "bankstatement"
const DocumentUploadRequestDocumentTypeBirthCertificate DocumentUploadRequestDocumentType = "birth_certificate"
const DocumentUploadRequestDocumentTypeBrokerageStatement DocumentUploadRequestDocumentType = "brokerage statement"
const DocumentUploadRequestDocumentTypeBusinessDocumentsOthers DocumentUploadRequestDocumentType = "business_documents_others"
const DocumentUploadRequestDocumentTypeBusinessPoa DocumentUploadRequestDocumentType = "business_poa"
const DocumentUploadRequestDocumentTypeCoi DocumentUploadRequestDocumentType = "coi"
const DocumentUploadRequestDocumentTypeDeclarations DocumentUploadRequestDocumentType = "declarations"
const DocumentUploadRequestDocumentTypeDocverification DocumentUploadRequestDocumentType = "docverification"
const DocumentUploadRequestDocumentTypeDriverslicense DocumentUploadRequestDocumentType = "driverslicense"
const DocumentUploadRequestDocumentTypeDrivingLicence DocumentUploadRequestDocumentType = "driving_licence"
const DocumentUploadRequestDocumentTypeEddOthers DocumentUploadRequestDocumentType = "edd_others"
const DocumentUploadRequestDocumentTypeEmploymentContract DocumentUploadRequestDocumentType = "employment_contract"
const DocumentUploadRequestDocumentTypeInsuranceBill DocumentUploadRequestDocumentType = "insurance_bill"
const DocumentUploadRequestDocumentTypeMemorandum DocumentUploadRequestDocumentType = "memorandum"
const DocumentUploadRequestDocumentTypeNationalIdentityCard DocumentUploadRequestDocumentType = "national_identity_card"
const DocumentUploadRequestDocumentTypeNimcSlip DocumentUploadRequestDocumentType = "nimc_slip"
const DocumentUploadRequestDocumentTypeOther DocumentUploadRequestDocumentType = "other"
const DocumentUploadRequestDocumentTypePanCard DocumentUploadRequestDocumentType = "pan_card"
const DocumentUploadRequestDocumentTypePassport DocumentUploadRequestDocumentType = "passport"
const DocumentUploadRequestDocumentTypePayslip DocumentUploadRequestDocumentType = "payslip"
const DocumentUploadRequestDocumentTypePhoneBill DocumentUploadRequestDocumentType = "phone_bill"
const DocumentUploadRequestDocumentTypePoaOthers DocumentUploadRequestDocumentType = "poa_others"
const DocumentUploadRequestDocumentTypePoiOthers DocumentUploadRequestDocumentType = "poi_others"
const DocumentUploadRequestDocumentTypePowerOfAttorney DocumentUploadRequestDocumentType = "power_of_attorney"
const DocumentUploadRequestDocumentTypeProofOfOwnership DocumentUploadRequestDocumentType = "proof_of_ownership"
const DocumentUploadRequestDocumentTypeProofaddress DocumentUploadRequestDocumentType = "proofaddress"
const DocumentUploadRequestDocumentTypeProofid DocumentUploadRequestDocumentType = "proofid"
const DocumentUploadRequestDocumentTypeSelfieWithId DocumentUploadRequestDocumentType = "selfie_with_id"
const DocumentUploadRequestDocumentTypeStudentCard DocumentUploadRequestDocumentType = "student_card"
const DocumentUploadRequestDocumentTypeTaxPhotoId DocumentUploadRequestDocumentType = "tax_photo_id"
const DocumentUploadRequestDocumentTypeTaxReceipt DocumentUploadRequestDocumentType = "tax_receipt"
const DocumentUploadRequestDocumentTypeTaxReturn DocumentUploadRequestDocumentType = "tax_return"
const DocumentUploadRequestDocumentTypeUtilityBill DocumentUploadRequestDocumentType = "utility_bill"
const DocumentUploadRequestDocumentTypeVoterCard DocumentUploadRequestDocumentType = "voter_card"

type DocumentUploadRequestDocumentUpload int

type DocumentUploadRequestLifetimeValid int

type DocumentUploadRequestPageType string

const DocumentUploadRequestPageTypeBack DocumentUploadRequestPageType = "back"
const DocumentUploadRequestPageTypeFront DocumentUploadRequestPageType = "front"
const DocumentUploadRequestPageTypePhoto DocumentUploadRequestPageType = "photo"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type DocumentUploadRequestPassthrough map[string]interface{}

// [Optional] It contains info about the proof of ownership being uploaded
// (mandatory for proof_of_ownership document type)
type DocumentUploadRequestProofOfOwnership struct {
	// A collection of unspecific information related to the proof of ownership being
	// uploaded
	Details DocumentUploadRequestProofOfOwnershipDetails `json:"details"`

	// The id of the proof of ownership as shown in the /get_account_status proof of
	// ownership list
	Id float64 `json:"id"`
}

// A collection of unspecific information related to the proof of ownership being
// uploaded
type DocumentUploadRequestProofOfOwnershipDetails map[string]interface{}

// Receive details of uploaded authentication documents
type DocumentUploadResponse struct {
	// Details of the uploaded documents.
	DocumentUpload *DocumentUploadResponseDocumentUpload `json:"document_upload,omitempty"`

	// Echo of the request made.
	EchoReq DocumentUploadResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType DocumentUploadResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Details of the uploaded documents.
type DocumentUploadResponseDocumentUpload struct {
	// Current call type, add this to your binary payload metadata
	CallType float64 `json:"call_type"`

	// Hex encoded SHA-1 checksum of the file
	Checksum *string `json:"checksum,omitempty"`

	// 2-letter country code
	DocumentIssuingCountry *string `json:"document_issuing_country,omitempty"`

	// File size
	Size *float64 `json:"size,omitempty"`

	// Upload status (`success` or `failure`)
	Status *string `json:"status,omitempty"`

	// Current upload ID, add this to your binary payload metadata
	UploadId float64 `json:"upload_id"`
}

// Echo of the request made.
type DocumentUploadResponseEchoReq map[string]interface{}

type DocumentUploadResponseMsgType string

const DocumentUploadResponseMsgTypeDocumentUpload DocumentUploadResponseMsgType = "document_upload"

// Specify a currency to receive a list of events related to that specific
// currency. For example, specifying USD will return a list of USD-related events.
// If the currency is omitted, you will receive a list for all currencies.
type EconomicCalendarRequest struct {
	// [Optional] Currency symbol.
	Currency *string `json:"currency,omitempty"`

	// Must be `1`
	EconomicCalendar EconomicCalendarRequestEconomicCalendar `json:"economic_calendar"`

	// [Optional] End date.
	EndDate *int `json:"end_date,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough EconomicCalendarRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Start date.
	StartDate *int `json:"start_date,omitempty"`
}

type EconomicCalendarRequestEconomicCalendar int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type EconomicCalendarRequestPassthrough map[string]interface{}

// A list of economic events.
type EconomicCalendarResponse struct {
	// Echo of the request made.
	EchoReq EconomicCalendarResponseEchoReq `json:"echo_req"`

	// Economic calendar.
	EconomicCalendar *EconomicCalendarResponseEconomicCalendar `json:"economic_calendar,omitempty"`

	// Action name of the request made.
	MsgType EconomicCalendarResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type EconomicCalendarResponseEchoReq map[string]interface{}

// Economic calendar.
type EconomicCalendarResponseEconomicCalendar struct {
	// Array of economic events
	Events []EconomicCalendarResponseEconomicCalendarEventsElem `json:"events,omitempty"`
}

type EconomicCalendarResponseEconomicCalendarEventsElem struct {
	// Actual value.
	Actual *EconomicCalendarResponseEconomicCalendarEventsElemActual `json:"actual,omitempty"`

	// Currency symbol.
	Currency *string `json:"currency,omitempty"`

	// Event name.
	EventName *string `json:"event_name,omitempty"`

	// Forecasted value.
	Forecast *EconomicCalendarResponseEconomicCalendarEventsElemForecast `json:"forecast,omitempty"`

	// Impact.
	Impact *int `json:"impact,omitempty"`

	// Previous value.
	Previous *EconomicCalendarResponseEconomicCalendarEventsElemPrevious `json:"previous,omitempty"`

	// Release date.
	ReleaseDate *int `json:"release_date,omitempty"`
}

// Actual value.
type EconomicCalendarResponseEconomicCalendarEventsElemActual struct {
	// Actual value.
	DisplayValue *string `json:"display_value,omitempty"`
}

// Forecasted value.
type EconomicCalendarResponseEconomicCalendarEventsElemForecast struct {
	// Forecasted value.
	DisplayValue *string `json:"display_value,omitempty"`
}

// Previous value.
type EconomicCalendarResponseEconomicCalendarEventsElemPrevious struct {
	// Previous value.
	DisplayValue *string `json:"display_value,omitempty"`
}

type EconomicCalendarResponseMsgType string

const EconomicCalendarResponseMsgTypeEconomicCalendar EconomicCalendarResponseMsgType = "economic_calendar"

// Retrieves the exchange rates from a base currency to all currencies supported by
// the system.
type ExchangeRatesRequest struct {
	// Base currency (can be obtained from `payout_currencies` call)
	BaseCurrency string `json:"base_currency"`

	// Must be `1`
	ExchangeRates ExchangeRatesRequestExchangeRates `json:"exchange_rates"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ExchangeRatesRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] 1 - to initiate a realtime stream of exchange rates relative to base
	// currency.
	Subscribe *ExchangeRatesRequestSubscribe `json:"subscribe,omitempty"`

	// [Optional] Local currency
	TargetCurrency *string `json:"target_currency,omitempty"`
}

type ExchangeRatesRequestExchangeRates int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ExchangeRatesRequestPassthrough map[string]interface{}

type ExchangeRatesRequestSubscribe int

// The exchange rate values from the specified base currency to all currencies
// supported by the system.
type ExchangeRatesResponse struct {
	// Echo of the request made.
	EchoReq ExchangeRatesResponseEchoReq `json:"echo_req"`

	// Exchange rate values from base to all other currencies
	ExchangeRates *ExchangeRatesResponseExchangeRates `json:"exchange_rates,omitempty"`

	// Action name of the request made.
	MsgType ExchangeRatesResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *ExchangeRatesResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type ExchangeRatesResponseEchoReq map[string]interface{}

// Exchange rate values from base to all other currencies
type ExchangeRatesResponseExchangeRates struct {
	// Base currency
	BaseCurrency *string `json:"base_currency,omitempty"`

	// Date retrieval epoch time represented as an integer number
	Date *int `json:"date,omitempty"`

	// Rates of exchanging a unit of base currency into the target currencies
	Rates ExchangeRatesResponseExchangeRatesRates `json:"rates,omitempty"`
}

// Rates of exchanging a unit of base currency into the target currencies
type ExchangeRatesResponseExchangeRatesRates map[string]interface{}

type ExchangeRatesResponseMsgType string

const ExchangeRatesResponseMsgTypeExchangeRates ExchangeRatesResponseMsgType = "exchange_rates"

// For subscription requests only.
type ExchangeRatesResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Immediately cancel the real-time streams of messages of given type.
type ForgetAllRequest struct {
	// Cancel all streams by type. The value can be either a single type e.g.
	// `"ticks"`, or an array of multiple types e.g. `["candles", "ticks"]`.
	ForgetAll interface{} `json:"forget_all"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ForgetAllRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ForgetAllRequestPassthrough map[string]interface{}

// The result of forget all request made.
type ForgetAllResponse struct {
	// Echo of the request made.
	EchoReq ForgetAllResponseEchoReq `json:"echo_req"`

	// IDs of the cancelled streams
	ForgetAll []interface{} `json:"forget_all,omitempty"`

	// Action name of the request made.
	MsgType ForgetAllResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type ForgetAllResponseEchoReq map[string]interface{}

type ForgetAllResponseMsgType string

const ForgetAllResponseMsgTypeForgetAll ForgetAllResponseMsgType = "forget_all"

// Immediately cancel the real-time stream of messages with a specific ID.
type ForgetRequest struct {
	// ID of the real-time stream of messages to cancel.
	Forget string `json:"forget"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ForgetRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ForgetRequestPassthrough map[string]interface{}

// The result of forget request made.
type ForgetResponse struct {
	// Echo of the request made.
	EchoReq ForgetResponseEchoReq `json:"echo_req"`

	// If set to 1, stream exited and stopped. If set to 0, stream did not exist.
	Forget *ForgetResponseForget `json:"forget,omitempty"`

	// Action name of the request made.
	MsgType ForgetResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type ForgetResponseEchoReq map[string]interface{}

type ForgetResponseForget int

type ForgetResponseMsgType string

const ForgetResponseMsgTypeForget ForgetResponseMsgType = "forget"

// Get Account Status
type GetAccountStatusRequest struct {
	// Must be `1`
	GetAccountStatus GetAccountStatusRequestGetAccountStatus `json:"get_account_status"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetAccountStatusRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetAccountStatusRequestGetAccountStatus int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetAccountStatusRequestPassthrough map[string]interface{}

// A message with Account Status
type GetAccountStatusResponse struct {
	// Echo of the request made.
	EchoReq GetAccountStatusResponseEchoReq `json:"echo_req"`

	// Account status details
	GetAccountStatus *GetAccountStatusResponseGetAccountStatus `json:"get_account_status,omitempty"`

	// Action name of the request made.
	MsgType GetAccountStatusResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetAccountStatusResponseEchoReq map[string]interface{}

// Account status details
type GetAccountStatusResponseGetAccountStatus struct {
	// This represents the authentication status of the user and it includes what
	// authentication is needed.
	Authentication *GetAccountStatusResponseGetAccountStatusAuthentication `json:"authentication,omitempty"`

	// Contains missing profile fields required for cashier access.
	CashierMissingFields []string `json:"cashier_missing_fields,omitempty"`

	// If the cashier is unavailble, this array contains one or more error codes for
	// each reason.
	CashierValidation []string `json:"cashier_validation,omitempty"`

	// Provides cashier details for client currency.
	CurrencyConfig GetAccountStatusResponseGetAccountStatusCurrencyConfig `json:"currency_config"`

	// Current P2P status of client.
	P2PStatus GetAccountStatusResponseGetAccountStatusP2PStatus `json:"p2p_status"`

	// Indicates whether the client should be prompted to authenticate their account.
	PromptClientToAuthenticate GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate `json:"prompt_client_to_authenticate"`

	// Client risk classification: `low`, `standard`, `high`.
	RiskClassification string `json:"risk_classification"`

	// Social identity provider a user signed up with.
	SocialIdentityProvider *GetAccountStatusResponseGetAccountStatusSocialIdentityProvider `json:"social_identity_provider,omitempty"`

	// Account status. Possible status:
	// - `address_verified`: client's address is verified by third party services.
	// - `allow_document_upload`: client is allowed to upload documents.
	// - `age_verification`: client is age-verified.
	// - `authenticated`: client is fully authenticated.
	// - `cashier_locked`: cashier is locked.
	// - `crs_tin_information`: client has updated tax related information.
	// - `deposit_locked`: deposit is not allowed.
	// - `disabled`: account is disabled.
	// - `document_expired`: client's submitted proof-of-identity documents have
	// expired.
	// - `document_expiring_soon`: client's submitted proof-of-identity documents are
	// expiring within a month.
	// - `dxtrade_password_not_set`: Deriv X password is not set.
	// - `financial_assessment_not_complete`: client should complete their financial
	// assessment.
	// - `financial_information_not_complete`: client has not completed financial
	// assessment.
	// - `financial_risk_approval`: client has accepted financial risk disclosure.
	// - `max_turnover_limit_not_set`: client has not set financial limits on their
	// account. Applies to UK and Malta clients.
	// - `mt5_password_not_set`: MT5 password is not set.
	// - `mt5_withdrawal_locked`: MT5 deposits allowed, but withdrawal is not allowed.
	// - `needs_affiliate_coc_approval`: user must approve the Affiliate's Code of
	// Conduct Agreement.
	// - `no_trading`: trading is disabled.
	// - `no_withdrawal_or_trading`: client cannot trade or withdraw but can deposit.
	// - `p2p_blocked_for_pa`: p2p is blocked for the current payment agent client.
	// - `pa_withdrawal_explicitly_allowed`: withdrawal through payment agent is
	// allowed.
	// - `password_reset_required`: this client must reset their password.
	// - `professional`: this client has opted for a professional account.
	// - `professional_requested`: this client has requested for a professional
	// account.
	// - `professional_rejected`: this client's request for a professional account has
	// been rejected.
	// - `social_signup`: this client is using social signup.
	// - `trading_experience_not_complete`: client has not completed the trading
	// experience questionnaire.
	// - `ukgc_funds_protection`: client has acknowledged UKGC funds protection
	// notice.
	// - `unwelcome`: client cannot deposit or buy contracts, but can withdraw or sell
	// contracts.
	// - `withdrawal_locked`: deposits allowed but withdrawals are not allowed.
	// - `deposit_attempt`: this prevent a client from changing the account currency
	// after deposit attempt.
	// - `poi_name_mismatch`: client POI documents name mismatch.
	// - `allow_poa_resubmission`: the client can resubmit POA documents.
	// - `allow_poi_resubmission`: the client can resubmit POI documents.
	// - `shared_payment_method`: the client has been sharing payment methods.
	// - `personal_details_locked`: client is not allowed to edit personal profile
	// details.
	// - `transfers_blocked`: it block any transfer between two accounts.
	// - `df_deposit_requires_poi`: the DF deposit will be blocked until the client
	// gets age verified.
	Status []string `json:"status"`
}

// This represents the authentication status of the user and it includes what
// authentication is needed.
type GetAccountStatusResponseGetAccountStatusAuthentication struct {
	// POI attempts made by the client
	Attempts *GetAccountStatusResponseGetAccountStatusAuthenticationAttempts `json:"attempts,omitempty"`

	// The authentication status for document.
	Document *GetAccountStatusResponseGetAccountStatusAuthenticationDocument `json:"document,omitempty"`

	// The authentication status for identity.
	Identity *GetAccountStatusResponseGetAccountStatusAuthenticationIdentity `json:"identity,omitempty"`

	// The authentication status for source of income document.
	Income *GetAccountStatusResponseGetAccountStatusAuthenticationIncome `json:"income,omitempty"`

	// An array containing the list of required authentication.
	NeedsVerification []string `json:"needs_verification"`

	// The current state of the proof of ownership.
	Ownership *GetAccountStatusResponseGetAccountStatusAuthenticationOwnership `json:"ownership,omitempty"`
}

// POI attempts made by the client
type GetAccountStatusResponseGetAccountStatusAuthenticationAttempts struct {
	// A number of POI attempts made by the client
	Count *int `json:"count,omitempty"`

	// A list of POI attempts made by the client in chronological descending order
	History []GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElem `json:"history,omitempty"`

	// The latest POI attempt made by the client
	Latest interface{} `json:"latest,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElem struct {
	// 2-letter country code used to request the attempt.
	CountryCode *string `json:"country_code,omitempty"`

	// The id of the attempt.
	Id *string `json:"id,omitempty"`

	// The service used to make the verification.
	Service *string `json:"service,omitempty"`

	// Status of the attempt.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus `json:"status,omitempty"`

	// The epoch of the attempt.
	Timestamp *int `json:"timestamp,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = "verified"

// The authentication status for document.
type GetAccountStatusResponseGetAccountStatusAuthenticationDocument struct {
	// This is the epoch of the document expiry date.
	ExpiryDate *int `json:"expiry_date,omitempty"`

	// This represents the current status of the proof of address document submitted
	// for authentication.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus `json:"status,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusSuspected GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "suspected"
const GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = "verified"

// The authentication status for identity.
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentity struct {
	// This is the epoch of the document expiry date.
	ExpiryDate *int `json:"expiry_date,omitempty"`

	// This shows the information about the authentication services implemented
	Services *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServices `json:"services,omitempty"`

	// This represent the current status for proof of identity document submitted for
	// authentication.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus `json:"status,omitempty"`
}

// This shows the information about the authentication services implemented
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServices struct {
	// This shows the information related to IDV supported services
	Idv *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdv `json:"idv,omitempty"`

	// This shows the information related to the manual POI checks
	Manual *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManual `json:"manual,omitempty"`

	// This shows the information related to Onfido supported services
	Onfido *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfido `json:"onfido,omitempty"`
}

// This shows the information related to IDV supported services
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdv struct {
	// This is the epoch of the document expiry date.
	ExpiryDate *int `json:"expiry_date,omitempty"`

	// Show the last IDV reported reasons for the rejected cases
	LastRejected []string `json:"last_rejected,omitempty"`

	// Shows the latest document properties detected and reported by IDVS
	ReportedProperties GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvReportedProperties `json:"reported_properties,omitempty"`

	// This represents the status of the latest IDV check.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus `json:"status,omitempty"`

	// This shows the number of IDV submissions left for the client
	SubmissionsLeft *int `json:"submissions_left,omitempty"`
}

// Shows the latest document properties detected and reported by IDVS
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvReportedProperties map[string]interface{}

type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = "verified"

// This shows the information related to the manual POI checks
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManual struct {
	// This represents the status of the current manual POI check.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus `json:"status,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusSuspected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "suspected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = "verified"

// This shows the information related to Onfido supported services
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfido struct {
	// 3 letter country code for Onfide SDK
	CountryCode *string `json:"country_code,omitempty"`

	// This shows the list of documents types supported by Onfido
	Documents []string `json:"documents,omitempty"`

	// This shows the list of documents types supported.
	DocumentsSupported []string `json:"documents_supported,omitempty"`

	// This shows the information if the country is supported by Onfido
	IsCountrySupported *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported `json:"is_country_supported,omitempty"`

	// Show the last Onfido reported reasons for the rejected cases
	LastRejected []string `json:"last_rejected,omitempty"`

	// Shows the latest document properties detected and reported by Onfido
	ReportedProperties GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoReportedProperties `json:"reported_properties,omitempty"`

	// This represents the status of the latest Onfido check.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus `json:"status,omitempty"`

	// This shows the number of Onfido submissions left for the client
	SubmissionsLeft *int `json:"submissions_left,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported int

// Shows the latest document properties detected and reported by Onfido
type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoReportedProperties map[string]interface{}

type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusSuspected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "suspected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = "verified"

type GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusExpired GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "expired"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusSuspected GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "suspected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = "verified"

// The authentication status for source of income document.
type GetAccountStatusResponseGetAccountStatusAuthenticationIncome struct {
	// Epoch of the source of income document expiry date.
	ExpiryDate *int `json:"expiry_date,omitempty"`

	// Current status of the proof of income document submitted for authentication.
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus `json:"status,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatusLocked GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = "locked"
const GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = "verified"

// The current state of the proof of ownership.
type GetAccountStatusResponseGetAccountStatusAuthenticationOwnership struct {
	// The list of proof of ownership requests to fullfil
	Requests []GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipRequestsElem `json:"requests,omitempty"`

	// This represents the current status of the proof of ownership
	Status *GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus `json:"status,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipRequestsElem struct {
	// The request timestamp of creation
	CreationTime *string `json:"creation_time,omitempty"`

	// Number of documents required to be uploaded for proof of ownership
	DocumentsRequired *float64 `json:"documents_required,omitempty"`

	// The identifier of the proof of ownership request
	Id *float64 `json:"id,omitempty"`

	// The display name of the payment method being requested
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus string

const GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatusNone GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus = "none"
const GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatusPending GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus = "pending"
const GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatusRejected GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus = "rejected"
const GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatusVerified GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus = "verified"

// Provides cashier details for client currency.
type GetAccountStatusResponseGetAccountStatusCurrencyConfig map[string]interface{}

type GetAccountStatusResponseGetAccountStatusP2PStatus string

const GetAccountStatusResponseGetAccountStatusP2PStatusActive GetAccountStatusResponseGetAccountStatusP2PStatus = "active"
const GetAccountStatusResponseGetAccountStatusP2PStatusNone GetAccountStatusResponseGetAccountStatusP2PStatus = "none"
const GetAccountStatusResponseGetAccountStatusP2PStatusPermBan GetAccountStatusResponseGetAccountStatusP2PStatus = "perm_ban"
const GetAccountStatusResponseGetAccountStatusP2PStatusTempBan GetAccountStatusResponseGetAccountStatusP2PStatus = "temp_ban"

type GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate int

type GetAccountStatusResponseGetAccountStatusSocialIdentityProvider string

const GetAccountStatusResponseGetAccountStatusSocialIdentityProviderApple GetAccountStatusResponseGetAccountStatusSocialIdentityProvider = "apple"
const GetAccountStatusResponseGetAccountStatusSocialIdentityProviderFacebook GetAccountStatusResponseGetAccountStatusSocialIdentityProvider = "facebook"
const GetAccountStatusResponseGetAccountStatusSocialIdentityProviderGoogle GetAccountStatusResponseGetAccountStatusSocialIdentityProvider = "google"

type GetAccountStatusResponseMsgType string

const GetAccountStatusResponseMsgTypeGetAccountStatus GetAccountStatusResponseMsgType = "get_account_status"

// This call gets the financial assessment details. The 'financial assessment' is a
// questionnaire that clients of certain Landing Companies need to complete, due to
// regulatory and KYC (know your client) requirements.
type GetFinancialAssessmentRequest struct {
	// Must be `1`
	GetFinancialAssessment GetFinancialAssessmentRequestGetFinancialAssessment `json:"get_financial_assessment"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetFinancialAssessmentRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetFinancialAssessmentRequestGetFinancialAssessment int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetFinancialAssessmentRequestPassthrough map[string]interface{}

// This call gets the financial assessment details of client's account.
type GetFinancialAssessmentResponse struct {
	// Echo of the request made.
	EchoReq GetFinancialAssessmentResponseEchoReq `json:"echo_req"`

	// Client's financial assessment details
	GetFinancialAssessment *GetFinancialAssessmentResponseGetFinancialAssessment `json:"get_financial_assessment,omitempty"`

	// Action name of the request made.
	MsgType GetFinancialAssessmentResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetFinancialAssessmentResponseEchoReq map[string]interface{}

// Client's financial assessment details
type GetFinancialAssessmentResponseGetFinancialAssessment struct {
	// The anticipated account turnover
	AccountTurnover *string `json:"account_turnover,omitempty"`

	// Binary options trading experience
	BinaryOptionsTradingExperience *string `json:"binary_options_trading_experience,omitempty"`

	// Binary options trading frequency
	BinaryOptionsTradingFrequency *string `json:"binary_options_trading_frequency,omitempty"`

	// How much experience do you have in CFD trading?
	CfdExperience *string `json:"cfd_experience,omitempty"`

	// How many CFD trades have you placed in the past 12 months?
	CfdFrequency *string `json:"cfd_frequency,omitempty"`

	// CFD Score
	CfdScore *int `json:"cfd_score,omitempty"`

	// In your understanding, CFD trading allows you to:
	CfdTradingDefinition *string `json:"cfd_trading_definition,omitempty"`

	// CFDs trading experience
	CfdTradingExperience *string `json:"cfd_trading_experience,omitempty"`

	// CFDs trading frequency
	CfdTradingFrequency *string `json:"cfd_trading_frequency,omitempty"`

	// Commodities trading experience
	CommoditiesTradingExperience *string `json:"commodities_trading_experience,omitempty"`

	// Commodities trading frequency
	CommoditiesTradingFrequency *string `json:"commodities_trading_frequency,omitempty"`

	// Level of Education
	EducationLevel *string `json:"education_level,omitempty"`

	// Industry of Employment
	EmploymentIndustry *string `json:"employment_industry,omitempty"`

	// Employment Status
	EmploymentStatus *string `json:"employment_status,omitempty"`

	// Estimated Net Worth
	EstimatedWorth *string `json:"estimated_worth,omitempty"`

	// Financial Information Score
	FinancialInformationScore *int `json:"financial_information_score,omitempty"`

	// Forex trading experience
	ForexTradingExperience *string `json:"forex_trading_experience,omitempty"`

	// Forex trading frequency
	ForexTradingFrequency *string `json:"forex_trading_frequency,omitempty"`

	// Income Source
	IncomeSource *string `json:"income_source,omitempty"`

	// Indices trading experience
	IndicesTradingExperience *string `json:"indices_trading_experience,omitempty"`

	// Indices trading frequency
	IndicesTradingFrequency *string `json:"indices_trading_frequency,omitempty"`

	// How does leverage affect CFD trading?
	LeverageImpactTrading *string `json:"leverage_impact_trading,omitempty"`

	// Leverage trading is high-risk, so it's a good idea to use risk management
	// features such as stop loss. Stop loss allows you to
	LeverageTradingHighRiskStopLoss *string `json:"leverage_trading_high_risk_stop_loss,omitempty"`

	// Net Annual Income
	NetIncome *string `json:"net_income,omitempty"`

	// Occupation
	Occupation *string `json:"occupation,omitempty"`

	// Trading experience in other financial derivatives
	OtherDerivativesTradingExperience *string `json:"other_derivatives_trading_experience,omitempty"`

	// Trading frequency in other financial derivatives
	OtherDerivativesTradingFrequency *string `json:"other_derivatives_trading_frequency,omitempty"`

	// Trading experience in other financial instruments
	OtherInstrumentsTradingExperience *string `json:"other_instruments_trading_experience,omitempty"`

	// Trading frequency in other financial instruments
	OtherInstrumentsTradingFrequency *string `json:"other_instruments_trading_frequency,omitempty"`

	// When would you be required to pay an initial margin?
	RequiredInitialMargin *string `json:"required_initial_margin,omitempty"`

	// Do you understand that you could potentially lose 100% of the money you use to
	// trade?
	RiskTolerance *string `json:"risk_tolerance,omitempty"`

	// How much knowledge and experience do you have in relation to online trading?
	SourceOfExperience *string `json:"source_of_experience,omitempty"`

	// Source of wealth
	SourceOfWealth *string `json:"source_of_wealth,omitempty"`

	// Stocks trading experience
	StocksTradingExperience *string `json:"stocks_trading_experience,omitempty"`

	// Stocks trading frequency
	StocksTradingFrequency *string `json:"stocks_trading_frequency,omitempty"`

	// Total Score
	TotalScore *int `json:"total_score,omitempty"`

	// How much experience do you have with other financial instruments?
	TradingExperienceFinancialInstruments *string `json:"trading_experience_financial_instruments,omitempty"`

	// How many trades have you placed with other financial instruments in the past 12
	// months?
	TradingFrequencyFinancialInstruments *string `json:"trading_frequency_financial_instruments,omitempty"`

	// Trading Experience Score
	TradingScore *int `json:"trading_score,omitempty"`
}

type GetFinancialAssessmentResponseMsgType string

const GetFinancialAssessmentResponseMsgTypeGetFinancialAssessment GetFinancialAssessmentResponseMsgType = "get_financial_assessment"

// Trading and Withdrawal Limits for a given user
type GetLimitsRequest struct {
	// Must be `1`
	GetLimits GetLimitsRequestGetLimits `json:"get_limits"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetLimitsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetLimitsRequestGetLimits int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetLimitsRequestPassthrough map[string]interface{}

// Trading and Withdrawal Limits
type GetLimitsResponse struct {
	// Echo of the request made.
	EchoReq GetLimitsResponseEchoReq `json:"echo_req"`

	// Trading limits of real account user
	GetLimits *GetLimitsResponseGetLimits `json:"get_limits,omitempty"`

	// Action name of the request made.
	MsgType GetLimitsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetLimitsResponseEchoReq map[string]interface{}

// Trading limits of real account user
type GetLimitsResponseGetLimits struct {
	// Maximum account cash balance
	AccountBalance interface{} `json:"account_balance,omitempty"`

	// Cumulative daily transfer limits
	DailyCumulativeAmountTransfers GetLimitsResponseGetLimitsDailyCumulativeAmountTransfers `json:"daily_cumulative_amount_transfers,omitempty"`

	// Daily transfers
	DailyTransfers GetLimitsResponseGetLimitsDailyTransfers `json:"daily_transfers,omitempty"`

	// Maximum daily turnover
	DailyTurnover *float64 `json:"daily_turnover,omitempty"`

	// Lifetime withdrawal limit
	LifetimeLimit *float64 `json:"lifetime_limit,omitempty"`

	// Contains limitation information for each market.
	MarketSpecific GetLimitsResponseGetLimitsMarketSpecific `json:"market_specific,omitempty"`

	// Number of days for num_of_days_limit withdrawal limit
	NumOfDays *int `json:"num_of_days,omitempty"`

	// Withdrawal limit for num_of_days days
	NumOfDaysLimit *float64 `json:"num_of_days_limit,omitempty"`

	// Maximum number of open positions
	OpenPositions *int `json:"open_positions,omitempty"`

	// Maximum aggregate payouts on open positions
	Payout *float64 `json:"payout,omitempty"`

	// Maximum payout for each symbol based on different barrier types.
	PayoutPerSymbol interface{} `json:"payout_per_symbol,omitempty"`

	// Maximum aggregate payouts on open positions per symbol and contract type. This
	// limit can be exceeded up to the overall payout limit if there is no prior open
	// position.
	PayoutPerSymbolAndContractType *float64 `json:"payout_per_symbol_and_contract_type,omitempty"`

	// Amount left to reach withdrawal limit
	Remainder *float64 `json:"remainder,omitempty"`

	// Total withdrawal for num_of_days days
	WithdrawalForXDaysMonetary *float64 `json:"withdrawal_for_x_days_monetary,omitempty"`

	// Total withdrawal since inception
	WithdrawalSinceInceptionMonetary *float64 `json:"withdrawal_since_inception_monetary,omitempty"`
}

// Cumulative daily transfer limits
type GetLimitsResponseGetLimitsDailyCumulativeAmountTransfers map[string]interface{}

// Daily transfers
type GetLimitsResponseGetLimitsDailyTransfers map[string]interface{}

// Contains limitation information for each market.
type GetLimitsResponseGetLimitsMarketSpecific map[string]interface{}

type GetLimitsResponseMsgType string

const GetLimitsResponseMsgTypeGetLimits GetLimitsResponseMsgType = "get_limits"

// Allows users to exclude themselves from the website for certain periods of time,
// or to set limits on their trading activities. This facility is a regulatory
// requirement for certain Landing Companies.
type GetSelfExclusionRequest struct {
	// Must be `1`
	GetSelfExclusion GetSelfExclusionRequestGetSelfExclusion `json:"get_self_exclusion"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetSelfExclusionRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetSelfExclusionRequestGetSelfExclusion int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetSelfExclusionRequestPassthrough map[string]interface{}

// A message with User Self-Exclusion
type GetSelfExclusionResponse struct {
	// Echo of the request made.
	EchoReq GetSelfExclusionResponseEchoReq `json:"echo_req"`

	// List of values set for self exclusion.
	GetSelfExclusion *GetSelfExclusionResponseGetSelfExclusion `json:"get_self_exclusion,omitempty"`

	// Action name of the request made.
	MsgType GetSelfExclusionResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetSelfExclusionResponseEchoReq map[string]interface{}

// List of values set for self exclusion.
type GetSelfExclusionResponseGetSelfExclusion struct {
	// Exclude me from the website (for a minimum of 6 months, up to a maximum of 5
	// years). Note: uplifting this self-exclusion may require contacting the company.
	ExcludeUntil *string `json:"exclude_until,omitempty"`

	// 30-day limit on deposits
	Max30DayDeposit *float64 `json:"max_30day_deposit,omitempty"`

	// 30-day limit on losses
	Max30DayLosses *float64 `json:"max_30day_losses,omitempty"`

	// 30-day turnover limit
	Max30DayTurnover *float64 `json:"max_30day_turnover,omitempty"`

	// 7-day limit on deposits
	Max7DayDeposit *float64 `json:"max_7day_deposit,omitempty"`

	// 7-day limit on losses
	Max7DayLosses *float64 `json:"max_7day_losses,omitempty"`

	// 7-day turnover limit
	Max7DayTurnover *float64 `json:"max_7day_turnover,omitempty"`

	// Maximum account cash balance
	MaxBalance *float64 `json:"max_balance,omitempty"`

	// Daily limit on deposits
	MaxDeposit *float64 `json:"max_deposit,omitempty"`

	// Daily limit on losses
	MaxLosses *float64 `json:"max_losses,omitempty"`

	// Maximum number of open positions
	MaxOpenBets *int `json:"max_open_bets,omitempty"`

	// Daily turnover limit
	MaxTurnover *float64 `json:"max_turnover,omitempty"`

	// Session duration limit, in minutes
	SessionDurationLimit *int `json:"session_duration_limit,omitempty"`

	// Exclude me from the website (for up to 6 weeks). The time is in epoch format.
	// Note: unlike `exclude_until`, this self-exclusion will be lifted automatically
	// at the expiry of the timeout period.
	TimeoutUntil *int `json:"timeout_until,omitempty"`
}

type GetSelfExclusionResponseMsgType string

const GetSelfExclusionResponseMsgTypeGetSelfExclusion GetSelfExclusionResponseMsgType = "get_self_exclusion"

// Get User Settings (email, date of birth, address etc)
type GetSettingsRequest struct {
	// Must be `1`
	GetSettings GetSettingsRequestGetSettings `json:"get_settings"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetSettingsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetSettingsRequestGetSettings int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetSettingsRequestPassthrough map[string]interface{}

// A message with User Settings
type GetSettingsResponse struct {
	// Echo of the request made.
	EchoReq GetSettingsResponseEchoReq `json:"echo_req"`

	// User information and settings.
	GetSettings *GetSettingsResponseGetSettings `json:"get_settings,omitempty"`

	// Action name of the request made.
	MsgType GetSettingsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetSettingsResponseEchoReq map[string]interface{}

// User information and settings.
type GetSettingsResponseGetSettings struct {
	// Purpose and reason for requesting the account opening. Only applicable for real
	// money account.
	AccountOpeningReason interface{} `json:"account_opening_reason,omitempty"`

	// City (note: Only available for users who have at least one real account)
	AddressCity *string `json:"address_city,omitempty"`

	// Address line 1 (note: Only available for users who have at least one real
	// account)
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// Address line 2 (note: Only available for users who have at least one real
	// account)
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// Post Code (note: Only available for users who have at least one real account)
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// State (note: Only available for users who have at least one real account)
	AddressState *string `json:"address_state,omitempty"`

	// Boolean value 1 or 0, indicating permission to allow others to follow your
	// trades. Note: not applicable for Virtual account. Only allow for real money
	// account.
	AllowCopiers *GetSettingsResponseGetSettingsAllowCopiers `json:"allow_copiers,omitempty"`

	// Country of legal citizenship, 2-letter country code.
	Citizen *string `json:"citizen,omitempty"`

	// Latest terms and conditions version accepted by client
	ClientTncStatus interface{} `json:"client_tnc_status,omitempty"`

	// Cooldown expiration epoch date when a client fails appropriateness tests
	CoolingOffExpirationDate interface{} `json:"cooling_off_expiration_date,omitempty"`

	// User Country (same as residence field) - deprecated
	Country interface{} `json:"country,omitempty"`

	// 2-letter country code ISO standard
	CountryCode interface{} `json:"country_code,omitempty"`

	// Epoch of user's birthday (note: Only available for users who have at least one
	// real account)
	DateOfBirth interface{} `json:"date_of_birth,omitempty"`

	// Boolean value 1 or 0, indicating if user email belong to dxtrade exception
	// list.
	DxtradeUserException *GetSettingsResponseGetSettingsDxtradeUserException `json:"dxtrade_user_exception,omitempty"`

	// User Email
	Email *string `json:"email,omitempty"`

	// Boolean value 1 or 0, indicating permission to use email address for any
	// contact which may include marketing
	EmailConsent *GetSettingsResponseGetSettingsEmailConsent `json:"email_consent,omitempty"`

	// Employment Status.
	EmploymentStatus *GetSettingsResponseGetSettingsEmploymentStatus `json:"employment_status,omitempty"`

	// Contains features that are enabled or disabled for this user
	FeatureFlag *GetSettingsResponseGetSettingsFeatureFlag `json:"feature_flag,omitempty"`

	// First name (note: Only available for users who have at least one real account)
	FirstName *string `json:"first_name,omitempty"`

	// Returns 1 if the client has a secret answer, 0 otherwise.
	HasSecretAnswer *GetSettingsResponseGetSettingsHasSecretAnswer `json:"has_secret_answer,omitempty"`

	// A list of profile fields which are immutable (read-only unless they are not set
	// yet) due to landing company regulations and the current status of the account.
	ImmutableFields []string `json:"immutable_fields,omitempty"`

	// Boolean value 1 or 0, indicating whether is payment agent (note: not applicable
	// for virtual money accounts)
	IsAuthenticatedPaymentAgent *GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent `json:"is_authenticated_payment_agent,omitempty"`

	// Last name (note: Only available for users who have at least one real account)
	LastName *string `json:"last_name,omitempty"`

	// Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed
	// Person/Relatives and Close Associates). Note: returned for real accounts only.
	NonPepDeclaration *GetSettingsResponseGetSettingsNonPepDeclaration `json:"non_pep_declaration,omitempty"`

	// Telephone (note: Only available for users who have at least one real account)
	Phone interface{} `json:"phone,omitempty"`

	// Place of birth, 2-letter country code.
	PlaceOfBirth interface{} `json:"place_of_birth,omitempty"`

	// User's preferred language, ISO standard code of language
	PreferredLanguage interface{} `json:"preferred_language,omitempty"`

	// Boolean value 1 or 0, indicating if client has requested professional status.
	RequestProfessionalStatus *GetSettingsResponseGetSettingsRequestProfessionalStatus `json:"request_professional_status,omitempty"`

	// User Country
	Residence interface{} `json:"residence,omitempty"`

	// Salutation (note: Only available for users who have at least one real account)
	Salutation *string `json:"salutation,omitempty"`

	// Tax identification number. Only applicable for real money account.
	TaxIdentificationNumber interface{} `json:"tax_identification_number,omitempty"`

	// Residence for tax purpose. Comma separated iso country code if multiple
	// jurisdictions. Only applicable for real money account.
	TaxResidence interface{} `json:"tax_residence,omitempty"`

	// Boolean value 1 or 0, indicating if client has enabled the Trading Hub
	// dashboard
	TradingHub *int `json:"trading_hub,omitempty"`

	// Hash generated using user details to verify whether the user is legitimate for
	// our customer support system.
	UserHash interface{} `json:"user_hash,omitempty"`
}

type GetSettingsResponseGetSettingsAllowCopiers int

type GetSettingsResponseGetSettingsDxtradeUserException int

type GetSettingsResponseGetSettingsEmailConsent int

type GetSettingsResponseGetSettingsEmploymentStatus string

const GetSettingsResponseGetSettingsEmploymentStatusEmployed GetSettingsResponseGetSettingsEmploymentStatus = "Employed"
const GetSettingsResponseGetSettingsEmploymentStatusPensioner GetSettingsResponseGetSettingsEmploymentStatus = "Pensioner"
const GetSettingsResponseGetSettingsEmploymentStatusSelfEmployed GetSettingsResponseGetSettingsEmploymentStatus = "Self-Employed"
const GetSettingsResponseGetSettingsEmploymentStatusStudent GetSettingsResponseGetSettingsEmploymentStatus = "Student"
const GetSettingsResponseGetSettingsEmploymentStatusUnemployed GetSettingsResponseGetSettingsEmploymentStatus = "Unemployed"

// Contains features that are enabled or disabled for this user
type GetSettingsResponseGetSettingsFeatureFlag struct {
	// Boolean value 1 or 0 indicating whether his feature this enabled or not
	Wallet *GetSettingsResponseGetSettingsFeatureFlagWallet `json:"wallet,omitempty"`
}

type GetSettingsResponseGetSettingsFeatureFlagWallet int

type GetSettingsResponseGetSettingsHasSecretAnswer int

type GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent int

type GetSettingsResponseGetSettingsNonPepDeclaration int

type GetSettingsResponseGetSettingsRequestProfessionalStatus int

type GetSettingsResponseMsgType string

const GetSettingsResponseMsgTypeGetSettings GetSettingsResponseMsgType = "get_settings"

// Adds document information such as issuing country, id and type for identity
// verification processes.
type IdentityVerificationDocumentAddRequest struct {
	// [Optional] Additional info required by some document types.
	DocumentAdditional *string `json:"document_additional,omitempty"`

	// The identification number of the document.
	DocumentNumber string `json:"document_number"`

	// The type of the document based on provided `issuing_country` (can obtained from
	// `residence_list` call).
	DocumentType string `json:"document_type"`

	// Must be `1`
	IdentityVerificationDocumentAdd IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd `json:"identity_verification_document_add"`

	// 2-letter country code (can obtained from `residence_list` call).
	IssuingCountry string `json:"issuing_country"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough IdentityVerificationDocumentAddRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type IdentityVerificationDocumentAddRequestPassthrough map[string]interface{}

// Adds document information such as issuing country, id and type for identity
// verification processes.
type IdentityVerificationDocumentAddResponse struct {
	// Echo of the request made.
	EchoReq IdentityVerificationDocumentAddResponseEchoReq `json:"echo_req"`

	// 1 on success
	IdentityVerificationDocumentAdd *IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd `json:"identity_verification_document_add,omitempty"`

	// Action name of the request made.
	MsgType IdentityVerificationDocumentAddResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type IdentityVerificationDocumentAddResponseEchoReq map[string]interface{}

type IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd int

type IdentityVerificationDocumentAddResponseMsgType string

const IdentityVerificationDocumentAddResponseMsgTypeIdentityVerificationDocumentAdd IdentityVerificationDocumentAddResponseMsgType = "identity_verification_document_add"

// The company has a number of licensed subsidiaries in various jurisdictions,
// which are called Landing Companies (and which are wholly owned subsidiaries of
// the Deriv Group). This call provides information about each Landing Company.
type LandingCompanyDetailsRequest struct {
	// Landing company shortcode.
	LandingCompanyDetails LandingCompanyDetailsRequestLandingCompanyDetails `json:"landing_company_details"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough LandingCompanyDetailsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type LandingCompanyDetailsRequestLandingCompanyDetails string

const LandingCompanyDetailsRequestLandingCompanyDetailsChampion LandingCompanyDetailsRequestLandingCompanyDetails = "champion"
const LandingCompanyDetailsRequestLandingCompanyDetailsChampionVirtual LandingCompanyDetailsRequestLandingCompanyDetails = "champion-virtual"
const LandingCompanyDetailsRequestLandingCompanyDetailsDsl LandingCompanyDetailsRequestLandingCompanyDetails = "dsl"
const LandingCompanyDetailsRequestLandingCompanyDetailsIom LandingCompanyDetailsRequestLandingCompanyDetails = "iom"
const LandingCompanyDetailsRequestLandingCompanyDetailsMalta LandingCompanyDetailsRequestLandingCompanyDetails = "malta"
const LandingCompanyDetailsRequestLandingCompanyDetailsMaltainvest LandingCompanyDetailsRequestLandingCompanyDetails = "maltainvest"
const LandingCompanyDetailsRequestLandingCompanyDetailsSamoa LandingCompanyDetailsRequestLandingCompanyDetails = "samoa"
const LandingCompanyDetailsRequestLandingCompanyDetailsSamoaVirtual LandingCompanyDetailsRequestLandingCompanyDetails = "samoa-virtual"
const LandingCompanyDetailsRequestLandingCompanyDetailsSvg LandingCompanyDetailsRequestLandingCompanyDetails = "svg"
const LandingCompanyDetailsRequestLandingCompanyDetailsVanuatu LandingCompanyDetailsRequestLandingCompanyDetails = "vanuatu"
const LandingCompanyDetailsRequestLandingCompanyDetailsVirtual LandingCompanyDetailsRequestLandingCompanyDetails = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type LandingCompanyDetailsRequestPassthrough map[string]interface{}

// A message with Landing Company.
type LandingCompanyDetailsResponse struct {
	// Echo of the request made.
	EchoReq LandingCompanyDetailsResponseEchoReq `json:"echo_req"`

	// The detailed information of the requested landing company.
	LandingCompanyDetails *LandingCompanyDetailsResponseLandingCompanyDetails `json:"landing_company_details,omitempty"`

	// Action name of the request made.
	MsgType LandingCompanyDetailsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LandingCompanyDetailsResponseEchoReq map[string]interface{}

// The detailed information of the requested landing company.
type LandingCompanyDetailsResponseLandingCompanyDetails struct {
	// Landing Company address.
	Address interface{} `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyDetailsResponseLandingCompanyDetailsChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country.
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig *LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types for this Landing Company
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies for accounts with this Landing Company.
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowed markets for this Landing Company
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default currency of client accounts with this Landing Company.
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company name.
	Name *string `json:"name,omitempty"`

	// Legal requirements for the given Landing Company.
	Requirements *LandingCompanyDetailsResponseLandingCompanyDetailsRequirements `json:"requirements,omitempty"`

	// Landing Company shortcode.
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient `json:"support_professional_client,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyDetailsResponseLandingCompanyDetailsChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfig struct {
	// Name of commodities.
	Commodities LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigCommodities `json:"commodities,omitempty"`

	// Name of cryptocurrency.
	Cryptocurrency LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigCryptocurrency `json:"cryptocurrency,omitempty"`

	// Name of forex.
	Forex LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigForex `json:"forex,omitempty"`

	// Name of indices.
	Indices LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigIndices `json:"indices,omitempty"`

	// Name of market.
	Market *LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigMarket `json:"market,omitempty"`

	// Name of synthetic index.
	SyntheticIndex LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigSyntheticIndex `json:"synthetic_index,omitempty"`
}

// Name of commodities.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigCommodities map[string]interface{}

// Name of cryptocurrency.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigCryptocurrency map[string]interface{}

// Name of forex.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigForex map[string]interface{}

// Name of indices.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigIndices map[string]interface{}

// Name of market.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigMarket struct {
	// Currency Symbol.
	Currency *LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigMarketCurrency `json:"currency,omitempty"`
}

// Currency Symbol.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigMarketCurrency struct {
	// Maximum payout for this currency in this market.
	MaxPayout *int `json:"max_payout,omitempty"`

	// Minimum stake for this currency in this market.
	MinStake *int `json:"min_stake,omitempty"`
}

// Name of synthetic index.
type LandingCompanyDetailsResponseLandingCompanyDetailsCurrencyConfigSyntheticIndex map[string]interface{}

type LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck int

// Legal requirements for the given Landing Company.
type LandingCompanyDetailsResponseLandingCompanyDetailsRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyDetailsResponseLandingCompanyDetailsRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyDetailsResponseLandingCompanyDetailsRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyDetailsResponseLandingCompanyDetailsRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyDetailsResponseLandingCompanyDetailsRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient int

type LandingCompanyDetailsResponseMsgType string

const LandingCompanyDetailsResponseMsgTypeLandingCompanyDetails LandingCompanyDetailsResponseMsgType = "landing_company_details"

// The company has a number of licensed subsidiaries in various jurisdictions,
// which are called Landing Companies. This call will return the appropriate
// Landing Company for clients of a given country. The landing company may differ
// for Gaming contracts (Synthetic Indices) and Financial contracts (Forex, Stock
// Indices, Commodities).
type LandingCompanyRequest struct {
	// Client's 2-letter country code (obtained from `residence_list` call).
	LandingCompany string `json:"landing_company"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough LandingCompanyRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type LandingCompanyRequestPassthrough map[string]interface{}

// Returns the Landing Company for clients of a given country.
type LandingCompanyResponse struct {
	// Echo of the request made.
	EchoReq LandingCompanyResponseEchoReq `json:"echo_req"`

	// Landing Company
	LandingCompany *LandingCompanyResponseLandingCompany `json:"landing_company,omitempty"`

	// Action name of the request made.
	MsgType LandingCompanyResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LandingCompanyResponseEchoReq map[string]interface{}

// Landing Company
type LandingCompanyResponseLandingCompany struct {
	// Flag to indicate if address parseable or not
	AddressParseable *LandingCompanyResponseLandingCompanyAddressParseable `json:"address_parseable,omitempty"`

	// Config for all account types (Synthetic Indices and Financials).
	AllCompany *LandingCompanyResponseLandingCompanyAllCompany `json:"all_company,omitempty"`

	// Config structure with document types ,taxRequired ,tin format details.
	Config LandingCompanyResponseLandingCompanyConfig `json:"config,omitempty"`

	// Available CTrader accounts.
	Ctrader *LandingCompanyResponseLandingCompanyCtrader `json:"ctrader,omitempty"`

	// Available DerivEZ accounts.
	Derivez *LandingCompanyResponseLandingCompanyDerivez `json:"derivez,omitempty"`

	// Available Deriv X all account types (Synthetic Indices and Financials).
	DxtradeAllCompany *LandingCompanyResponseLandingCompanyDxtradeAllCompany `json:"dxtrade_all_company,omitempty"`

	// Available Deriv X financial account types (all except Synthetic Indices).
	DxtradeFinancialCompany *LandingCompanyResponseLandingCompanyDxtradeFinancialCompany `json:"dxtrade_financial_company,omitempty"`

	// Available Deriv X gaming account types (Synthetic Indices).
	DxtradeGamingCompany *LandingCompanyResponseLandingCompanyDxtradeGamingCompany `json:"dxtrade_gaming_company,omitempty"`

	// Landing Company for financial contracts (all except Synthetic Indices)
	FinancialCompany interface{} `json:"financial_company,omitempty"`

	// Forbidden postcode pattern
	ForbiddenPostcodePattern *string `json:"forbidden_postcode_pattern,omitempty"`

	// Landing Company for gaming contracts (Synthetic Indices)
	GamingCompany interface{} `json:"gaming_company,omitempty"`

	// Country code
	Id *string `json:"id,omitempty"`

	// Flag to indicate if idv is supported or not
	IsIdvSupported *LandingCompanyResponseLandingCompanyIsIdvSupported `json:"is_idv_supported,omitempty"`

	// Open mf account lc details.
	LcToOpenMfAccount *string `json:"lc_to_open_mf_account,omitempty"`

	// Minimum age
	MinimumAge *int `json:"minimum_age,omitempty"`

	// Flag to indicate if mt5 age verification detail.
	Mt5AgeVerification *LandingCompanyResponseLandingCompanyMt5AgeVerification `json:"mt5_age_verification,omitempty"`

	// Landing Company for MT5 financial contracts (all except Synthetic Indices),
	// currently divided into Financial STP, Financial (standard) as subtypes.
	MtFinancialCompany interface{} `json:"mt_financial_company,omitempty"`

	// Landing Company for MT5 standard gaming contracts (Synthetic Indices),
	// currently has Financial as subtype.
	MtGamingCompany interface{} `json:"mt_gaming_company,omitempty"`

	// Country name
	Name *string `json:"name,omitempty"`

	// Flag to indicate whether max turnover limit settings.
	NeedSetMaxTurnoverLimit *LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit `json:"need_set_max_turnover_limit,omitempty"`

	// Flag to indicate province settings.
	NoProvince *LandingCompanyResponseLandingCompanyNoProvince `json:"no_province,omitempty"`

	// Flag to indicate whether address postcode is required or not.
	RequireAddressPostcode *LandingCompanyResponseLandingCompanyRequireAddressPostcode `json:"require_address_postcode,omitempty"`

	// Flag to indicate whether age verification required ofr synthetic or not.
	RequireAgeVerifiedForSynthetic *LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic `json:"require_age_verified_for_synthetic,omitempty"`

	// Flag to indicate whether poi is required.
	RequirePoi *LandingCompanyResponseLandingCompanyRequirePoi `json:"require_poi,omitempty"`

	// Flag to indicate whether verification required if age not verified.
	RequireVerificationWhenNotAgeVerified *LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified `json:"require_verification_when_not_age_verified,omitempty"`

	// Flag to indicate whether to skip deposit verifcation or not.
	SkipDepositVerification *LandingCompanyResponseLandingCompanySkipDepositVerification `json:"skip_deposit_verification,omitempty"`

	// Flag to indicate ukgc funds protection setting.
	UkgcFundsProtection *LandingCompanyResponseLandingCompanyUkgcFundsProtection `json:"ukgc_funds_protection,omitempty"`

	// Virtual Company
	VirtualCompany *string `json:"virtual_company,omitempty"`
}

type LandingCompanyResponseLandingCompanyAddressParseable int

type LandingCompanyResponseLandingCompanyAllCompany string

const LandingCompanyResponseLandingCompanyAllCompanyNone LandingCompanyResponseLandingCompanyAllCompany = "none"
const LandingCompanyResponseLandingCompanyAllCompanySvg LandingCompanyResponseLandingCompanyAllCompany = "svg"

// Config structure with document types ,taxRequired ,tin format details.
type LandingCompanyResponseLandingCompanyConfig map[string]interface{}

// Available CTrader accounts.
type LandingCompanyResponseLandingCompanyCtrader struct {
	// CTrader all account types (Synthetic Indices and Financials).
	All *LandingCompanyResponseLandingCompanyCtraderAll `json:"all,omitempty"`
}

// CTrader all account types (Synthetic Indices and Financials).
type LandingCompanyResponseLandingCompanyCtraderAll struct {
	// For standard client
	Standard *LandingCompanyResponseLandingCompanyCtraderAllStandard `json:"standard,omitempty"`
}

type LandingCompanyResponseLandingCompanyCtraderAllStandard string

const LandingCompanyResponseLandingCompanyCtraderAllStandardNone LandingCompanyResponseLandingCompanyCtraderAllStandard = "none"
const LandingCompanyResponseLandingCompanyCtraderAllStandardSvg LandingCompanyResponseLandingCompanyCtraderAllStandard = "svg"

// Available DerivEZ accounts.
type LandingCompanyResponseLandingCompanyDerivez struct {
	// DerivEZ all account types (Synthetic Indices and Financials).
	All *LandingCompanyResponseLandingCompanyDerivezAll `json:"all,omitempty"`
}

// DerivEZ all account types (Synthetic Indices and Financials).
type LandingCompanyResponseLandingCompanyDerivezAll struct {
	// For standard client
	Standard *LandingCompanyResponseLandingCompanyDerivezAllStandard `json:"standard,omitempty"`
}

type LandingCompanyResponseLandingCompanyDerivezAllStandard string

const LandingCompanyResponseLandingCompanyDerivezAllStandardNone LandingCompanyResponseLandingCompanyDerivezAllStandard = "none"
const LandingCompanyResponseLandingCompanyDerivezAllStandardSvg LandingCompanyResponseLandingCompanyDerivezAllStandard = "svg"

// Available Deriv X all account types (Synthetic Indices and Financials).
type LandingCompanyResponseLandingCompanyDxtradeAllCompany struct {
	// Landing Company details.
	Standard *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandard struct {
	// Landing Company address
	Address interface{} `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck int

// Legal requirements for the Landing Company
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient int

// Available Deriv X financial account types (all except Synthetic Indices).
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompany struct {
	// Landing Company details.
	Standard *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandard struct {
	// Landing Company address
	Address interface{} `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck int

// Legal requirements for the Landing Company
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient int

// Available Deriv X gaming account types (Synthetic Indices).
type LandingCompanyResponseLandingCompanyDxtradeGamingCompany struct {
	// Landing Company details.
	Standard *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandard struct {
	// Landing Company address
	Address interface{} `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck int

// Legal requirements for the Landing Company
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient int

type LandingCompanyResponseLandingCompanyIsIdvSupported int

type LandingCompanyResponseLandingCompanyMt5AgeVerification int

type LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit int

type LandingCompanyResponseLandingCompanyNoProvince int

type LandingCompanyResponseLandingCompanyRequireAddressPostcode int

type LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic int

type LandingCompanyResponseLandingCompanyRequirePoi int

type LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified int

type LandingCompanyResponseLandingCompanySkipDepositVerification int

type LandingCompanyResponseLandingCompanyUkgcFundsProtection int

type LandingCompanyResponseMsgType string

const LandingCompanyResponseMsgTypeLandingCompany LandingCompanyResponseMsgType = "landing_company"

// Retrieve a summary of login history for user.
type LoginHistoryRequest struct {
	// [Optional] Apply limit to count of login history records.
	Limit int `json:"limit,omitempty"`

	// Must be `1`
	LoginHistory LoginHistoryRequestLoginHistory `json:"login_history"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough LoginHistoryRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type LoginHistoryRequestLoginHistory int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type LoginHistoryRequestPassthrough map[string]interface{}

// Recent login/logout history records
type LoginHistoryResponse struct {
	// Echo of the request made.
	EchoReq LoginHistoryResponseEchoReq `json:"echo_req"`

	// Array of records of client login/logout activities
	LoginHistory []LoginHistoryResponseLoginHistoryElem `json:"login_history,omitempty"`

	// Action name of the request made.
	MsgType LoginHistoryResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LoginHistoryResponseEchoReq map[string]interface{}

// User login history
type LoginHistoryResponseLoginHistoryElem struct {
	// Type of action.
	Action string `json:"action"`

	// Provides details about browser, device used during login or logout
	Environment string `json:"environment"`

	// Status of activity: 1 - success, 0 - failure
	Status LoginHistoryResponseLoginHistoryElemStatus `json:"status"`

	// Epoch time of the activity
	Time int `json:"time"`
}

type LoginHistoryResponseLoginHistoryElemStatus int

type LoginHistoryResponseMsgType string

const LoginHistoryResponseMsgTypeLoginHistory LoginHistoryResponseMsgType = "login_history"

// Logout the session
type LogoutRequest struct {
	// Must be `1`
	Logout LogoutRequestLogout `json:"logout"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough LogoutRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type LogoutRequestLogout int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type LogoutRequestPassthrough map[string]interface{}

// The response of logout request made.
type LogoutResponse struct {
	// Echo of the request made.
	EchoReq LogoutResponseEchoReq `json:"echo_req"`

	// The result of logout request which is 1
	Logout *LogoutResponseLogout `json:"logout,omitempty"`

	// Action name of the request made.
	MsgType LogoutResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LogoutResponseEchoReq map[string]interface{}

type LogoutResponseLogout int

type LogoutResponseMsgType string

const LogoutResponseMsgTypeLogout LogoutResponseMsgType = "logout"

// This call allows deposit into MT5 account from Binary account.
type Mt5DepositRequest struct {
	// Amount to deposit (in the currency of from_binary); min = $1 or an equivalent
	// amount, max = $20000 or an equivalent amount
	Amount *float64 `json:"amount,omitempty"`

	// Binary account loginid to transfer money from
	FromBinary *string `json:"from_binary,omitempty"`

	// Must be `1`
	Mt5Deposit Mt5DepositRequestMt5Deposit `json:"mt5_deposit"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5DepositRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// MT5 account login to deposit money to
	ToMt5 string `json:"to_mt5"`
}

type Mt5DepositRequestMt5Deposit int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5DepositRequestPassthrough map[string]interface{}

// The result of MT5 deposit request.
type Mt5DepositResponse struct {
	// Withdrawal reference ID of Binary account
	BinaryTransactionId *int `json:"binary_transaction_id,omitempty"`

	// Echo of the request made.
	EchoReq Mt5DepositResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5DepositResponseMsgType `json:"msg_type"`

	// 1 on success
	Mt5Deposit *int `json:"mt5_deposit,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5DepositResponseEchoReq map[string]interface{}

type Mt5DepositResponseMsgType string

const Mt5DepositResponseMsgTypeMt5Deposit Mt5DepositResponseMsgType = "mt5_deposit"

// Get MT5 user account settings
type Mt5GetSettingsRequest struct {
	// MT5 user login
	Login string `json:"login"`

	// Must be `1`
	Mt5GetSettings Mt5GetSettingsRequestMt5GetSettings `json:"mt5_get_settings"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5GetSettingsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type Mt5GetSettingsRequestMt5GetSettings int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5GetSettingsRequestPassthrough map[string]interface{}

// Get MT5 user settings
type Mt5GetSettingsResponse struct {
	// Echo of the request made.
	EchoReq Mt5GetSettingsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5GetSettingsResponseMsgType `json:"msg_type"`

	// MT5 user account details
	Mt5GetSettings *Mt5GetSettingsResponseMt5GetSettings `json:"mt5_get_settings,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5GetSettingsResponseEchoReq map[string]interface{}

type Mt5GetSettingsResponseMsgType string

const Mt5GetSettingsResponseMsgTypeMt5GetSettings Mt5GetSettingsResponseMsgType = "mt5_get_settings"

// MT5 user account details
type Mt5GetSettingsResponseMt5GetSettings struct {
	// Account type.
	AccountType *Mt5GetSettingsResponseMt5GetSettingsAccountType `json:"account_type,omitempty"`

	// The address of the user. The maximum length of the address is 128 characters.
	Address *string `json:"address,omitempty"`

	// Account balance.
	Balance *string `json:"balance,omitempty"`

	// User's city of residence.
	City *string `json:"city,omitempty"`

	// Name of the client's company. The maximum length of the company name is 64
	// characters.
	Company *string `json:"company,omitempty"`

	// 2-letter country code.
	Country *string `json:"country,omitempty"`

	// MT5 account currency (`USD` or `EUR`) that depends on the MT5 company
	// (`vanuatu`, `svg`, `malta`).
	Currency *string `json:"currency,omitempty"`

	// Email address.
	Email *string `json:"email,omitempty"`

	// The group where account belongs to.
	Group *string `json:"group,omitempty"`

	// Landing company shortcode of the MT5 account.
	LandingCompanyShort *Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort `json:"landing_company_short,omitempty"`

	// Client leverage (from 1 to 1000).
	Leverage *float64 `json:"leverage,omitempty"`

	// Login ID of the user's MT5 account.
	Login *string `json:"login,omitempty"`

	// Market type
	MarketType *Mt5GetSettingsResponseMt5GetSettingsMarketType `json:"market_type,omitempty"`

	// Client's name. The maximum length of a client's symbol name is 128 characters.
	Name *string `json:"name,omitempty"`

	// User's phone number.
	Phone *string `json:"phone,omitempty"`

	// The user's phone password.
	PhonePassword *string `json:"phonePassword,omitempty"`

	// User's state (region) of residence.
	State *string `json:"state,omitempty"`

	// Sub account type
	SubAccountType *Mt5GetSettingsResponseMt5GetSettingsSubAccountType `json:"sub_account_type,omitempty"`

	// User's zip code.
	ZipCode *string `json:"zipCode,omitempty"`
}

type Mt5GetSettingsResponseMt5GetSettingsAccountType string

const Mt5GetSettingsResponseMt5GetSettingsAccountTypeDemo Mt5GetSettingsResponseMt5GetSettingsAccountType = "demo"
const Mt5GetSettingsResponseMt5GetSettingsAccountTypeReal Mt5GetSettingsResponseMt5GetSettingsAccountType = "real"

type Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort string

const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortBvi Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "bvi"
const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortLabuan Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "labuan"
const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortMalta Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "malta"
const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortMaltainvest Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "maltainvest"
const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortSvg Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "svg"
const Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShortVanuatu Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = "vanuatu"

type Mt5GetSettingsResponseMt5GetSettingsMarketType string

const Mt5GetSettingsResponseMt5GetSettingsMarketTypeFinancial Mt5GetSettingsResponseMt5GetSettingsMarketType = "financial"
const Mt5GetSettingsResponseMt5GetSettingsMarketTypeSynthetic Mt5GetSettingsResponseMt5GetSettingsMarketType = "synthetic"

type Mt5GetSettingsResponseMt5GetSettingsSubAccountType string

const Mt5GetSettingsResponseMt5GetSettingsSubAccountTypeFinancial Mt5GetSettingsResponseMt5GetSettingsSubAccountType = "financial"
const Mt5GetSettingsResponseMt5GetSettingsSubAccountTypeFinancialStp Mt5GetSettingsResponseMt5GetSettingsSubAccountType = "financial_stp"

// Get list of MT5 accounts for client
type Mt5LoginListRequest struct {
	// Must be `1`
	Mt5LoginList Mt5LoginListRequestMt5LoginList `json:"mt5_login_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5LoginListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type Mt5LoginListRequestMt5LoginList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5LoginListRequestPassthrough map[string]interface{}

// Get list of MT5 accounts for client.
type Mt5LoginListResponse struct {
	// Echo of the request made.
	EchoReq Mt5LoginListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5LoginListResponseMsgType `json:"msg_type"`

	// Array containing MT5 account objects.
	Mt5LoginList []Mt5LoginListResponseMt5LoginListElem `json:"mt5_login_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5LoginListResponseEchoReq map[string]interface{}

type Mt5LoginListResponseMsgType string

const Mt5LoginListResponseMsgTypeMt5LoginList Mt5LoginListResponseMsgType = "mt5_login_list"

type Mt5LoginListResponseMt5LoginListElem struct {
	// Account type.
	AccountType *Mt5LoginListResponseMt5LoginListElemAccountType `json:"account_type,omitempty"`

	// Balance of the MT5 account.
	Balance *float64 `json:"balance,omitempty"`

	// Residence of the MT5 account.
	Country *string `json:"country,omitempty"`

	// Currency of the MT5 account.
	Currency *string `json:"currency,omitempty"`

	// Account balance, formatted to appropriate decimal places.
	DisplayBalance *string `json:"display_balance,omitempty"`

	// Email address of the MT5 account.
	Email *string `json:"email,omitempty"`

	// Error in MT5 account details.
	Error *Mt5LoginListResponseMt5LoginListElemError `json:"error,omitempty"`

	// Group type of the MT5 account, e.g. `demo\svg_financial`
	Group *string `json:"group,omitempty"`

	// Landing company shortcode of the MT5 account.
	LandingCompanyShort *Mt5LoginListResponseMt5LoginListElemLandingCompanyShort `json:"landing_company_short,omitempty"`

	// Leverage of the MT5 account (1 to 1000).
	Leverage *float64 `json:"leverage,omitempty"`

	// Login of MT5 account.
	Login *string `json:"login,omitempty"`

	// Market type
	MarketType *Mt5LoginListResponseMt5LoginListElemMarketType `json:"market_type,omitempty"`

	// Name of the owner of the MT5 account.
	Name *string `json:"name,omitempty"`

	// Trade server name of the MT5 account.
	Server *string `json:"server,omitempty"`

	// Trade server information.
	ServerInfo *Mt5LoginListResponseMt5LoginListElemServerInfo `json:"server_info,omitempty"`

	// MT5 account status.
	Status interface{} `json:"status,omitempty"`

	// Sub account type
	SubAccountType *Mt5LoginListResponseMt5LoginListElemSubAccountType `json:"sub_account_type,omitempty"`
}

type Mt5LoginListResponseMt5LoginListElemAccountType string

const Mt5LoginListResponseMt5LoginListElemAccountTypeDemo Mt5LoginListResponseMt5LoginListElemAccountType = "demo"
const Mt5LoginListResponseMt5LoginListElemAccountTypeReal Mt5LoginListResponseMt5LoginListElemAccountType = "real"

// Error in MT5 account details.
type Mt5LoginListResponseMt5LoginListElemError struct {
	// Error code string.
	Code *string `json:"code,omitempty"`

	// Extra information about the error.
	Details *Mt5LoginListResponseMt5LoginListElemErrorDetails `json:"details,omitempty"`

	// Error message.
	MessageToClient *string `json:"message_to_client,omitempty"`
}

// Extra information about the error.
type Mt5LoginListResponseMt5LoginListElemErrorDetails struct {
	// MT5 account type.
	AccountType *string `json:"account_type,omitempty"`

	// MT5 account login ID.
	Login *string `json:"login,omitempty"`

	// Trade server name of the MT5 account.
	Server *string `json:"server,omitempty"`

	// Trade server information.
	ServerInfo *Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfo `json:"server_info,omitempty"`
}

// Trade server information.
type Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfo struct {
	// The environment. E.g. Deriv-Server.
	Environment *Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment `json:"environment,omitempty"`

	// Geographical location of the server.
	Geolocation *Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoGeolocation `json:"geolocation,omitempty"`

	// Server id.
	Id *string `json:"id,omitempty"`
}

type Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment string

const Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironmentDerivDemo Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment = "Deriv-Demo"
const Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironmentDerivServer Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment = "Deriv-Server"
const Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironmentDerivServer02 Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment = "Deriv-Server-02"

// Geographical location of the server.
type Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoGeolocation struct {
	// Internal server grouping.
	Group *string `json:"group,omitempty"`

	// Sever location.
	Location *string `json:"location,omitempty"`

	// Sever region.
	Region *string `json:"region,omitempty"`

	// Sever sequence.
	Sequence *int `json:"sequence,omitempty"`
}

type Mt5LoginListResponseMt5LoginListElemLandingCompanyShort string

const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortBvi Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "bvi"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortLabuan Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "labuan"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortMalta Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "malta"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortMaltainvest Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "maltainvest"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortSeychelles Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "seychelles"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortSvg Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "svg"
const Mt5LoginListResponseMt5LoginListElemLandingCompanyShortVanuatu Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = "vanuatu"

type Mt5LoginListResponseMt5LoginListElemMarketType string

const Mt5LoginListResponseMt5LoginListElemMarketTypeFinancial Mt5LoginListResponseMt5LoginListElemMarketType = "financial"
const Mt5LoginListResponseMt5LoginListElemMarketTypeSynthetic Mt5LoginListResponseMt5LoginListElemMarketType = "synthetic"

// Trade server information.
type Mt5LoginListResponseMt5LoginListElemServerInfo struct {
	// The environment. E.g. Deriv-Server.
	Environment *Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment `json:"environment,omitempty"`

	// Geographical location of the server.
	Geolocation *Mt5LoginListResponseMt5LoginListElemServerInfoGeolocation `json:"geolocation,omitempty"`

	// Server id.
	Id *string `json:"id,omitempty"`
}

type Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment string

const Mt5LoginListResponseMt5LoginListElemServerInfoEnvironmentDerivDemo Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment = "Deriv-Demo"
const Mt5LoginListResponseMt5LoginListElemServerInfoEnvironmentDerivServer Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment = "Deriv-Server"
const Mt5LoginListResponseMt5LoginListElemServerInfoEnvironmentDerivServer02 Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment = "Deriv-Server-02"

// Geographical location of the server.
type Mt5LoginListResponseMt5LoginListElemServerInfoGeolocation struct {
	// Internal server grouping.
	Group *string `json:"group,omitempty"`

	// Sever location.
	Location *string `json:"location,omitempty"`

	// Sever region.
	Region *string `json:"region,omitempty"`

	// Sever sequence.
	Sequence *int `json:"sequence,omitempty"`
}

type Mt5LoginListResponseMt5LoginListElemSubAccountType string

const Mt5LoginListResponseMt5LoginListElemSubAccountTypeFinancial Mt5LoginListResponseMt5LoginListElemSubAccountType = "financial"
const Mt5LoginListResponseMt5LoginListElemSubAccountTypeFinancialStp Mt5LoginListResponseMt5LoginListElemSubAccountType = "financial_stp"

// This call creates new MT5 user, either demo or real money user.
type Mt5NewAccountRequest struct {
	// Account type. If set to 'financial', setting 'mt5_account_type' is also
	// required.
	AccountType Mt5NewAccountRequestAccountType `json:"account_type"`

	// [Optional] The address of the user. The maximum length of this address field is
	// 128 characters.
	Address *string `json:"address,omitempty"`

	// [Optional] User's city of residence.
	City *string `json:"city,omitempty"`

	// [Optional] Name of the client's company. The maximum length of the company name
	// is 64 characters.
	Company *string `json:"company,omitempty"`

	// [Optional] 2-letter country code (value received from `residence_list` call).
	Country *string `json:"country,omitempty"`

	// [Optional] MT5 account currency, the default value will be the qualified
	// account currency.
	Currency *string `json:"currency,omitempty"`

	// [Optional] If set to 1, only validation is performed.
	DryRun Mt5NewAccountRequestDryRun `json:"dry_run,omitempty"`

	// Email address
	Email string `json:"email"`

	// [Optional] The investor password of the account. For validation (Accepts any
	// printable ASCII character. Must be within 8-25 characters, and include numbers,
	// lowercase and uppercase letters. Must not be the same as the user's email
	// address).
	InvestPassword *string `json:"investPassword,omitempty"`

	// Client leverage (from 1 to 1000).
	Leverage float64 `json:"leverage"`

	// The master password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address). This
	// field is required.
	MainPassword string `json:"mainPassword"`

	// [Optional] To choose whether account is conventional or not. Unavailable for
	// financial_stp MT5_account_type
	Mt5AccountCategory *Mt5NewAccountRequestMt5AccountCategory `json:"mt5_account_category,omitempty"`

	// [Optional] Financial: Variable spreads, High leverage. Financial STP: Variable
	// spreads, Medium Leverage, more products. If 'account_type' set to 'financial',
	// setting 'mt5_account_type' is also required.
	Mt5AccountType *Mt5NewAccountRequestMt5AccountType `json:"mt5_account_type,omitempty"`

	// Must be `1`
	Mt5NewAccount Mt5NewAccountRequestMt5NewAccount `json:"mt5_new_account"`

	// Client's name. The maximum length here is 101 characters.
	Name string `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5NewAccountRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] User's phone number.
	Phone interface{} `json:"phone,omitempty"`

	// [Optional] The user's phone password.
	PhonePassword *string `json:"phonePassword,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Trade server.
	Server *Mt5NewAccountRequestServer `json:"server,omitempty"`

	// [Optional] User's state (region) of residence.
	State *string `json:"state,omitempty"`

	// [Optional] User's zip code.
	ZipCode *string `json:"zipCode,omitempty"`
}

type Mt5NewAccountRequestAccountType string

const Mt5NewAccountRequestAccountTypeDemo Mt5NewAccountRequestAccountType = "demo"
const Mt5NewAccountRequestAccountTypeFinancial Mt5NewAccountRequestAccountType = "financial"
const Mt5NewAccountRequestAccountTypeGaming Mt5NewAccountRequestAccountType = "gaming"

type Mt5NewAccountRequestDryRun int

type Mt5NewAccountRequestMt5AccountCategory string

const Mt5NewAccountRequestMt5AccountCategoryConventional Mt5NewAccountRequestMt5AccountCategory = "conventional"

type Mt5NewAccountRequestMt5AccountType string

const Mt5NewAccountRequestMt5AccountTypeFinancial Mt5NewAccountRequestMt5AccountType = "financial"
const Mt5NewAccountRequestMt5AccountTypeFinancialStp Mt5NewAccountRequestMt5AccountType = "financial_stp"

type Mt5NewAccountRequestMt5NewAccount int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5NewAccountRequestPassthrough map[string]interface{}

type Mt5NewAccountRequestServer string

const Mt5NewAccountRequestServerP01Ts01 Mt5NewAccountRequestServer = "p01_ts01"
const Mt5NewAccountRequestServerP01Ts02 Mt5NewAccountRequestServer = "p01_ts02"
const Mt5NewAccountRequestServerP01Ts03 Mt5NewAccountRequestServer = "p01_ts03"
const Mt5NewAccountRequestServerP01Ts04 Mt5NewAccountRequestServer = "p01_ts04"
const Mt5NewAccountRequestServerP02Ts02 Mt5NewAccountRequestServer = "p02_ts02"

// Create MT5 account Receive
type Mt5NewAccountResponse struct {
	// Echo of the request made.
	EchoReq Mt5NewAccountResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5NewAccountResponseMsgType `json:"msg_type"`

	// New MT5 account details
	Mt5NewAccount *Mt5NewAccountResponseMt5NewAccount `json:"mt5_new_account,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5NewAccountResponseEchoReq map[string]interface{}

type Mt5NewAccountResponseMsgType string

const Mt5NewAccountResponseMsgTypeMt5NewAccount Mt5NewAccountResponseMsgType = "mt5_new_account"

// New MT5 account details
type Mt5NewAccountResponseMt5NewAccount struct {
	// Account type.
	AccountType *Mt5NewAccountResponseMt5NewAccountAccountType `json:"account_type,omitempty"`

	// Agent Details.
	Agent interface{} `json:"agent,omitempty"`

	// Account balance.
	Balance *float64 `json:"balance,omitempty"`

	// MT5 account currency (`USD` or `EUR`) that depends on the MT5 company
	// (`vanuatu`, `svg`, `malta`).
	Currency *string `json:"currency,omitempty"`

	// Account balance, formatted to appropriate decimal places.
	DisplayBalance *string `json:"display_balance,omitempty"`

	// Login ID of the user's new MT5 account. Login could have 2 types of prefixes:
	// MTD, MTR. MTD - for demo accounts and MTR for real money accounts.
	Login *string `json:"login,omitempty"`

	// With default value of conventional, unavailable for `financial_stp` sub account
	// type.
	Mt5AccountCategory *Mt5NewAccountResponseMt5NewAccountMt5AccountCategory `json:"mt5_account_category,omitempty"`

	// Sub account type, present only when account type is either `demo` or
	// `financial`.
	Mt5AccountType *Mt5NewAccountResponseMt5NewAccountMt5AccountType `json:"mt5_account_type,omitempty"`
}

type Mt5NewAccountResponseMt5NewAccountAccountType string

const Mt5NewAccountResponseMt5NewAccountAccountTypeDemo Mt5NewAccountResponseMt5NewAccountAccountType = "demo"
const Mt5NewAccountResponseMt5NewAccountAccountTypeFinancial Mt5NewAccountResponseMt5NewAccountAccountType = "financial"
const Mt5NewAccountResponseMt5NewAccountAccountTypeGaming Mt5NewAccountResponseMt5NewAccountAccountType = "gaming"

type Mt5NewAccountResponseMt5NewAccountMt5AccountCategory string

const Mt5NewAccountResponseMt5NewAccountMt5AccountCategoryConventional Mt5NewAccountResponseMt5NewAccountMt5AccountCategory = "conventional"

type Mt5NewAccountResponseMt5NewAccountMt5AccountType string

const Mt5NewAccountResponseMt5NewAccountMt5AccountTypeFinancial Mt5NewAccountResponseMt5NewAccountMt5AccountType = "financial"
const Mt5NewAccountResponseMt5NewAccountMt5AccountTypeFinancialStp Mt5NewAccountResponseMt5NewAccountMt5AccountType = "financial_stp"

// To change passwords of the MT5 account.
type Mt5PasswordChangeRequest struct {
	// MT5 user login
	Login string `json:"login"`

	// Must be `1`
	Mt5PasswordChange Mt5PasswordChangeRequestMt5PasswordChange `json:"mt5_password_change"`

	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address).
	NewPassword string `json:"new_password"`

	// Old password for validation (non-empty string, accepts any printable ASCII
	// character)
	OldPassword string `json:"old_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5PasswordChangeRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Type of the password to change.
	PasswordType Mt5PasswordChangeRequestPasswordType `json:"password_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type Mt5PasswordChangeRequestMt5PasswordChange int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5PasswordChangeRequestPassthrough map[string]interface{}

type Mt5PasswordChangeRequestPasswordType string

const Mt5PasswordChangeRequestPasswordTypeInvestor Mt5PasswordChangeRequestPasswordType = "investor"
const Mt5PasswordChangeRequestPasswordTypeMain Mt5PasswordChangeRequestPasswordType = "main"

// MT5 user password change receive
type Mt5PasswordChangeResponse struct {
	// Echo of the request made.
	EchoReq Mt5PasswordChangeResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5PasswordChangeResponseMsgType `json:"msg_type"`

	// `1` on success
	Mt5PasswordChange *int `json:"mt5_password_change,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5PasswordChangeResponseEchoReq map[string]interface{}

type Mt5PasswordChangeResponseMsgType string

const Mt5PasswordChangeResponseMsgTypeMt5PasswordChange Mt5PasswordChangeResponseMsgType = "mt5_password_change"

// This call validates the main password for the MT5 user
type Mt5PasswordCheckRequest struct {
	// MT5 user login
	Login string `json:"login"`

	// Must be `1`
	Mt5PasswordCheck Mt5PasswordCheckRequestMt5PasswordCheck `json:"mt5_password_check"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5PasswordCheckRequestPassthrough `json:"passthrough,omitempty"`

	// The password of the account.
	Password string `json:"password"`

	// [Optional] Type of the password to check.
	PasswordType Mt5PasswordCheckRequestPasswordType `json:"password_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type Mt5PasswordCheckRequestMt5PasswordCheck int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5PasswordCheckRequestPassthrough map[string]interface{}

type Mt5PasswordCheckRequestPasswordType string

const Mt5PasswordCheckRequestPasswordTypeInvestor Mt5PasswordCheckRequestPasswordType = "investor"
const Mt5PasswordCheckRequestPasswordTypeMain Mt5PasswordCheckRequestPasswordType = "main"

// MT5 user password check receive
type Mt5PasswordCheckResponse struct {
	// Echo of the request made.
	EchoReq Mt5PasswordCheckResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5PasswordCheckResponseMsgType `json:"msg_type"`

	// `1` on success
	Mt5PasswordCheck *int `json:"mt5_password_check,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5PasswordCheckResponseEchoReq map[string]interface{}

type Mt5PasswordCheckResponseMsgType string

const Mt5PasswordCheckResponseMsgTypeMt5PasswordCheck Mt5PasswordCheckResponseMsgType = "mt5_password_check"

// To reset the password of MT5 account.
type Mt5PasswordResetRequest struct {
	// MT5 user login
	Login string `json:"login"`

	// Must be `1`
	Mt5PasswordReset Mt5PasswordResetRequestMt5PasswordReset `json:"mt5_password_reset"`

	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address).
	NewPassword string `json:"new_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5PasswordResetRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Type of the password to reset.
	PasswordType Mt5PasswordResetRequestPasswordType `json:"password_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

type Mt5PasswordResetRequestMt5PasswordReset int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5PasswordResetRequestPassthrough map[string]interface{}

type Mt5PasswordResetRequestPasswordType string

const Mt5PasswordResetRequestPasswordTypeInvestor Mt5PasswordResetRequestPasswordType = "investor"
const Mt5PasswordResetRequestPasswordTypeMain Mt5PasswordResetRequestPasswordType = "main"

// MT5 user password reset receive
type Mt5PasswordResetResponse struct {
	// Echo of the request made.
	EchoReq Mt5PasswordResetResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5PasswordResetResponseMsgType `json:"msg_type"`

	// `1` on success
	Mt5PasswordReset *int `json:"mt5_password_reset,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5PasswordResetResponseEchoReq map[string]interface{}

type Mt5PasswordResetResponseMsgType string

const Mt5PasswordResetResponseMsgTypeMt5PasswordReset Mt5PasswordResetResponseMsgType = "mt5_password_reset"

// This call allows withdrawal from MT5 account to Binary account.
type Mt5WithdrawalRequest struct {
	// Amount to withdraw (in the currency of the MT5 account); min = $1 or an
	// equivalent amount, max = $20000 or an equivalent amount.
	Amount float64 `json:"amount"`

	// MT5 account login to withdraw money from
	FromMt5 string `json:"from_mt5"`

	// Must be `1`
	Mt5Withdrawal Mt5WithdrawalRequestMt5Withdrawal `json:"mt5_withdrawal"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5WithdrawalRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Binary account loginid to transfer money to
	ToBinary string `json:"to_binary"`
}

type Mt5WithdrawalRequestMt5Withdrawal int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5WithdrawalRequestPassthrough map[string]interface{}

// The result of MT5 withdrawal request made.
type Mt5WithdrawalResponse struct {
	// Deposit reference ID of Binary account.
	BinaryTransactionId *int `json:"binary_transaction_id,omitempty"`

	// Echo of the request made.
	EchoReq Mt5WithdrawalResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5WithdrawalResponseMsgType `json:"msg_type"`

	// `1` on success
	Mt5Withdrawal *int `json:"mt5_withdrawal,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5WithdrawalResponseEchoReq map[string]interface{}

type Mt5WithdrawalResponseMsgType string

const Mt5WithdrawalResponseMsgTypeMt5Withdrawal Mt5WithdrawalResponseMsgType = "mt5_withdrawal"

// This call opens a new real-money account with the `maltainvest` Landing Company.
// This call can be made from a virtual-money account or real-money account at
// Deriv (Europe) Limited. If it is the latter, client information fields in this
// call will be ignored and data from your existing real-money account will be
// used.
type NewAccountMaltainvestRequest struct {
	// Show whether client has accepted risk disclaimer.
	AcceptRisk *NewAccountMaltainvestRequestAcceptRisk `json:"accept_risk,omitempty"`

	// [Optional] Purpose and reason for requesting the account opening.
	AccountOpeningReason *NewAccountMaltainvestRequestAccountOpeningReason `json:"account_opening_reason,omitempty"`

	// [Optional] The anticipated account turnover.
	AccountTurnover *NewAccountMaltainvestRequestAccountTurnover `json:"account_turnover,omitempty"`

	// Within 100 characters
	AddressCity string `json:"address_city"`

	// Within 70 characters, with no leading whitespaces and may contain
	// letters/numbers and/or any of following characters '.,:;()@#/-
	AddressLine1 string `json:"address_line_1"`

	// [Optional] Within 70 characters.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Within 20 characters and may not contain '+'.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Possible value receive from `states_list` call.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// How much experience do you have in CFD trading?
	CfdExperience *NewAccountMaltainvestRequestCfdExperience `json:"cfd_experience,omitempty"`

	// How many CFD trades have you placed in the past 12 months?
	CfdFrequency *NewAccountMaltainvestRequestCfdFrequency `json:"cfd_frequency,omitempty"`

	// In your understanding, CFD trading allows you to:
	CfdTradingDefinition *NewAccountMaltainvestRequestCfdTradingDefinition `json:"cfd_trading_definition,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code. Possible value
	// receive from `residence_list` call.
	Citizen *string `json:"citizen,omitempty"`

	// [Optional] Indicates whether this is for a client requesting an account with
	// professional status.
	ClientType NewAccountMaltainvestRequestClientType `json:"client_type,omitempty"`

	// [Optional] To set currency of the account. List of supported currencies can be
	// acquired with `payout_currencies` call.
	Currency *string `json:"currency,omitempty"`

	// Date of birth format: yyyy-mm-dd.
	DateOfBirth string `json:"date_of_birth"`

	// Level of Education
	EducationLevel *NewAccountMaltainvestRequestEducationLevel `json:"education_level,omitempty"`

	// Industry of Employment.
	EmploymentIndustry *NewAccountMaltainvestRequestEmploymentIndustry `json:"employment_industry,omitempty"`

	// Employment Status.
	EmploymentStatus NewAccountMaltainvestRequestEmploymentStatus `json:"employment_status"`

	// Estimated Net Worth.
	EstimatedWorth *NewAccountMaltainvestRequestEstimatedWorth `json:"estimated_worth,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName string `json:"first_name"`

	// Income Source.
	IncomeSource *NewAccountMaltainvestRequestIncomeSource `json:"income_source,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName string `json:"last_name"`

	// How does leverage affect CFD trading?
	LeverageImpactTrading *NewAccountMaltainvestRequestLeverageImpactTrading `json:"leverage_impact_trading,omitempty"`

	// Leverage trading is high-risk, so it's a good idea to use risk management
	// features such as stop loss. Stop loss allows you to
	LeverageTradingHighRiskStopLoss *NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss `json:"leverage_trading_high_risk_stop_loss,omitempty"`

	// Net Annual Income.
	NetIncome *NewAccountMaltainvestRequestNetIncome `json:"net_income,omitempty"`

	// Must be `1`
	NewAccountMaltainvest NewAccountMaltainvestRequestNewAccountMaltainvest `json:"new_account_maltainvest"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA.
	NonPepDeclaration *int `json:"non_pep_declaration,omitempty"`

	// Occupation.
	Occupation *NewAccountMaltainvestRequestOccupation `json:"occupation,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewAccountMaltainvestRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
	Phone interface{} `json:"phone,omitempty"`

	// [Optional] Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// When would you be required to pay an initial margin?
	RequiredInitialMargin *NewAccountMaltainvestRequestRequiredInitialMargin `json:"required_initial_margin,omitempty"`

	// 2-letter country code, possible value receive from `residence_list` call.
	Residence string `json:"residence"`

	// Do you understand that you could potentially lose 100% of the money you use to
	// trade?
	RiskTolerance *NewAccountMaltainvestRequestRiskTolerance `json:"risk_tolerance,omitempty"`

	// Accept any value in enum list.
	Salutation NewAccountMaltainvestRequestSalutation `json:"salutation"`

	// [Optional] Answer to secret question, within 4-50 characters.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list.
	SecretQuestion *NewAccountMaltainvestRequestSecretQuestion `json:"secret_question,omitempty"`

	// How much knowledge and experience do you have in relation to online trading?
	SourceOfExperience *NewAccountMaltainvestRequestSourceOfExperience `json:"source_of_experience,omitempty"`

	// [Optional] Source of wealth.
	SourceOfWealth *NewAccountMaltainvestRequestSourceOfWealth `json:"source_of_wealth,omitempty"`

	// Tax identification number. Only applicable for real money account. Required for
	// `maltainvest` landing company.
	TaxIdentificationNumber string `json:"tax_identification_number"`

	// Residence for tax purpose. Comma separated iso country code if multiple
	// jurisdictions. Only applicable for real money account. Required for
	// `maltainvest` landing company.
	TaxResidence string `json:"tax_residence"`

	// How much experience do you have with other financial instruments?
	TradingExperienceFinancialInstruments *NewAccountMaltainvestRequestTradingExperienceFinancialInstruments `json:"trading_experience_financial_instruments,omitempty"`

	// How many trades have you placed with other financial instruments in the past 12
	// months?
	TradingFrequencyFinancialInstruments *NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments `json:"trading_frequency_financial_instruments,omitempty"`
}

type NewAccountMaltainvestRequestAcceptRisk int

type NewAccountMaltainvestRequestAccountOpeningReason string

const NewAccountMaltainvestRequestAccountOpeningReasonHedging NewAccountMaltainvestRequestAccountOpeningReason = "Hedging"
const NewAccountMaltainvestRequestAccountOpeningReasonIncomeEarning NewAccountMaltainvestRequestAccountOpeningReason = "Income Earning"
const NewAccountMaltainvestRequestAccountOpeningReasonSpeculative NewAccountMaltainvestRequestAccountOpeningReason = "Speculative"

type NewAccountMaltainvestRequestAccountTurnover string

const NewAccountMaltainvestRequestAccountTurnoverA100001500000 NewAccountMaltainvestRequestAccountTurnover = "$100,001 - $500,000"
const NewAccountMaltainvestRequestAccountTurnoverA2500050000 NewAccountMaltainvestRequestAccountTurnover = "$25,000 - $50,000"
const NewAccountMaltainvestRequestAccountTurnoverA50001100000 NewAccountMaltainvestRequestAccountTurnover = "$50,001 - $100,000"
const NewAccountMaltainvestRequestAccountTurnoverLessThan25000 NewAccountMaltainvestRequestAccountTurnover = "Less than $25,000"
const NewAccountMaltainvestRequestAccountTurnoverOver500000 NewAccountMaltainvestRequestAccountTurnover = "Over $500,000"

type NewAccountMaltainvestRequestCfdExperience string

const NewAccountMaltainvestRequestCfdExperienceA12Years NewAccountMaltainvestRequestCfdExperience = "1 - 2 years"
const NewAccountMaltainvestRequestCfdExperienceLessThanAYear NewAccountMaltainvestRequestCfdExperience = "Less than a year"
const NewAccountMaltainvestRequestCfdExperienceNoExperience NewAccountMaltainvestRequestCfdExperience = "No experience"
const NewAccountMaltainvestRequestCfdExperienceOver3Years NewAccountMaltainvestRequestCfdExperience = "Over 3 years"

type NewAccountMaltainvestRequestCfdFrequency string

const NewAccountMaltainvestRequestCfdFrequencyA1139TransactionsInThePast12Months NewAccountMaltainvestRequestCfdFrequency = "11 - 39 transactions in the past 12 months"
const NewAccountMaltainvestRequestCfdFrequencyA15TransactionsInThePast12Months NewAccountMaltainvestRequestCfdFrequency = "1 - 5 transactions in the past 12 months"
const NewAccountMaltainvestRequestCfdFrequencyA40TransactionsOrMoreInThePast12Months NewAccountMaltainvestRequestCfdFrequency = "40 transactions or more in the past 12 months"
const NewAccountMaltainvestRequestCfdFrequencyA610TransactionsInThePast12Months NewAccountMaltainvestRequestCfdFrequency = "6 - 10 transactions in the past 12 months"
const NewAccountMaltainvestRequestCfdFrequencyNoTransactionsInThePast12Months NewAccountMaltainvestRequestCfdFrequency = "No transactions in the past 12 months"

type NewAccountMaltainvestRequestCfdTradingDefinition string

const NewAccountMaltainvestRequestCfdTradingDefinitionMakeALongTermInvestment NewAccountMaltainvestRequestCfdTradingDefinition = "Make a long-term investment."
const NewAccountMaltainvestRequestCfdTradingDefinitionPlaceABetOnThePriceMovement NewAccountMaltainvestRequestCfdTradingDefinition = "Place a bet on the price movement."
const NewAccountMaltainvestRequestCfdTradingDefinitionPurchaseSharesOfACompanyOrPhysicalCommodities NewAccountMaltainvestRequestCfdTradingDefinition = "Purchase shares of a company or physical commodities."
const NewAccountMaltainvestRequestCfdTradingDefinitionSpeculateOnThePriceMovement NewAccountMaltainvestRequestCfdTradingDefinition = "Speculate on the price movement."

type NewAccountMaltainvestRequestClientType string

const NewAccountMaltainvestRequestClientTypeProfessional NewAccountMaltainvestRequestClientType = "professional"
const NewAccountMaltainvestRequestClientTypeRetail NewAccountMaltainvestRequestClientType = "retail"

type NewAccountMaltainvestRequestEducationLevel string

const NewAccountMaltainvestRequestEducationLevelPrimary NewAccountMaltainvestRequestEducationLevel = "Primary"
const NewAccountMaltainvestRequestEducationLevelSecondary NewAccountMaltainvestRequestEducationLevel = "Secondary"
const NewAccountMaltainvestRequestEducationLevelTertiary NewAccountMaltainvestRequestEducationLevel = "Tertiary"

type NewAccountMaltainvestRequestEmploymentIndustry string

const NewAccountMaltainvestRequestEmploymentIndustryAgriculture NewAccountMaltainvestRequestEmploymentIndustry = "Agriculture"
const NewAccountMaltainvestRequestEmploymentIndustryConstruction NewAccountMaltainvestRequestEmploymentIndustry = "Construction"
const NewAccountMaltainvestRequestEmploymentIndustryEducation NewAccountMaltainvestRequestEmploymentIndustry = "Education"
const NewAccountMaltainvestRequestEmploymentIndustryFinance NewAccountMaltainvestRequestEmploymentIndustry = "Finance"
const NewAccountMaltainvestRequestEmploymentIndustryFoodServices NewAccountMaltainvestRequestEmploymentIndustry = "Food Services"
const NewAccountMaltainvestRequestEmploymentIndustryHealth NewAccountMaltainvestRequestEmploymentIndustry = "Health"
const NewAccountMaltainvestRequestEmploymentIndustryInformationCommunicationsTechnology NewAccountMaltainvestRequestEmploymentIndustry = "Information & Communications Technology"
const NewAccountMaltainvestRequestEmploymentIndustryLegal NewAccountMaltainvestRequestEmploymentIndustry = "Legal"
const NewAccountMaltainvestRequestEmploymentIndustryManufacturing NewAccountMaltainvestRequestEmploymentIndustry = "Manufacturing"
const NewAccountMaltainvestRequestEmploymentIndustryRealEstate NewAccountMaltainvestRequestEmploymentIndustry = "Real Estate"
const NewAccountMaltainvestRequestEmploymentIndustryScienceEngineering NewAccountMaltainvestRequestEmploymentIndustry = "Science & Engineering"
const NewAccountMaltainvestRequestEmploymentIndustrySocialCultural NewAccountMaltainvestRequestEmploymentIndustry = "Social & Cultural"
const NewAccountMaltainvestRequestEmploymentIndustryTourism NewAccountMaltainvestRequestEmploymentIndustry = "Tourism"
const NewAccountMaltainvestRequestEmploymentIndustryUnemployed NewAccountMaltainvestRequestEmploymentIndustry = "Unemployed"

type NewAccountMaltainvestRequestEmploymentStatus string

const NewAccountMaltainvestRequestEmploymentStatusEmployed NewAccountMaltainvestRequestEmploymentStatus = "Employed"
const NewAccountMaltainvestRequestEmploymentStatusPensioner NewAccountMaltainvestRequestEmploymentStatus = "Pensioner"
const NewAccountMaltainvestRequestEmploymentStatusSelfEmployed NewAccountMaltainvestRequestEmploymentStatus = "Self-Employed"
const NewAccountMaltainvestRequestEmploymentStatusStudent NewAccountMaltainvestRequestEmploymentStatus = "Student"
const NewAccountMaltainvestRequestEmploymentStatusUnemployed NewAccountMaltainvestRequestEmploymentStatus = "Unemployed"

type NewAccountMaltainvestRequestEstimatedWorth string

const NewAccountMaltainvestRequestEstimatedWorthA100000250000 NewAccountMaltainvestRequestEstimatedWorth = "$100,000 - $250,000"
const NewAccountMaltainvestRequestEstimatedWorthA250001500000 NewAccountMaltainvestRequestEstimatedWorth = "$250,001 - $500,000"
const NewAccountMaltainvestRequestEstimatedWorthA5000011000000 NewAccountMaltainvestRequestEstimatedWorth = "$500,001 - $1,000,000"
const NewAccountMaltainvestRequestEstimatedWorthLessThan100000 NewAccountMaltainvestRequestEstimatedWorth = "Less than $100,000"
const NewAccountMaltainvestRequestEstimatedWorthOver1000000 NewAccountMaltainvestRequestEstimatedWorth = "Over $1,000,000"

type NewAccountMaltainvestRequestIncomeSource string

const NewAccountMaltainvestRequestIncomeSourceInvestmentsDividends NewAccountMaltainvestRequestIncomeSource = "Investments & Dividends"
const NewAccountMaltainvestRequestIncomeSourcePension NewAccountMaltainvestRequestIncomeSource = "Pension"
const NewAccountMaltainvestRequestIncomeSourceSalariedEmployee NewAccountMaltainvestRequestIncomeSource = "Salaried Employee"
const NewAccountMaltainvestRequestIncomeSourceSavingsInheritance NewAccountMaltainvestRequestIncomeSource = "Savings & Inheritance"
const NewAccountMaltainvestRequestIncomeSourceSelfEmployed NewAccountMaltainvestRequestIncomeSource = "Self-Employed"
const NewAccountMaltainvestRequestIncomeSourceStateBenefits NewAccountMaltainvestRequestIncomeSource = "State Benefits"

type NewAccountMaltainvestRequestLeverageImpactTrading string

const NewAccountMaltainvestRequestLeverageImpactTradingLeverageGuaranteesProfits NewAccountMaltainvestRequestLeverageImpactTrading = "Leverage guarantees profits."
const NewAccountMaltainvestRequestLeverageImpactTradingLeverageIsARiskMitigationTechnique NewAccountMaltainvestRequestLeverageImpactTrading = "Leverage is a risk mitigation technique."
const NewAccountMaltainvestRequestLeverageImpactTradingLeverageLetsYouOpenLargerPositionsForAFractionOfTheTradeSValue NewAccountMaltainvestRequestLeverageImpactTrading = "Leverage lets you open larger positions for a fraction of the trade's value."
const NewAccountMaltainvestRequestLeverageImpactTradingLeveragePreventsYouFromOpeningLargePositions NewAccountMaltainvestRequestLeverageImpactTrading = "Leverage prevents you from opening large positions."

type NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss string

const NewAccountMaltainvestRequestLeverageTradingHighRiskStopLossCancelYourTradeAtAnyTimeWithinAChosenTimeframe NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss = "Cancel your trade at any time within a chosen timeframe."
const NewAccountMaltainvestRequestLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheLossIsMoreThanOrEqualToASpecificAmount NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss = "Close your trade automatically when the loss is more than or equal to a specific amount."
const NewAccountMaltainvestRequestLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheProfitIsMoreThanOrEqualToASpecificAmount NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss = "Close your trade automatically when the profit is more than or equal to a specific amount."
const NewAccountMaltainvestRequestLeverageTradingHighRiskStopLossMakeAGuaranteedProfitOnYourTrade NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss = "Make a guaranteed profit on your trade."

type NewAccountMaltainvestRequestNetIncome string

const NewAccountMaltainvestRequestNetIncomeA100001500000 NewAccountMaltainvestRequestNetIncome = "$100,001 - $500,000"
const NewAccountMaltainvestRequestNetIncomeA2500050000 NewAccountMaltainvestRequestNetIncome = "$25,000 - $50,000"
const NewAccountMaltainvestRequestNetIncomeA50001100000 NewAccountMaltainvestRequestNetIncome = "$50,001 - $100,000"
const NewAccountMaltainvestRequestNetIncomeLessThan25000 NewAccountMaltainvestRequestNetIncome = "Less than $25,000"
const NewAccountMaltainvestRequestNetIncomeOver500000 NewAccountMaltainvestRequestNetIncome = "Over $500,000"

type NewAccountMaltainvestRequestNewAccountMaltainvest int

type NewAccountMaltainvestRequestOccupation string

const NewAccountMaltainvestRequestOccupationAgriculturalForestryAndFisheryWorkers NewAccountMaltainvestRequestOccupation = "Agricultural, Forestry and Fishery Workers"
const NewAccountMaltainvestRequestOccupationArmedForces NewAccountMaltainvestRequestOccupation = "Armed Forces"
const NewAccountMaltainvestRequestOccupationChiefExecutivesSeniorOfficialsAndLegislators NewAccountMaltainvestRequestOccupation = "Chief Executives, Senior Officials and Legislators"
const NewAccountMaltainvestRequestOccupationCleanersAndHelpers NewAccountMaltainvestRequestOccupation = "Cleaners and Helpers"
const NewAccountMaltainvestRequestOccupationClerks NewAccountMaltainvestRequestOccupation = "Clerks"
const NewAccountMaltainvestRequestOccupationCraftMetalElectricalAndElectronicsWorkers NewAccountMaltainvestRequestOccupation = "Craft, Metal, Electrical and Electronics Workers"
const NewAccountMaltainvestRequestOccupationGovernmentOfficers NewAccountMaltainvestRequestOccupation = "Government Officers"
const NewAccountMaltainvestRequestOccupationManagers NewAccountMaltainvestRequestOccupation = "Managers"
const NewAccountMaltainvestRequestOccupationMiningConstructionManufacturingAndTransportWorkers NewAccountMaltainvestRequestOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const NewAccountMaltainvestRequestOccupationPersonalCareSalesAndServiceWorkers NewAccountMaltainvestRequestOccupation = "Personal Care, Sales and Service Workers"
const NewAccountMaltainvestRequestOccupationPlantAndMachineOperatorsAndAssemblers NewAccountMaltainvestRequestOccupation = "Plant and Machine Operators and Assemblers"
const NewAccountMaltainvestRequestOccupationProfessionals NewAccountMaltainvestRequestOccupation = "Professionals"
const NewAccountMaltainvestRequestOccupationStudents NewAccountMaltainvestRequestOccupation = "Students"
const NewAccountMaltainvestRequestOccupationUnemployed NewAccountMaltainvestRequestOccupation = "Unemployed"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewAccountMaltainvestRequestPassthrough map[string]interface{}

type NewAccountMaltainvestRequestRequiredInitialMargin string

const NewAccountMaltainvestRequestRequiredInitialMarginAllOfTheAbove NewAccountMaltainvestRequestRequiredInitialMargin = "All of the above."
const NewAccountMaltainvestRequestRequiredInitialMarginWhenBuyingSharesOfACompany NewAccountMaltainvestRequestRequiredInitialMargin = "When buying shares of a company."
const NewAccountMaltainvestRequestRequiredInitialMarginWhenOpeningALeveragedCFDTrade NewAccountMaltainvestRequestRequiredInitialMargin = "When opening a Leveraged CFD trade."
const NewAccountMaltainvestRequestRequiredInitialMarginWhenTradingMultipliers NewAccountMaltainvestRequestRequiredInitialMargin = "When trading Multipliers."

type NewAccountMaltainvestRequestRiskTolerance string

const NewAccountMaltainvestRequestRiskToleranceNo NewAccountMaltainvestRequestRiskTolerance = "No"
const NewAccountMaltainvestRequestRiskToleranceYes NewAccountMaltainvestRequestRiskTolerance = "Yes"

type NewAccountMaltainvestRequestSalutation string

const NewAccountMaltainvestRequestSalutationMiss NewAccountMaltainvestRequestSalutation = "Miss"
const NewAccountMaltainvestRequestSalutationMr NewAccountMaltainvestRequestSalutation = "Mr"
const NewAccountMaltainvestRequestSalutationMrs NewAccountMaltainvestRequestSalutation = "Mrs"
const NewAccountMaltainvestRequestSalutationMs NewAccountMaltainvestRequestSalutation = "Ms"

type NewAccountMaltainvestRequestSecretQuestion string

const NewAccountMaltainvestRequestSecretQuestionBrandOfFirstCar NewAccountMaltainvestRequestSecretQuestion = "Brand of first car"
const NewAccountMaltainvestRequestSecretQuestionFavouriteArtist NewAccountMaltainvestRequestSecretQuestion = "Favourite artist"
const NewAccountMaltainvestRequestSecretQuestionFavouriteDish NewAccountMaltainvestRequestSecretQuestion = "Favourite dish"
const NewAccountMaltainvestRequestSecretQuestionMemorableDate NewAccountMaltainvestRequestSecretQuestion = "Memorable date"
const NewAccountMaltainvestRequestSecretQuestionMemorableTownCity NewAccountMaltainvestRequestSecretQuestion = "Memorable town/city"
const NewAccountMaltainvestRequestSecretQuestionMotherSMaidenName NewAccountMaltainvestRequestSecretQuestion = "Mother's maiden name"
const NewAccountMaltainvestRequestSecretQuestionNameOfFirstLove NewAccountMaltainvestRequestSecretQuestion = "Name of first love"
const NewAccountMaltainvestRequestSecretQuestionNameOfYourPet NewAccountMaltainvestRequestSecretQuestion = "Name of your pet"

type NewAccountMaltainvestRequestSourceOfExperience string

const NewAccountMaltainvestRequestSourceOfExperienceIHaveAnAcademicDegreeProfessionalCertificationAndOrWorkExperience NewAccountMaltainvestRequestSourceOfExperience = "I have an academic degree, professional certification, and/or work experience."
const NewAccountMaltainvestRequestSourceOfExperienceIHaveAttendedSeminarsTrainingAndOrWorkshops NewAccountMaltainvestRequestSourceOfExperience = "I have attended seminars, training, and/or workshops."
const NewAccountMaltainvestRequestSourceOfExperienceIHaveLittleExperience NewAccountMaltainvestRequestSourceOfExperience = "I have little experience."
const NewAccountMaltainvestRequestSourceOfExperienceIHaveNoKnowledge NewAccountMaltainvestRequestSourceOfExperience = "I have no knowledge."
const NewAccountMaltainvestRequestSourceOfExperienceITradeForexCFDsAndOtherComplexFinancialInstruments NewAccountMaltainvestRequestSourceOfExperience = "I trade forex CFDs and other complex financial instruments."

type NewAccountMaltainvestRequestSourceOfWealth string

const NewAccountMaltainvestRequestSourceOfWealthAccumulationOfIncomeSavings NewAccountMaltainvestRequestSourceOfWealth = "Accumulation of Income/Savings"
const NewAccountMaltainvestRequestSourceOfWealthCashBusiness NewAccountMaltainvestRequestSourceOfWealth = "Cash Business"
const NewAccountMaltainvestRequestSourceOfWealthCompanyOwnership NewAccountMaltainvestRequestSourceOfWealth = "Company Ownership"
const NewAccountMaltainvestRequestSourceOfWealthDivorceSettlement NewAccountMaltainvestRequestSourceOfWealth = "Divorce Settlement"
const NewAccountMaltainvestRequestSourceOfWealthInheritance NewAccountMaltainvestRequestSourceOfWealth = "Inheritance"
const NewAccountMaltainvestRequestSourceOfWealthInvestmentIncome NewAccountMaltainvestRequestSourceOfWealth = "Investment Income"
const NewAccountMaltainvestRequestSourceOfWealthSaleOfProperty NewAccountMaltainvestRequestSourceOfWealth = "Sale of Property"

type NewAccountMaltainvestRequestTradingExperienceFinancialInstruments string

const NewAccountMaltainvestRequestTradingExperienceFinancialInstrumentsA12Years NewAccountMaltainvestRequestTradingExperienceFinancialInstruments = "1 - 2 years"
const NewAccountMaltainvestRequestTradingExperienceFinancialInstrumentsLessThanAYear NewAccountMaltainvestRequestTradingExperienceFinancialInstruments = "Less than a year"
const NewAccountMaltainvestRequestTradingExperienceFinancialInstrumentsNoExperience NewAccountMaltainvestRequestTradingExperienceFinancialInstruments = "No experience"
const NewAccountMaltainvestRequestTradingExperienceFinancialInstrumentsOver3Years NewAccountMaltainvestRequestTradingExperienceFinancialInstruments = "Over 3 years"

type NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments string

const NewAccountMaltainvestRequestTradingFrequencyFinancialInstrumentsA1139TransactionsInThePast12Months NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = "11 - 39 transactions in the past 12 months"
const NewAccountMaltainvestRequestTradingFrequencyFinancialInstrumentsA15TransactionsInThePast12Months NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = "1 - 5 transactions in the past 12 months"
const NewAccountMaltainvestRequestTradingFrequencyFinancialInstrumentsA40TransactionsOrMoreInThePast12Months NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = "40 transactions or more in the past 12 months"
const NewAccountMaltainvestRequestTradingFrequencyFinancialInstrumentsA610TransactionsInThePast12Months NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = "6 - 10 transactions in the past 12 months"
const NewAccountMaltainvestRequestTradingFrequencyFinancialInstrumentsNoTransactionsInThePast12Months NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = "No transactions in the past 12 months"

// Create maltainvest account Receive
type NewAccountMaltainvestResponse struct {
	// Echo of the request made.
	EchoReq NewAccountMaltainvestResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountMaltainvestResponseMsgType `json:"msg_type"`

	// New `maltainvest` account details
	NewAccountMaltainvest *NewAccountMaltainvestResponseNewAccountMaltainvest `json:"new_account_maltainvest,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountMaltainvestResponseEchoReq map[string]interface{}

type NewAccountMaltainvestResponseMsgType string

const NewAccountMaltainvestResponseMsgTypeNewAccountMaltainvest NewAccountMaltainvestResponseMsgType = "new_account_maltainvest"

// New `maltainvest` account details
type NewAccountMaltainvestResponseNewAccountMaltainvest struct {
	// Client ID of new `maltainvest` account
	ClientId string `json:"client_id"`

	// Landing company full name
	LandingCompany string `json:"landing_company"`

	// Landing company shortcode
	LandingCompanyShort *string `json:"landing_company_short,omitempty"`

	// Landing company shortcode
	LandingCompanyShortcode *string `json:"landing_company_shortcode,omitempty"`

	// OAuth token for client's login session
	OauthToken string `json:"oauth_token"`
}

// This call opens a new real-money account. This call can be made from a
// virtual-money or a real-money account. If it is the latter, client information
// fields in this call will be ignored and data from your existing real-money
// account will be used.
type NewAccountRealRequest struct {
	// [Optional] Purpose and reason for requesting the account opening.
	AccountOpeningReason *NewAccountRealRequestAccountOpeningReason `json:"account_opening_reason,omitempty"`

	// [Optional] The anticipated account turnover.
	AccountTurnover *NewAccountRealRequestAccountTurnover `json:"account_turnover,omitempty"`

	// [Optional] Within 100 characters.
	AddressCity *string `json:"address_city,omitempty"`

	// Within 70 characters, with no leading whitespaces and may contain
	// letters/numbers and/or any of following characters '.,:;()@#/-
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// [Optional] Within 70 characters.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Within 20 characters and may not contain '+'.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Possible value receive from `states_list` call.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code.
	Citizen interface{} `json:"citizen,omitempty"`

	// [Optional] Indicates whether this is for a client requesting an account with
	// professional status.
	ClientType NewAccountRealRequestClientType `json:"client_type,omitempty"`

	// [Optional] To set currency of the account. List of supported currencies can be
	// acquired with `payout_currencies` call.
	Currency *string `json:"currency,omitempty"`

	// Date of birth format: `yyyy-mm-dd`.
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName *string `json:"first_name,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName *string `json:"last_name,omitempty"`

	// Must be `1`
	NewAccountReal NewAccountRealRequestNewAccountReal `json:"new_account_real"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA
	// (Politically Exposed Person/Relatives and Close Associates).
	NonPepDeclaration *int `json:"non_pep_declaration,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewAccountRealRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
	Phone interface{} `json:"phone,omitempty"`

	// [Optional] Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// 2-letter country code, possible value receive from `residence_list` call.
	Residence *string `json:"residence,omitempty"`

	// [Optional] Accept any value in enum list.
	Salutation *NewAccountRealRequestSalutation `json:"salutation,omitempty"`

	// [Optional] Answer to secret question, within 4-50 characters. Required for new
	// account and existing client details will be used if client open another
	// account.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list. Required for new account and existing
	// client details will be used if client open another account.
	SecretQuestion *NewAccountRealRequestSecretQuestion `json:"secret_question,omitempty"`

	// [Optional] Tax identification number. Only applicable for real money account.
	// Required for `maltainvest` landing company.
	TaxIdentificationNumber *string `json:"tax_identification_number,omitempty"`

	// [Optional] Residence for tax purpose. Comma separated iso country code if
	// multiple jurisdictions. Only applicable for real money account. Required for
	// `maltainvest` landing company.
	TaxResidence *string `json:"tax_residence,omitempty"`
}

type NewAccountRealRequestAccountOpeningReason string

const NewAccountRealRequestAccountOpeningReasonHedging NewAccountRealRequestAccountOpeningReason = "Hedging"
const NewAccountRealRequestAccountOpeningReasonIncomeEarning NewAccountRealRequestAccountOpeningReason = "Income Earning"
const NewAccountRealRequestAccountOpeningReasonPeerToPeerExchange NewAccountRealRequestAccountOpeningReason = "Peer-to-peer exchange"
const NewAccountRealRequestAccountOpeningReasonSpeculative NewAccountRealRequestAccountOpeningReason = "Speculative"

type NewAccountRealRequestAccountTurnover string

const NewAccountRealRequestAccountTurnoverA100001500000 NewAccountRealRequestAccountTurnover = "$100,001 - $500,000"
const NewAccountRealRequestAccountTurnoverA2500050000 NewAccountRealRequestAccountTurnover = "$25,000 - $50,000"
const NewAccountRealRequestAccountTurnoverA50001100000 NewAccountRealRequestAccountTurnover = "$50,001 - $100,000"
const NewAccountRealRequestAccountTurnoverLessThan25000 NewAccountRealRequestAccountTurnover = "Less than $25,000"
const NewAccountRealRequestAccountTurnoverOver500000 NewAccountRealRequestAccountTurnover = "Over $500,000"

type NewAccountRealRequestClientType string

const NewAccountRealRequestClientTypeProfessional NewAccountRealRequestClientType = "professional"
const NewAccountRealRequestClientTypeRetail NewAccountRealRequestClientType = "retail"

type NewAccountRealRequestNewAccountReal int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewAccountRealRequestPassthrough map[string]interface{}

type NewAccountRealRequestSalutation string

const NewAccountRealRequestSalutationMiss NewAccountRealRequestSalutation = "Miss"
const NewAccountRealRequestSalutationMr NewAccountRealRequestSalutation = "Mr"
const NewAccountRealRequestSalutationMrs NewAccountRealRequestSalutation = "Mrs"
const NewAccountRealRequestSalutationMs NewAccountRealRequestSalutation = "Ms"

type NewAccountRealRequestSecretQuestion string

const NewAccountRealRequestSecretQuestionBrandOfFirstCar NewAccountRealRequestSecretQuestion = "Brand of first car"
const NewAccountRealRequestSecretQuestionFavouriteArtist NewAccountRealRequestSecretQuestion = "Favourite artist"
const NewAccountRealRequestSecretQuestionFavouriteDish NewAccountRealRequestSecretQuestion = "Favourite dish"
const NewAccountRealRequestSecretQuestionMemorableDate NewAccountRealRequestSecretQuestion = "Memorable date"
const NewAccountRealRequestSecretQuestionMemorableTownCity NewAccountRealRequestSecretQuestion = "Memorable town/city"
const NewAccountRealRequestSecretQuestionMotherSMaidenName NewAccountRealRequestSecretQuestion = "Mother's maiden name"
const NewAccountRealRequestSecretQuestionNameOfFirstLove NewAccountRealRequestSecretQuestion = "Name of first love"
const NewAccountRealRequestSecretQuestionNameOfYourPet NewAccountRealRequestSecretQuestion = "Name of your pet"

// Create real account Receive
type NewAccountRealResponse struct {
	// Echo of the request made.
	EchoReq NewAccountRealResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountRealResponseMsgType `json:"msg_type"`

	// New real money account details
	NewAccountReal *NewAccountRealResponseNewAccountReal `json:"new_account_real,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountRealResponseEchoReq map[string]interface{}

type NewAccountRealResponseMsgType string

const NewAccountRealResponseMsgTypeNewAccountReal NewAccountRealResponseMsgType = "new_account_real"

// New real money account details
type NewAccountRealResponseNewAccountReal struct {
	// Client ID of new real money account
	ClientId string `json:"client_id"`

	// Currency of an account
	Currency *string `json:"currency,omitempty"`

	// Landing company full name
	LandingCompany string `json:"landing_company"`

	// Landing company shortcode
	LandingCompanyShort *string `json:"landing_company_short,omitempty"`

	// Landing company shortcode
	LandingCompanyShortcode *string `json:"landing_company_shortcode,omitempty"`

	// OAuth token for client's login session
	OauthToken string `json:"oauth_token"`
}

// Create a new virtual-money account.
type NewAccountVirtualRequest struct {
	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// Password (Accepts any printable ASCII character. Must be within 8-25
	// characters, and include numbers, lowercase and uppercase letters. Must not be
	// the same as the user's email address).
	ClientPassword *string `json:"client_password,omitempty"`

	// [Optional] Date of first contact, format: `yyyy-mm-dd` in GMT timezone.
	DateFirstContact *string `json:"date_first_contact,omitempty"`

	// [Optional] Boolean value: 1 or 0, indicating whether the client has given
	// consent for marketing emails.
	EmailConsent *NewAccountVirtualRequestEmailConsent `json:"email_consent,omitempty"`

	// [Optional] Google Click Identifier to track source.
	GclidUrl *string `json:"gclid_url,omitempty"`

	// Must be `1`
	NewAccountVirtual NewAccountVirtualRequestNewAccountVirtual `json:"new_account_virtual"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewAccountVirtualRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// 2-letter country code (obtained from `residence_list` call).
	Residence *string `json:"residence,omitempty"`

	// [Optional] Show whether user has used mobile or desktop.
	SignupDevice *NewAccountVirtualRequestSignupDevice `json:"signup_device,omitempty"`

	// Account type
	Type NewAccountVirtualRequestType `json:"type,omitempty"`

	// [Optional] Identifier of particular ad. Value must match Regex pattern to be
	// recorded
	UtmAdId interface{} `json:"utm_ad_id,omitempty"`

	// [Optional] Identifier of ad group in the campaign. Value must match Regex
	// pattern to be recorded
	UtmAdgroupId interface{} `json:"utm_adgroup_id,omitempty"`

	// [Optional] Unique identifier of click on AdRoll ads platform. Value must match
	// Regex pattern to be recorded
	UtmAdrollclkId interface{} `json:"utm_adrollclk_id,omitempty"`

	// [Optional] Identifies a specific product promotion or strategic campaign such
	// as a spring sale or other promotions. Value must match Regex pattern to be
	// recorded
	UtmCampaign interface{} `json:"utm_campaign,omitempty"`

	// [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be
	// recorded
	UtmCampaignId interface{} `json:"utm_campaign_id,omitempty"`

	// [Optional] Used to differentiate similar content, or links within the same ad.
	// Value must match Regex pattern to be recorded
	UtmContent interface{} `json:"utm_content,omitempty"`

	// [Optional] Unique identifier of click on Facebook ads platform. Value must
	// match Regex pattern to be recorded
	UtmFbclId interface{} `json:"utm_fbcl_id,omitempty"`

	// [Optional] Unique visitor identifier on Google Ads platform. Value must match
	// Regex pattern to be recorded
	UtmGlClientId interface{} `json:"utm_gl_client_id,omitempty"`

	// [Optional] Identifies the medium the link was used upon such as: email, CPC, or
	// other methods of sharing. Value must match Regex pattern to be recorded
	UtmMedium interface{} `json:"utm_medium,omitempty"`

	// [Optional] Unique click identifier on Microsoft Bing ads platform. Value must
	// match Regex pattern to be recorded
	UtmMsclkId interface{} `json:"utm_msclk_id,omitempty"`

	// [Optional] Identifies the source of traffic such as: search engine, newsletter,
	// or other referral. Value must match Regex pattern to be recorded
	UtmSource interface{} `json:"utm_source,omitempty"`

	// [Optional] Used to send information related to the campaign term like paid
	// search keywords. Value must match Regex pattern to be recorded
	UtmTerm interface{} `json:"utm_term,omitempty"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first).
	VerificationCode *string `json:"verification_code,omitempty"`
}

type NewAccountVirtualRequestEmailConsent int

type NewAccountVirtualRequestNewAccountVirtual int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewAccountVirtualRequestPassthrough map[string]interface{}

type NewAccountVirtualRequestSignupDevice string

const NewAccountVirtualRequestSignupDeviceDesktop NewAccountVirtualRequestSignupDevice = "desktop"
const NewAccountVirtualRequestSignupDeviceMobile NewAccountVirtualRequestSignupDevice = "mobile"

type NewAccountVirtualRequestType string

const NewAccountVirtualRequestTypeTrading NewAccountVirtualRequestType = "trading"
const NewAccountVirtualRequestTypeWallet NewAccountVirtualRequestType = "wallet"

// Create virtual-money account
type NewAccountVirtualResponse struct {
	// Echo of the request made.
	EchoReq NewAccountVirtualResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountVirtualResponseMsgType `json:"msg_type"`

	// New virtual-money account details
	NewAccountVirtual *NewAccountVirtualResponseNewAccountVirtual `json:"new_account_virtual,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountVirtualResponseEchoReq map[string]interface{}

type NewAccountVirtualResponseMsgType string

const NewAccountVirtualResponseMsgTypeNewAccountVirtual NewAccountVirtualResponseMsgType = "new_account_virtual"

// New virtual-money account details
type NewAccountVirtualResponseNewAccountVirtual struct {
	// Account balance
	Balance float64 `json:"balance"`

	// ID of the new virtual-money account
	ClientId string `json:"client_id"`

	// Account currency
	Currency string `json:"currency"`

	// Email of the new virtual-money account
	Email string `json:"email"`

	// Oauth token for the client's login session (so that the user may be logged in
	// immediately)
	OauthToken string `json:"oauth_token"`

	// Refresh token to perform PTA, only for the first ever created account
	RefreshToken *string `json:"refresh_token,omitempty"`

	// Account type
	Type *NewAccountVirtualResponseNewAccountVirtualType `json:"type,omitempty"`
}

type NewAccountVirtualResponseNewAccountVirtualType string

const NewAccountVirtualResponseNewAccountVirtualTypeTrading NewAccountVirtualResponseNewAccountVirtualType = "trading"
const NewAccountVirtualResponseNewAccountVirtualTypeWallet NewAccountVirtualResponseNewAccountVirtualType = "wallet"

// List all my used OAuth applications.
type OauthAppsRequest struct {
	// Must be `1`
	OauthApps OauthAppsRequestOauthApps `json:"oauth_apps"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough OauthAppsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type OauthAppsRequestOauthApps int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type OauthAppsRequestPassthrough map[string]interface{}

// A message with used applications
type OauthAppsResponse struct {
	// Echo of the request made.
	EchoReq OauthAppsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType OauthAppsResponseMsgType `json:"msg_type"`

	// List of OAuth applications that used for the authorized account.
	OauthApps []OauthAppsResponseOauthAppsElem `json:"oauth_apps,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type OauthAppsResponseEchoReq map[string]interface{}

type OauthAppsResponseMsgType string

const OauthAppsResponseMsgTypeOauthApps OauthAppsResponseMsgType = "oauth_apps"

type OauthAppsResponseOauthAppsElem struct {
	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout)
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// The last date which the application has been used.
	LastUsed interface{} `json:"last_used"`

	// Application name
	Name string `json:"name"`

	// The list of permission scopes grant for each app.
	Scopes []string `json:"scopes"`
}

// Creates a P2P (Peer to Peer) advert. Can only be used by an approved P2P
// advertiser.
type P2PAdvertCreateRequest struct {
	// The total amount of the advert, in advertiser's account currency.
	Amount float64 `json:"amount"`

	// [Optional] Advertiser contact information.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] General information about the advert.
	Description *string `json:"description,omitempty"`

	// [Optional] Local currency for this advert. If not provided, will use the
	// currency of client's residence by default.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// Maximum allowed amount for the orders of this advert, in advertiser's
	// `account_currency`. Should be more than or equal to `min_order_amount`
	MaxOrderAmount float64 `json:"max_order_amount"`

	// Minimum allowed amount for the orders of this advert, in advertiser's
	// `account_currency`. Should be less than or equal to `max_order_amount`.
	MinOrderAmount float64 `json:"min_order_amount"`

	// Must be 1
	P2PAdvertCreate P2PAdvertCreateRequestP2PAdvertCreate `json:"p2p_advert_create"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertCreateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Payment instructions.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] Payment method name (deprecated).
	PaymentMethod *string `json:"payment_method,omitempty"`

	// IDs of previously saved payment methods as returned from
	// p2p_advertiser_payment_methods, only applicable for sell ads.
	PaymentMethodIds []int `json:"payment_method_ids,omitempty"`

	// Payment method identifiers as returned from p2p_payment_methods, only
	// applicable for buy ads.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate float64 `json:"rate"`

	// Type of rate, fixed or floating.
	RateType P2PAdvertCreateRequestRateType `json:"rate_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The advertisement represents the intention to perform this action on your Deriv
	// account funds.
	Type P2PAdvertCreateRequestType `json:"type"`
}

type P2PAdvertCreateRequestP2PAdvertCreate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertCreateRequestPassthrough map[string]interface{}

type P2PAdvertCreateRequestRateType string

const P2PAdvertCreateRequestRateTypeFixed P2PAdvertCreateRequestRateType = "fixed"
const P2PAdvertCreateRequestRateTypeFloat P2PAdvertCreateRequestRateType = "float"

type P2PAdvertCreateRequestType string

const P2PAdvertCreateRequestTypeBuy P2PAdvertCreateRequestType = "buy"
const P2PAdvertCreateRequestTypeSell P2PAdvertCreateRequestType = "sell"

// Returns the information of the created  P2P (Peer to Peer) advert.
type P2PAdvertCreateResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertCreateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertCreateResponseMsgType `json:"msg_type"`

	// The information of the created P2P advert.
	P2PAdvertCreate *P2PAdvertCreateResponseP2PAdvertCreate `json:"p2p_advert_create,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertCreateResponseEchoReq map[string]interface{}

type P2PAdvertCreateResponseMsgType string

const P2PAdvertCreateResponseMsgTypeP2PAdvertCreate P2PAdvertCreateResponseMsgType = "p2p_advert_create"

// The information of the created P2P advert.
type P2PAdvertCreateResponseP2PAdvertCreate struct {
	// Currency for this advert. This is the system currency to be transferred between
	// advertiser and client.
	AccountCurrency string `json:"account_currency"`

	// The number of active orders against this advert.
	ActiveOrders int `json:"active_orders"`

	// Details of the advertiser for this advert.
	AdvertiserDetails P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetails `json:"advertiser_details"`

	// The total amount specified in advert, in `account_currency`.
	Amount float64 `json:"amount"`

	// The total amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// Advertiser contact information. Only applicable for 'sell adverts'.
	ContactInfo *string `json:"contact_info,omitempty"`

	// Type of transaction from the opposite party's perspective.
	CounterpartyType P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType `json:"counterparty_type"`

	// The target country code of the advert.
	Country string `json:"country"`

	// The advert creation time in epoch.
	CreatedTime int `json:"created_time"`

	// General information about the advert.
	Description string `json:"description"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable.
	EffectiveRate interface{} `json:"effective_rate"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable, formatted to appropriate decimal places.
	EffectiveRateDisplay interface{} `json:"effective_rate_display"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// The activation status of the advert.
	IsActive P2PAdvertCreateResponseP2PAdvertCreateIsActive `json:"is_active"`

	// Indicates that this advert will appear on the main advert list.
	IsVisible P2PAdvertCreateResponseP2PAdvertCreateIsVisible `json:"is_visible"`

	// Local currency for this advert. This is the form of payment to be arranged
	// directly between advertiser and client.
	LocalCurrency string `json:"local_currency"`

	// Maximum order amount specified in advert, in `account_currency`.
	MaxOrderAmount float64 `json:"max_order_amount"`

	// Maximum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountDisplay string `json:"max_order_amount_display"`

	// Maximum order amount at this time, in `account_currency`.
	MaxOrderAmountLimit float64 `json:"max_order_amount_limit"`

	// Maximum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountLimitDisplay string `json:"max_order_amount_limit_display"`

	// Minimum order amount specified in advert, in `account_currency`.
	MinOrderAmount float64 `json:"min_order_amount"`

	// Minimum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountDisplay string `json:"min_order_amount_display"`

	// Minimum order amount at this time, in `account_currency`.
	MinOrderAmountLimit float64 `json:"min_order_amount_limit"`

	// Minimum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountLimitDisplay string `json:"min_order_amount_limit_display"`

	// Payment instructions. Only applicable for 'sell adverts'.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Payment method name (deprecated).
	PaymentMethod interface{} `json:"payment_method"`

	// Details of available payment methods (sell adverts only).
	PaymentMethodDetails P2PAdvertCreateResponseP2PAdvertCreatePaymentMethodDetails `json:"payment_method_details,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost of the advert in local currency.
	Price interface{} `json:"price"`

	// Cost of the advert in local currency, formatted to appropriate decimal places.
	PriceDisplay interface{} `json:"price_display"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate float64 `json:"rate"`

	// Conversion rate formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Type of rate, fixed or floating.
	RateType P2PAdvertCreateResponseP2PAdvertCreateRateType `json:"rate_type"`

	// Amount currently available for orders, in `account_currency`.
	RemainingAmount float64 `json:"remaining_amount"`

	// Amount currently available for orders, in `account_currency`, formatted to
	// appropriate decimal places.
	RemainingAmountDisplay string `json:"remaining_amount_display"`

	// The type of advertisement in relation to the advertiser's Deriv account.
	Type P2PAdvertCreateResponseP2PAdvertCreateType `json:"type"`

	// Reasons why an advert is not visible. Possible values:
	// - `advert_inactive`: the advert is set inactive.
	// - `advert_max_limit`: the minimum order amount exceeds the system maximum
	// order.
	// - `advert_min_limit`: the maximum order amount is too small to be shown on the
	// advert list.
	// - `advert_remaining`: the remaining amount of the advert is below the minimum
	// order.
	// - `advertiser_ads_paused`: the advertiser has paused all adverts.
	// - `advertiser_approval`: the advertiser's proof of identity is not verified.
	// - `advertiser_balance`: the advertiser's P2P balance is less than the minimum
	// order.
	// - `advertiser_daily_limit`: the advertiser's remaining daily limit is less than
	// the minimum order.
	// - `advertiser_temp_ban`: the advertiser is temporarily banned from P2P.
	VisibilityStatus []P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem `json:"visibility_status,omitempty"`
}

// Details of the advertiser for this advert.
type P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetails struct {
	// The total number of orders completed in the past 30 days.
	CompletedOrdersCount int `json:"completed_orders_count"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The percentage of successfully completed orders made by or placed against the
	// advertiser within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`
}

type P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline int

type P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType string

const P2PAdvertCreateResponseP2PAdvertCreateCounterpartyTypeBuy P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType = "buy"
const P2PAdvertCreateResponseP2PAdvertCreateCounterpartyTypeSell P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType = "sell"

type P2PAdvertCreateResponseP2PAdvertCreateIsActive int

type P2PAdvertCreateResponseP2PAdvertCreateIsVisible int

// Details of available payment methods (sell adverts only).
type P2PAdvertCreateResponseP2PAdvertCreatePaymentMethodDetails map[string]interface{}

type P2PAdvertCreateResponseP2PAdvertCreateRateType string

const P2PAdvertCreateResponseP2PAdvertCreateRateTypeFixed P2PAdvertCreateResponseP2PAdvertCreateRateType = "fixed"
const P2PAdvertCreateResponseP2PAdvertCreateRateTypeFloat P2PAdvertCreateResponseP2PAdvertCreateRateType = "float"

type P2PAdvertCreateResponseP2PAdvertCreateType string

const P2PAdvertCreateResponseP2PAdvertCreateTypeBuy P2PAdvertCreateResponseP2PAdvertCreateType = "buy"
const P2PAdvertCreateResponseP2PAdvertCreateTypeSell P2PAdvertCreateResponseP2PAdvertCreateType = "sell"

type P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem string

const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertInactive P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advert_inactive"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertMaxLimit P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advert_max_limit"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertMinLimit P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advert_min_limit"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertRemaining P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advert_remaining"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertiserAdsPaused P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advertiser_ads_paused"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertiserApproval P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advertiser_approval"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertiserBalance P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advertiser_balance"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertiserDailyLimit P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advertiser_daily_limit"
const P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElemAdvertiserTempBan P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = "advertiser_temp_ban"

// Retrieve information about a P2P advert.
type P2PAdvertInfoRequest struct {
	// [Optional] The unique identifier for this advert. Optional when subscribe is 1.
	// If not provided, all advertiser adverts will be subscribed.
	Id *string `json:"id,omitempty"`

	// Must be 1
	P2PAdvertInfo P2PAdvertInfoRequestP2PAdvertInfo `json:"p2p_advert_info"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertInfoRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates when changes occur. Optional when id
	// is provided.
	Subscribe *P2PAdvertInfoRequestSubscribe `json:"subscribe,omitempty"`

	// [Optional] If set to 1, the maximum order amount will be adjusted to the
	// current balance and turnover limits of the account.
	UseClientLimits P2PAdvertInfoRequestUseClientLimits `json:"use_client_limits,omitempty"`
}

type P2PAdvertInfoRequestP2PAdvertInfo int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertInfoRequestPassthrough map[string]interface{}

type P2PAdvertInfoRequestSubscribe int

type P2PAdvertInfoRequestUseClientLimits int

// Returns information about the given advert ID.
type P2PAdvertInfoResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertInfoResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertInfoResponseMsgType `json:"msg_type"`

	// P2P advert information.
	P2PAdvertInfo *P2PAdvertInfoResponseP2PAdvertInfo `json:"p2p_advert_info,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2PAdvertInfoResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2PAdvertInfoResponseEchoReq map[string]interface{}

type P2PAdvertInfoResponseMsgType string

const P2PAdvertInfoResponseMsgTypeP2PAdvertInfo P2PAdvertInfoResponseMsgType = "p2p_advert_info"

// P2P advert information.
type P2PAdvertInfoResponseP2PAdvertInfo struct {
	// Currency for this advert. This is the system currency to be transferred between
	// advertiser and client.
	AccountCurrency *string `json:"account_currency,omitempty"`

	// The number of active orders against this advert.
	ActiveOrders *int `json:"active_orders,omitempty"`

	// Details of the advertiser for this advert.
	AdvertiserDetails *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetails `json:"advertiser_details,omitempty"`

	// The total amount specified in advert, in `account_currency`. It is only visible
	// to the advert owner.
	Amount *float64 `json:"amount,omitempty"`

	// The total amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	AmountDisplay *string `json:"amount_display,omitempty"`

	// Advertiser contact information. Only applicable for 'sell adverts'.
	ContactInfo *string `json:"contact_info,omitempty"`

	// Type of transaction from the opposite party's perspective.
	CounterpartyType *P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType `json:"counterparty_type,omitempty"`

	// The target country code of the advert.
	Country *string `json:"country,omitempty"`

	// The advert creation time in epoch.
	CreatedTime *int `json:"created_time,omitempty"`

	// Days until automatic inactivation of this ad, if no activity occurs.
	DaysUntilArchive *int `json:"days_until_archive,omitempty"`

	// Indicates that the advert has been deleted.
	Deleted *P2PAdvertInfoResponseP2PAdvertInfoDeleted `json:"deleted,omitempty"`

	// General information about the advert.
	Description *string `json:"description,omitempty"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable.
	EffectiveRate interface{} `json:"effective_rate,omitempty"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable, formatted to appropriate decimal places.
	EffectiveRateDisplay interface{} `json:"effective_rate_display,omitempty"`

	// The unique identifier for this advert.
	Id *string `json:"id,omitempty"`

	// The activation status of the advert.
	IsActive *P2PAdvertInfoResponseP2PAdvertInfoIsActive `json:"is_active,omitempty"`

	// Indicates that this advert will appear on the main advert list. It is only
	// visible to the advert owner.
	IsVisible P2PAdvertInfoResponseP2PAdvertInfoIsVisible `json:"is_visible,omitempty"`

	// Local currency for this advert. This is the form of payment to be arranged
	// directly between advertiser and client.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// Maximum order amount specified in advert, in `account_currency`. It is only
	// visible for advertisers.
	MaxOrderAmount *float64 `json:"max_order_amount,omitempty"`

	// Maximum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	MaxOrderAmountDisplay *string `json:"max_order_amount_display,omitempty"`

	// Maximum order amount at this time, in `account_currency`.
	MaxOrderAmountLimit *float64 `json:"max_order_amount_limit,omitempty"`

	// Maximum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountLimitDisplay *string `json:"max_order_amount_limit_display,omitempty"`

	// Minimum order amount specified in advert, in `account_currency`. It is only
	// visible for advertisers.
	MinOrderAmount *float64 `json:"min_order_amount,omitempty"`

	// Minimum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	MinOrderAmountDisplay *string `json:"min_order_amount_display,omitempty"`

	// Minimum order amount at this time, in `account_currency`.
	MinOrderAmountLimit *float64 `json:"min_order_amount_limit,omitempty"`

	// Minimum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountLimitDisplay *string `json:"min_order_amount_limit_display,omitempty"`

	// Payment instructions. Only applicable for 'sell adverts'.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Payment method name (deprecated).
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Details of available payment methods (sell adverts only).
	PaymentMethodDetails P2PAdvertInfoResponseP2PAdvertInfoPaymentMethodDetails `json:"payment_method_details,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost of the advert in local currency.
	Price interface{} `json:"price,omitempty"`

	// Cost of the advert in local currency, formatted to appropriate decimal places.
	PriceDisplay interface{} `json:"price_display,omitempty"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate *float64 `json:"rate,omitempty"`

	// Conversion rate formatted to appropriate decimal places.
	RateDisplay *string `json:"rate_display,omitempty"`

	// Type of rate, fixed or floating.
	RateType *P2PAdvertInfoResponseP2PAdvertInfoRateType `json:"rate_type,omitempty"`

	// Amount currently available for orders, in `account_currency`. It is only
	// visible for advertisers.
	RemainingAmount *float64 `json:"remaining_amount,omitempty"`

	// Amount currently available for orders, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	RemainingAmountDisplay *string `json:"remaining_amount_display,omitempty"`

	// Whether this is a buy or a sell.
	Type *P2PAdvertInfoResponseP2PAdvertInfoType `json:"type,omitempty"`

	// Reasons why an advert is not visible, only visible to the advert owner.
	// Possible values:
	// - `advert_inactive`: the advert is set inactive.
	// - `advert_max_limit`: the minimum order amount exceeds the system maximum
	// order.
	// - `advert_min_limit`: the maximum order amount is too small to be shown on the
	// advert list.
	// - `advert_remaining`: the remaining amount of the advert is below the minimum
	// order.
	// - `advertiser_ads_paused`: the advertiser has paused all adverts.
	// - `advertiser_approval`: the advertiser's proof of identity is not verified.
	// - `advertiser_balance`: the advertiser's P2P balance is less than the minimum
	// order.
	// - `advertiser_daily_limit`: the advertiser's remaining daily limit is less than
	// the minimum order.
	// - `advertiser_temp_ban`: the advertiser is temporarily banned from P2P.
	VisibilityStatus []P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem `json:"visibility_status,omitempty"`
}

// Details of the advertiser for this advert.
type P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetails struct {
	// The total number of orders completed in the past 30 days.
	CompletedOrdersCount int `json:"completed_orders_count"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates that the advertiser is blocked by the current user.
	IsBlocked *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked `json:"is_blocked,omitempty"`

	// Indicates that the advertiser is a favourite of the current user.
	IsFavourite *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite `json:"is_favourite,omitempty"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The percentage of successfully completed orders made by or placed against the
	// advertiser within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`
}

type P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked int

type P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite int

type P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline int

type P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended struct {
	Value interface{}
}

type P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType string

const P2PAdvertInfoResponseP2PAdvertInfoCounterpartyTypeBuy P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType = "buy"
const P2PAdvertInfoResponseP2PAdvertInfoCounterpartyTypeSell P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType = "sell"

type P2PAdvertInfoResponseP2PAdvertInfoDeleted int

type P2PAdvertInfoResponseP2PAdvertInfoIsActive int

type P2PAdvertInfoResponseP2PAdvertInfoIsVisible int

// Details of available payment methods (sell adverts only).
type P2PAdvertInfoResponseP2PAdvertInfoPaymentMethodDetails map[string]interface{}

type P2PAdvertInfoResponseP2PAdvertInfoRateType string

const P2PAdvertInfoResponseP2PAdvertInfoRateTypeFixed P2PAdvertInfoResponseP2PAdvertInfoRateType = "fixed"
const P2PAdvertInfoResponseP2PAdvertInfoRateTypeFloat P2PAdvertInfoResponseP2PAdvertInfoRateType = "float"

type P2PAdvertInfoResponseP2PAdvertInfoType string

const P2PAdvertInfoResponseP2PAdvertInfoTypeBuy P2PAdvertInfoResponseP2PAdvertInfoType = "buy"
const P2PAdvertInfoResponseP2PAdvertInfoTypeSell P2PAdvertInfoResponseP2PAdvertInfoType = "sell"

type P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem string

const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertInactive P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advert_inactive"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertMaxLimit P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advert_max_limit"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertMinLimit P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advert_min_limit"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertRemaining P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advert_remaining"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertiserAdsPaused P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advertiser_ads_paused"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertiserApproval P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advertiser_approval"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertiserBalance P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advertiser_balance"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertiserDailyLimit P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advertiser_daily_limit"
const P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElemAdvertiserTempBan P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = "advertiser_temp_ban"

// For subscription requests only.
type P2PAdvertInfoResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Returns available adverts for use with `p2p_order_create` .
type P2PAdvertListRequest struct {
	// [Optional] ID of the advertiser to list adverts for.
	AdvertiserId *string `json:"advertiser_id,omitempty"`

	// [Optional] Search for advertiser by name. Partial matches will be returned.
	AdvertiserName *string `json:"advertiser_name,omitempty"`

	// [Optional] How much to buy or sell, used to calculate prices.
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Filter the adverts by `counterparty_type`.
	CounterpartyType *P2PAdvertListRequestCounterpartyType `json:"counterparty_type,omitempty"`

	// [Optional] Only show adverts from favourite advertisers. Default is 0.
	FavouritesOnly *P2PAdvertListRequestFavouritesOnly `json:"favourites_only,omitempty"`

	// [Optional] Used for paging.
	Limit int `json:"limit,omitempty"`

	// [Optional] Currency to conduct payment transaction in. If not provided, only
	// ads from country of residence will be returned.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// [Optional] Used for paging.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2PAdvertList P2PAdvertListRequestP2PAdvertList `json:"p2p_advert_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Search by supported payment methods.
	PaymentMethod []string `json:"payment_method,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] How the results are sorted.
	SortBy P2PAdvertListRequestSortBy `json:"sort_by,omitempty"`

	// [Optional] If set to 1, ads that exceed this account's balance or turnover
	// limits will not be shown.
	UseClientLimits P2PAdvertListRequestUseClientLimits `json:"use_client_limits,omitempty"`
}

type P2PAdvertListRequestCounterpartyType string

const P2PAdvertListRequestCounterpartyTypeBuy P2PAdvertListRequestCounterpartyType = "buy"
const P2PAdvertListRequestCounterpartyTypeSell P2PAdvertListRequestCounterpartyType = "sell"

type P2PAdvertListRequestFavouritesOnly int

type P2PAdvertListRequestP2PAdvertList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertListRequestPassthrough map[string]interface{}

type P2PAdvertListRequestSortBy string

const P2PAdvertListRequestSortByCompletion P2PAdvertListRequestSortBy = "completion"
const P2PAdvertListRequestSortByRate P2PAdvertListRequestSortBy = "rate"
const P2PAdvertListRequestSortByRating P2PAdvertListRequestSortBy = "rating"
const P2PAdvertListRequestSortByRecommended P2PAdvertListRequestSortBy = "recommended"

type P2PAdvertListRequestUseClientLimits int

// Available adverts matching the requested criteria.
type P2PAdvertListResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertListResponseMsgType `json:"msg_type"`

	// P2P adverts list.
	P2PAdvertList *P2PAdvertListResponseP2PAdvertList `json:"p2p_advert_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertListResponseEchoReq map[string]interface{}

type P2PAdvertListResponseMsgType string

const P2PAdvertListResponseMsgTypeP2PAdvertList P2PAdvertListResponseMsgType = "p2p_advert_list"

// P2P adverts list.
type P2PAdvertListResponseP2PAdvertList struct {
	// List of adverts.
	List []P2PAdvertListResponseP2PAdvertListListElem `json:"list"`
}

type P2PAdvertListResponseP2PAdvertListListElem struct {
	// Currency for this advert. This is the system currency to be transferred between
	// advertiser and client.
	AccountCurrency string `json:"account_currency"`

	// The number of active orders against this advert.
	ActiveOrders *int `json:"active_orders,omitempty"`

	// Details of the advertiser for this advert.
	AdvertiserDetails P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetails `json:"advertiser_details"`

	// The total amount specified in advert, in `account_currency`. It is only visible
	// to the advert owner.
	Amount *float64 `json:"amount,omitempty"`

	// The total amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	AmountDisplay *string `json:"amount_display,omitempty"`

	// Advertiser contact information. Only applicable for 'sell adverts'.
	ContactInfo *string `json:"contact_info,omitempty"`

	// Type of transaction from the opposite party's perspective.
	CounterpartyType P2PAdvertListResponseP2PAdvertListListElemCounterpartyType `json:"counterparty_type"`

	// The target country code of the advert.
	Country string `json:"country"`

	// The advert creation time in epoch.
	CreatedTime int `json:"created_time"`

	// Days until automatic inactivation of this ad, if no activity occurs.
	DaysUntilArchive *int `json:"days_until_archive,omitempty"`

	// General information about the advert.
	Description string `json:"description"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable.
	EffectiveRate interface{} `json:"effective_rate"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable, formatted to appropriate decimal places.
	EffectiveRateDisplay interface{} `json:"effective_rate_display"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// The activation status of the advert.
	IsActive P2PAdvertListResponseP2PAdvertListListElemIsActive `json:"is_active"`

	// Indicates that this advert will appear on the main advert list.
	IsVisible P2PAdvertListResponseP2PAdvertListListElemIsVisible `json:"is_visible"`

	// Local currency for this advert. This is the form of payment to be arranged
	// directly between advertiser and client.
	LocalCurrency string `json:"local_currency"`

	// Maximum order amount specified in advert, in `account_currency`. It is only
	// visible for advertisers.
	MaxOrderAmount *float64 `json:"max_order_amount,omitempty"`

	// Maximum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	MaxOrderAmountDisplay *string `json:"max_order_amount_display,omitempty"`

	// Maximum order amount at this time, in `account_currency`.
	MaxOrderAmountLimit float64 `json:"max_order_amount_limit"`

	// Maximum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountLimitDisplay string `json:"max_order_amount_limit_display"`

	// Minimum order amount specified in advert, in `account_currency`. It is only
	// visible for advertisers.
	MinOrderAmount *float64 `json:"min_order_amount,omitempty"`

	// Minimum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	MinOrderAmountDisplay *string `json:"min_order_amount_display,omitempty"`

	// Minimum order amount at this time, in `account_currency`.
	MinOrderAmountLimit float64 `json:"min_order_amount_limit"`

	// Minimum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountLimitDisplay string `json:"min_order_amount_limit_display"`

	// Payment instructions. Only applicable for 'sell adverts'.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Payment method name (deprecated).
	PaymentMethod interface{} `json:"payment_method"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost of the advert in local currency.
	Price interface{} `json:"price"`

	// Cost of the advert in local currency, formatted to appropriate decimal places.
	PriceDisplay interface{} `json:"price_display"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate float64 `json:"rate"`

	// Conversion rate formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Type of rate, fixed or floating.
	RateType P2PAdvertListResponseP2PAdvertListListElemRateType `json:"rate_type"`

	// Amount currently available for orders, in `account_currency`. It is only
	// visible to the advert owner.
	RemainingAmount *float64 `json:"remaining_amount,omitempty"`

	// Amount currently available for orders, in `account_currency`, formatted to
	// appropriate decimal places. It is only visible to the advert owner.
	RemainingAmountDisplay *string `json:"remaining_amount_display,omitempty"`

	// Whether this is a buy or a sell.
	Type P2PAdvertListResponseP2PAdvertListListElemType `json:"type"`

	// Reasons why an advert is not visible, only visible to the advert owner.
	// Possible values:
	// - `advert_inactive`: the advert is set inactive.
	// - `advert_max_limit`: the minimum order amount exceeds the system maximum
	// order.
	// - `advert_min_limit`: the maximum order amount is too small to be shown on the
	// advert list.
	// - `advert_remaining`: the remaining amount of the advert is below the minimum
	// order.
	// - `advertiser_ads_paused`: the advertiser has paused all adverts.
	// - `advertiser_approval`: the advertiser's proof of identity is not verified.
	// - `advertiser_balance`: the advertiser's P2P balance is less than the minimum
	// order.
	// - `advertiser_daily_limit`: the advertiser's remaining daily limit is less than
	// the minimum order.
	// - `advertiser_temp_ban`: the advertiser is temporarily banned from P2P.
	VisibilityStatus []P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem `json:"visibility_status,omitempty"`
}

// Details of the advertiser for this advert.
type P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetails struct {
	// The total number of orders completed in the past 30 days.
	CompletedOrdersCount int `json:"completed_orders_count"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates that the advertiser is blocked by the current user.
	IsBlocked *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked `json:"is_blocked,omitempty"`

	// Indicates that the advertiser is a favourite.
	IsFavourite *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite `json:"is_favourite,omitempty"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The percentage of successfully completed orders made by or placed against the
	// advertiser within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`
}

type P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked int

type P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite int

type P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline int

type P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended struct {
	Value interface{}
}

type P2PAdvertListResponseP2PAdvertListListElemCounterpartyType string

const P2PAdvertListResponseP2PAdvertListListElemCounterpartyTypeBuy P2PAdvertListResponseP2PAdvertListListElemCounterpartyType = "buy"
const P2PAdvertListResponseP2PAdvertListListElemCounterpartyTypeSell P2PAdvertListResponseP2PAdvertListListElemCounterpartyType = "sell"

type P2PAdvertListResponseP2PAdvertListListElemIsActive int

type P2PAdvertListResponseP2PAdvertListListElemIsVisible int

type P2PAdvertListResponseP2PAdvertListListElemRateType string

const P2PAdvertListResponseP2PAdvertListListElemRateTypeFixed P2PAdvertListResponseP2PAdvertListListElemRateType = "fixed"
const P2PAdvertListResponseP2PAdvertListListElemRateTypeFloat P2PAdvertListResponseP2PAdvertListListElemRateType = "float"

type P2PAdvertListResponseP2PAdvertListListElemType string

const P2PAdvertListResponseP2PAdvertListListElemTypeBuy P2PAdvertListResponseP2PAdvertListListElemType = "buy"
const P2PAdvertListResponseP2PAdvertListListElemTypeSell P2PAdvertListResponseP2PAdvertListListElemType = "sell"

type P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem string

const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertInactive P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advert_inactive"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertMaxLimit P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advert_max_limit"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertMinLimit P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advert_min_limit"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertRemaining P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advert_remaining"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertiserAdsPaused P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advertiser_ads_paused"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertiserApproval P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advertiser_approval"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertiserBalance P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advertiser_balance"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertiserDailyLimit P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advertiser_daily_limit"
const P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElemAdvertiserTempBan P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = "advertiser_temp_ban"

// Updates a P2P advert. Can only be used by the advertiser.
type P2PAdvertUpdateRequest struct {
	// [Optional] Advertiser contact information.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] If set to 1, permanently deletes the advert.
	Delete *P2PAdvertUpdateRequestDelete `json:"delete,omitempty"`

	// [Optional] General information about the advert.
	Description *string `json:"description,omitempty"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// [Optional] Activate or deactivate the advert.
	IsActive *P2PAdvertUpdateRequestIsActive `json:"is_active,omitempty"`

	// [Optional] Local currency for this advert.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// [Optional] Maximum allowed amount for the orders of this advert, in
	// advertiser's `account_currency`. Should be more than or equal to
	// `min_order_amount`.
	MaxOrderAmount *float64 `json:"max_order_amount,omitempty"`

	// [Optional] Minimum allowed amount for the orders of this advert, in
	// advertiser's `account_currency`. Should be less than or equal to
	// `max_order_amount`.
	MinOrderAmount *float64 `json:"min_order_amount,omitempty"`

	// Must be 1
	P2PAdvertUpdate P2PAdvertUpdateRequestP2PAdvertUpdate `json:"p2p_advert_update"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertUpdateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Payment instructions.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] IDs of previously saved payment methods as returned from
	// p2p_advertiser_payment_methods, only applicable for sell ads. Exisiting methods
	// will be replaced.
	PaymentMethodIds []int `json:"payment_method_ids,omitempty"`

	// [Optional] Payment method identifiers as returned from p2p_payment_methods,
	// only applicable for buy ads. Exisiting methods will be replaced.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// [Optional] Conversion rate from advertiser's account currency to
	// `local_currency`. An absolute rate value (fixed), or percentage offset from
	// current market rate (floating).
	Rate *float64 `json:"rate,omitempty"`

	// [Optional] Type of rate, fixed or floating.
	RateType *P2PAdvertUpdateRequestRateType `json:"rate_type,omitempty"`

	// [Optional] The total available amount of the advert, in advertiser's account
	// currency.
	RemainingAmount *float64 `json:"remaining_amount,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PAdvertUpdateRequestDelete int

type P2PAdvertUpdateRequestIsActive int

type P2PAdvertUpdateRequestP2PAdvertUpdate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertUpdateRequestPassthrough map[string]interface{}

type P2PAdvertUpdateRequestRateType string

const P2PAdvertUpdateRequestRateTypeFixed P2PAdvertUpdateRequestRateType = "fixed"
const P2PAdvertUpdateRequestRateTypeFloat P2PAdvertUpdateRequestRateType = "float"

// Returns information about the updated advert.
type P2PAdvertUpdateResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertUpdateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertUpdateResponseMsgType `json:"msg_type"`

	// P2P updated advert information.
	P2PAdvertUpdate *P2PAdvertUpdateResponseP2PAdvertUpdate `json:"p2p_advert_update,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertUpdateResponseEchoReq map[string]interface{}

type P2PAdvertUpdateResponseMsgType string

const P2PAdvertUpdateResponseMsgTypeP2PAdvertUpdate P2PAdvertUpdateResponseMsgType = "p2p_advert_update"

// P2P updated advert information.
type P2PAdvertUpdateResponseP2PAdvertUpdate struct {
	// Currency for this advert. This is the system currency to be transferred between
	// advertiser and client.
	AccountCurrency *string `json:"account_currency,omitempty"`

	// The number of active orders against this advert.
	ActiveOrders *int `json:"active_orders,omitempty"`

	// Details of the advertiser for this advert.
	AdvertiserDetails *P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetails `json:"advertiser_details,omitempty"`

	// The total amount specified in advert, in `account_currency`.
	Amount *float64 `json:"amount,omitempty"`

	// The total amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	AmountDisplay *string `json:"amount_display,omitempty"`

	// Advertiser contact information. Only applicable for 'sell adverts'.
	ContactInfo *string `json:"contact_info,omitempty"`

	// Type of transaction from the opposite party's perspective.
	CounterpartyType *P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType `json:"counterparty_type,omitempty"`

	// The target country code of the advert.
	Country *string `json:"country,omitempty"`

	// The advert creation time in epoch.
	CreatedTime *int `json:"created_time,omitempty"`

	// Days until automatic inactivation of this ad, if no activity occurs.
	DaysUntilArchive *int `json:"days_until_archive,omitempty"`

	// Indicates that the advert has been deleted.
	Deleted *P2PAdvertUpdateResponseP2PAdvertUpdateDeleted `json:"deleted,omitempty"`

	// General information about the advert.
	Description *string `json:"description,omitempty"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable.
	EffectiveRate interface{} `json:"effective_rate,omitempty"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable, formatted to appropriate decimal places.
	EffectiveRateDisplay interface{} `json:"effective_rate_display,omitempty"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// The activation status of the advert.
	IsActive *P2PAdvertUpdateResponseP2PAdvertUpdateIsActive `json:"is_active,omitempty"`

	// Indicates that this advert will appear on the main advert list.
	IsVisible P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible `json:"is_visible,omitempty"`

	// Local currency for this advert. This is the form of payment to be arranged
	// directly between advertiser and client.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// Maximum order amount specified in advert, in `account_currency`.
	MaxOrderAmount *float64 `json:"max_order_amount,omitempty"`

	// Maximum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountDisplay *string `json:"max_order_amount_display,omitempty"`

	// Maximum order amount at this time, in `account_currency`.
	MaxOrderAmountLimit *float64 `json:"max_order_amount_limit,omitempty"`

	// Maximum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountLimitDisplay *string `json:"max_order_amount_limit_display,omitempty"`

	// Minimum order amount specified in advert, in `account_currency`. It is only
	// visible to the advert owner.
	MinOrderAmount *float64 `json:"min_order_amount,omitempty"`

	// Minimum order amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountDisplay *string `json:"min_order_amount_display,omitempty"`

	// Minimum order amount at this time, in `account_currency`.
	MinOrderAmountLimit *float64 `json:"min_order_amount_limit,omitempty"`

	// Minimum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountLimitDisplay *string `json:"min_order_amount_limit_display,omitempty"`

	// Payment instructions. Only applicable for 'sell adverts'.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Payment method name (deprecated).
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Details of available payment methods (sell adverts only).
	PaymentMethodDetails P2PAdvertUpdateResponseP2PAdvertUpdatePaymentMethodDetails `json:"payment_method_details,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost of the advert in local currency.
	Price interface{} `json:"price,omitempty"`

	// Cost of the advert in local currency, formatted to appropriate decimal places.
	PriceDisplay interface{} `json:"price_display,omitempty"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate *float64 `json:"rate,omitempty"`

	// Conversion rate formatted to appropriate decimal places.
	RateDisplay *string `json:"rate_display,omitempty"`

	// Type of rate, fixed or floating.
	RateType *P2PAdvertUpdateResponseP2PAdvertUpdateRateType `json:"rate_type,omitempty"`

	// Amount currently available for orders, in `account_currency`.
	RemainingAmount *float64 `json:"remaining_amount,omitempty"`

	// Amount currently available for orders, in `account_currency`, formatted to
	// appropriate decimal places.
	RemainingAmountDisplay *string `json:"remaining_amount_display,omitempty"`

	// Whether this is a buy or a sell.
	Type *P2PAdvertUpdateResponseP2PAdvertUpdateType `json:"type,omitempty"`

	// Reasons why an advert is not visible. Possible values:
	// - `advert_inactive`: the advert is set inactive.
	// - `advert_max_limit`: the minimum order amount exceeds the system maximum
	// order.
	// - `advert_min_limit`: the maximum order amount is too small to be shown on the
	// advert list.
	// - `advert_remaining`: the remaining amount of the advert is below the minimum
	// order.
	// - `advertiser_ads_paused`: the advertiser has paused all adverts.
	// - `advertiser_approval`: the advertiser's proof of identity is not verified.
	// - `advertiser_balance`: the advertiser's P2P balance is less than the minimum
	// order.
	// - `advertiser_daily_limit`: the advertiser's remaining daily limit is less than
	// the minimum order.
	// - `advertiser_temp_ban`: the advertiser is temporarily banned from P2P.
	VisibilityStatus []P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem `json:"visibility_status,omitempty"`
}

// Details of the advertiser for this advert.
type P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetails struct {
	// The total number of orders completed in the past 30 days.
	CompletedOrdersCount int `json:"completed_orders_count"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The percentage of successfully completed orders made by or placed against the
	// advertiser within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`
}

type P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline int

type P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType string

const P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyTypeBuy P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType = "buy"
const P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyTypeSell P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType = "sell"

type P2PAdvertUpdateResponseP2PAdvertUpdateDeleted int

type P2PAdvertUpdateResponseP2PAdvertUpdateIsActive int

type P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible int

// Details of available payment methods (sell adverts only).
type P2PAdvertUpdateResponseP2PAdvertUpdatePaymentMethodDetails map[string]interface{}

type P2PAdvertUpdateResponseP2PAdvertUpdateRateType string

const P2PAdvertUpdateResponseP2PAdvertUpdateRateTypeFixed P2PAdvertUpdateResponseP2PAdvertUpdateRateType = "fixed"
const P2PAdvertUpdateResponseP2PAdvertUpdateRateTypeFloat P2PAdvertUpdateResponseP2PAdvertUpdateRateType = "float"

type P2PAdvertUpdateResponseP2PAdvertUpdateType string

const P2PAdvertUpdateResponseP2PAdvertUpdateTypeBuy P2PAdvertUpdateResponseP2PAdvertUpdateType = "buy"
const P2PAdvertUpdateResponseP2PAdvertUpdateTypeSell P2PAdvertUpdateResponseP2PAdvertUpdateType = "sell"

type P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem string

const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertInactive P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advert_inactive"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertMaxLimit P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advert_max_limit"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertMinLimit P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advert_min_limit"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertRemaining P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advert_remaining"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertiserAdsPaused P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advertiser_ads_paused"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertiserApproval P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advertiser_approval"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertiserBalance P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advertiser_balance"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertiserDailyLimit P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advertiser_daily_limit"
const P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElemAdvertiserTempBan P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = "advertiser_temp_ban"

// Returns all P2P adverts created by the authorized client. Can only be used by a
// registered P2P advertiser.
type P2PAdvertiserAdvertsRequest struct {
	// [Optional] Used for paging. This value will also apply to subsription
	// responses.
	Limit int `json:"limit,omitempty"`

	// [Optional] Used for paging. This value will also apply to subsription
	// responses.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2PAdvertiserAdverts P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts `json:"p2p_advertiser_adverts"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserAdvertsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserAdvertsRequestPassthrough map[string]interface{}

// All adverts belonging to the current advertiser.
type P2PAdvertiserAdvertsResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserAdvertsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserAdvertsResponseMsgType `json:"msg_type"`

	// List of the P2P advertiser adverts.
	P2PAdvertiserAdverts *P2PAdvertiserAdvertsResponseP2PAdvertiserAdverts `json:"p2p_advertiser_adverts,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserAdvertsResponseEchoReq map[string]interface{}

type P2PAdvertiserAdvertsResponseMsgType string

const P2PAdvertiserAdvertsResponseMsgTypeP2PAdvertiserAdverts P2PAdvertiserAdvertsResponseMsgType = "p2p_advertiser_adverts"

// List of the P2P advertiser adverts.
type P2PAdvertiserAdvertsResponseP2PAdvertiserAdverts struct {
	// List of advertiser adverts.
	List []P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElem `json:"list"`
}

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElem struct {
	// Currency for this advert. This is the system currency to be transferred between
	// advertiser and client.
	AccountCurrency string `json:"account_currency"`

	// The number of active orders against this advert.
	ActiveOrders int `json:"active_orders"`

	// Details of the advertiser for this advert.
	AdvertiserDetails P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetails `json:"advertiser_details"`

	// The total amount specified in advert, in `account_currency`.
	Amount float64 `json:"amount"`

	// The total amount specified in advert, in `account_currency`, formatted to
	// appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// Advertiser contact information. Only applicable for 'sell adverts'.
	ContactInfo string `json:"contact_info"`

	// This is the type of transaction from the counterparty's perspective.
	CounterpartyType P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType `json:"counterparty_type"`

	// The target country code of the advert.
	Country string `json:"country"`

	// The advert creation time in epoch.
	CreatedTime int `json:"created_time"`

	// Days until automatic inactivation of this ad, if no activity occurs.
	DaysUntilArchive *int `json:"days_until_archive,omitempty"`

	// General information about the advert.
	Description string `json:"description"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable.
	EffectiveRate interface{} `json:"effective_rate"`

	// Conversion rate from account currency to local currency, using current market
	// rate if applicable, formatted to appropriate decimal places.
	EffectiveRateDisplay interface{} `json:"effective_rate_display"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// The activation status of the advert.
	IsActive P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive `json:"is_active"`

	// Indicates that this advert will appear on the main advert list.
	IsVisible P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible `json:"is_visible"`

	// Local currency for this advert. This is the form of payment to be arranged
	// directly between advertiser and client.
	LocalCurrency string `json:"local_currency"`

	// Maximum order amount, in `account_currency`.
	MaxOrderAmount float64 `json:"max_order_amount"`

	// Maximum order amount, in `account_currency`, formatted to appropriate decimal
	// places.
	MaxOrderAmountDisplay string `json:"max_order_amount_display"`

	// Maximum order amount at this time, in `account_currency`.
	MaxOrderAmountLimit float64 `json:"max_order_amount_limit"`

	// Maximum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MaxOrderAmountLimitDisplay string `json:"max_order_amount_limit_display"`

	// Minimum order amount, in `account_currency`.
	MinOrderAmount float64 `json:"min_order_amount"`

	// Minimum order amount, in `account_currency`, formatted to appropriate decimal
	// places.
	MinOrderAmountDisplay string `json:"min_order_amount_display"`

	// Minimum order amount at this time, in `account_currency`.
	MinOrderAmountLimit float64 `json:"min_order_amount_limit"`

	// Minimum order amount at this time, in `account_currency`, formatted to
	// appropriate decimal places.
	MinOrderAmountLimitDisplay string `json:"min_order_amount_limit_display"`

	// Payment instructions. Only applicable for 'sell adverts'.
	PaymentInfo string `json:"payment_info"`

	// Payment method name (deprecated).
	PaymentMethod interface{} `json:"payment_method"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost of the advert in local currency.
	Price interface{} `json:"price"`

	// Cost of the advert in local currency, formatted to appropriate decimal places.
	PriceDisplay interface{} `json:"price_display"`

	// Conversion rate from advertiser's account currency to `local_currency`. An
	// absolute rate value (fixed), or percentage offset from current market rate
	// (floating).
	Rate float64 `json:"rate"`

	// Conversion rate formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Type of rate, fixed or floating.
	RateType P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType `json:"rate_type"`

	// Amount currently available for orders, in `account_currency`.
	RemainingAmount float64 `json:"remaining_amount"`

	// Amount currently available for orders, in `account_currency`, formatted to
	// appropriate decimal places.
	RemainingAmountDisplay string `json:"remaining_amount_display"`

	// Whether this is a buy or a sell.
	Type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType `json:"type"`

	// Reasons why an advert is not visible. Possible values:
	// - `advert_inactive`: the advert is set inactive.
	// - `advert_max_limit`: the minimum order amount exceeds the system maximum
	// order.
	// - `advert_min_limit`: the maximum order amount is too small to be shown on the
	// advert list.
	// - `advert_remaining`: the remaining amount of the advert is below the minimum
	// order.
	// - `advertiser_ads_paused`: the advertiser has paused all adverts.
	// - `advertiser_approval`: the advertiser's proof of identity is not verified.
	// - `advertiser_balance`: the advertiser's P2P balance is less than the minimum
	// order.
	// - `advertiser_daily_limit`: the advertiser's remaining daily limit is less than
	// the minimum order.
	// - `advertiser_temp_ban`: the advertiser is temporarily banned from P2P.
	VisibilityStatus []P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem `json:"visibility_status,omitempty"`
}

// Details of the advertiser for this advert.
type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetails struct {
	// The total number of orders completed in the past 30 days.
	CompletedOrdersCount int `json:"completed_orders_count"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The percentage of successfully completed orders made by or placed against the
	// advertiser within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`
}

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline int

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType string

const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyTypeBuy P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType = "buy"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyTypeSell P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType = "sell"

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive int

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible int

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType string

const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateTypeFixed P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType = "fixed"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateTypeFloat P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType = "float"

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType string

const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemTypeBuy P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType = "buy"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemTypeSell P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType = "sell"

type P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem string

const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertInactive P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advert_inactive"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertMaxLimit P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advert_max_limit"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertMinLimit P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advert_min_limit"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertRemaining P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advert_remaining"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertiserAdsPaused P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advertiser_ads_paused"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertiserApproval P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advertiser_approval"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertiserBalance P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advertiser_balance"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertiserDailyLimit P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advertiser_daily_limit"
const P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElemAdvertiserTempBan P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = "advertiser_temp_ban"

// Registers the client as a P2P advertiser.
type P2PAdvertiserCreateRequest struct {
	// [Optional] Advertiser's contact information, to be used as a default for new
	// sell adverts.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] Default description that can be used every time an advert is
	// created.
	DefaultAdvertDescription *string `json:"default_advert_description,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Must be 1
	P2PAdvertiserCreate P2PAdvertiserCreateRequestP2PAdvertiserCreate `json:"p2p_advertiser_create"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserCreateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Advertiser's payment information, to be used as a default for new
	// sell adverts.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to
	// advertiser
	Subscribe *P2PAdvertiserCreateRequestSubscribe `json:"subscribe,omitempty"`
}

type P2PAdvertiserCreateRequestP2PAdvertiserCreate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserCreateRequestPassthrough map[string]interface{}

type P2PAdvertiserCreateRequestSubscribe int

// Returns information of the created advertiser.
type P2PAdvertiserCreateResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserCreateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserCreateResponseMsgType `json:"msg_type"`

	// P2P advertiser information.
	P2PAdvertiserCreate *P2PAdvertiserCreateResponseP2PAdvertiserCreate `json:"p2p_advertiser_create,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2PAdvertiserCreateResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserCreateResponseEchoReq map[string]interface{}

type P2PAdvertiserCreateResponseMsgType string

const P2PAdvertiserCreateResponseMsgTypeP2PAdvertiserCreate P2PAdvertiserCreateResponseMsgType = "p2p_advertiser_create"

// P2P advertiser information.
type P2PAdvertiserCreateResponseP2PAdvertiserCreate struct {
	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates interface{} `json:"advert_rates"`

	// Amount of funds available to sell on P2P. May be less than account balance
	// according to deposit methods used.
	BalanceAvailable float64 `json:"balance_available"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification `json:"basic_verification"`

	// The number of P2P users who have blocked this advertiser.
	BlockedByCount int `json:"blocked_by_count"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate interface{} `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg interface{} `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg interface{} `json:"cancel_time_avg"`

	// The number of times the user may cancel orders before being temporarily
	// blocked.
	CancelsRemaining int `json:"cancels_remaining"`

	// The token to be used for authenticating the client for chat.
	ChatToken interface{} `json:"chat_token"`

	// The unique identifier for the chat user.
	ChatUserId interface{} `json:"chat_user_id"`

	// Advertiser's contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time that the client became an advertiser.
	CreatedTime int `json:"created_time"`

	// Total value of P2P buy transactions in the past 24 hours.
	DailyBuy *string `json:"daily_buy,omitempty"`

	// Maximum allowed value of P2P buy transactions in a 24 hour period.
	DailyBuyLimit *string `json:"daily_buy_limit,omitempty"`

	// Total value of P2P sell transactions in the past 24 hours.
	DailySell *string `json:"daily_sell,omitempty"`

	// Maximum allowed value of P2P sell transactions in a 24 hour period.
	DailySellLimit *string `json:"daily_sell_limit,omitempty"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved `json:"is_approved"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline `json:"is_online"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// Maximum order amount for adverts.
	MaxOrderAmount *string `json:"max_order_amount,omitempty"`

	// Sell ads will be hidden when your available balance or remaining daily sell
	// limit falls beneath this value.
	MinBalance *string `json:"min_balance,omitempty"`

	// Minimum order amount for adverts.
	MinOrderAmount *string `json:"min_order_amount,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Advertiser's payment information.
	PaymentInfo string `json:"payment_info"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg interface{} `json:"release_time_avg"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate interface{} `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// When `1`, the advertiser's real name will be displayed to other users on
	// adverts and orders.
	ShowName P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName `json:"show_name"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`

	// Remaining withdrawal_limit of a non-fully authenticated advertiser.
	WithdrawalLimit interface{} `json:"withdrawal_limit,omitempty"`
}

type P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification int

type P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification int

type P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved int

type P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed int

type P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline int

type P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName int

// For subscription requests only.
type P2PAdvertiserCreateResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Retrieve information about a P2P advertiser.
type P2PAdvertiserInfoRequest struct {
	// [Optional] The unique identifier for this advertiser. If not provided, returns
	// advertiser information about the current account.
	Id *string `json:"id,omitempty"`

	// Must be 1
	P2PAdvertiserInfo P2PAdvertiserInfoRequestP2PAdvertiserInfo `json:"p2p_advertiser_info"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserInfoRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to
	// advertiser
	Subscribe *P2PAdvertiserInfoRequestSubscribe `json:"subscribe,omitempty"`
}

type P2PAdvertiserInfoRequestP2PAdvertiserInfo int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserInfoRequestPassthrough map[string]interface{}

type P2PAdvertiserInfoRequestSubscribe int

// Returns information about the given advertiser ID.
type P2PAdvertiserInfoResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserInfoResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserInfoResponseMsgType `json:"msg_type"`

	// P2P advertiser information.
	P2PAdvertiserInfo *P2PAdvertiserInfoResponseP2PAdvertiserInfo `json:"p2p_advertiser_info,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2PAdvertiserInfoResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserInfoResponseEchoReq map[string]interface{}

type P2PAdvertiserInfoResponseMsgType string

const P2PAdvertiserInfoResponseMsgTypeP2PAdvertiserInfo P2PAdvertiserInfoResponseMsgType = "p2p_advertiser_info"

// P2P advertiser information.
type P2PAdvertiserInfoResponseP2PAdvertiserInfo struct {
	// Number of active fixed rate adverts belonging to the advertiser.
	ActiveFixedAds *int `json:"active_fixed_ads,omitempty"`

	// Number of active floating rate adverts belonging to the advertiser.
	ActiveFloatAds *int `json:"active_float_ads,omitempty"`

	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates interface{} `json:"advert_rates"`

	// Amount of funds available to sell on P2P. May be less than account balance
	// according to deposit methods used.
	BalanceAvailable *float64 `json:"balance_available,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification `json:"basic_verification"`

	// The number of P2P users who have blocked this advertiser.
	BlockedByCount *int `json:"blocked_by_count,omitempty"`

	// If a temporary bar was placed, this is the epoch time at which it will end.
	BlockedUntil *int `json:"blocked_until,omitempty"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate interface{} `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg interface{} `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg interface{} `json:"cancel_time_avg"`

	// The number of times the user may cancel orders before being temporarily
	// blocked.
	CancelsRemaining *int `json:"cancels_remaining,omitempty"`

	// The token to be used for authenticating the client for chat.
	ChatToken interface{} `json:"chat_token,omitempty"`

	// The unique identifier for the chat user.
	ChatUserId interface{} `json:"chat_user_id,omitempty"`

	// Advertiser's contact information.
	ContactInfo *string `json:"contact_info,omitempty"`

	// The epoch time that the client became an advertiser.
	CreatedTime int `json:"created_time"`

	// Total value of P2P buy transactions in the past 24 hours.
	DailyBuy *string `json:"daily_buy,omitempty"`

	// Maximum allowed value of P2P buy transactions in a 24 hour period.
	DailyBuyLimit *string `json:"daily_buy_limit,omitempty"`

	// Total value of P2P sell transactions in the past 24 hours.
	DailySell *string `json:"daily_sell,omitempty"`

	// Maximum allowed value of P2P sell transactions in a 24 hour period.
	DailySellLimit *string `json:"daily_sell_limit,omitempty"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved `json:"is_approved"`

	// Indicates that the advertiser is blocked by the current user.
	IsBlocked *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked `json:"is_blocked,omitempty"`

	// Indicates that the advertiser is a favourite of the current user
	IsFavourite *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite `json:"is_favourite,omitempty"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// Maximum order amount for adverts.
	MaxOrderAmount *string `json:"max_order_amount,omitempty"`

	// Sell ads will be hidden when your available balance or remaining daily sell
	// limit falls beneath this value.
	MinBalance *string `json:"min_balance,omitempty"`

	// Minimum order amount for adverts.
	MinOrderAmount *string `json:"min_order_amount,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Advertiser's payment information.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg interface{} `json:"release_time_avg"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate interface{} `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// When `1`, the advertiser's real name will be displayed on to other users on
	// adverts and orders.
	ShowName *P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName `json:"show_name,omitempty"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`

	// New daily limits available.
	UpgradableDailyLimits *P2PAdvertiserInfoResponseP2PAdvertiserInfoUpgradableDailyLimits `json:"upgradable_daily_limits,omitempty"`

	// Remaining withdrawal_limit of a non-fully authenticated advertiser.
	WithdrawalLimit interface{} `json:"withdrawal_limit,omitempty"`
}

type P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline int

type P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended struct {
	Value interface{}
}

type P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName int

// New daily limits available.
type P2PAdvertiserInfoResponseP2PAdvertiserInfoUpgradableDailyLimits struct {
	// Upgradable daily buy limit.
	MaxDailyBuy string `json:"max_daily_buy"`

	// Upgradable daily sell limit.
	MaxDailySell string `json:"max_daily_sell"`
}

// For subscription requests only.
type P2PAdvertiserInfoResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Retrieve advertisers has/had trade with the current advertiser.
type P2PAdvertiserListRequest struct {
	// [Optional] Search for advertiser by name. Partial matches will be returned.
	AdvertiserName *string `json:"advertiser_name,omitempty"`

	// [Optional] Used to return only blocked or unblocked partners
	IsBlocked *P2PAdvertiserListRequestIsBlocked `json:"is_blocked,omitempty"`

	// [Optional] Used for paging.
	Limit int `json:"limit,omitempty"`

	// [Optional] Used for paging.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2PAdvertiserList P2PAdvertiserListRequestP2PAdvertiserList `json:"p2p_advertiser_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] How the results are sorted.
	SortBy P2PAdvertiserListRequestSortBy `json:"sort_by,omitempty"`

	// [Optional] Get all advertisers has/had trade.
	TradePartners *P2PAdvertiserListRequestTradePartners `json:"trade_partners,omitempty"`
}

type P2PAdvertiserListRequestIsBlocked int

type P2PAdvertiserListRequestP2PAdvertiserList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserListRequestPassthrough map[string]interface{}

type P2PAdvertiserListRequestSortBy string

const P2PAdvertiserListRequestSortById P2PAdvertiserListRequestSortBy = "id"
const P2PAdvertiserListRequestSortByName P2PAdvertiserListRequestSortBy = "name"

type P2PAdvertiserListRequestTradePartners int

// Retrieve advertisers has/had trade with the current advertiser.
type P2PAdvertiserListResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserListResponseMsgType `json:"msg_type"`

	// P2P advertiser list.
	P2PAdvertiserList *P2PAdvertiserListResponseP2PAdvertiserList `json:"p2p_advertiser_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserListResponseEchoReq map[string]interface{}

type P2PAdvertiserListResponseMsgType string

const P2PAdvertiserListResponseMsgTypeP2PAdvertiserList P2PAdvertiserListResponseMsgType = "p2p_advertiser_list"

// P2P advertiser list.
type P2PAdvertiserListResponseP2PAdvertiserList struct {
	// List of advertisers.
	List []P2PAdvertiserListResponseP2PAdvertiserListListElem `json:"list"`
}

type P2PAdvertiserListResponseP2PAdvertiserListListElem struct {
	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates interface{} `json:"advert_rates"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification `json:"basic_verification"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate interface{} `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg interface{} `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg interface{} `json:"cancel_time_avg"`

	// The epoch time that the trade partner became an advertiser.
	CreatedTime int `json:"created_time"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved `json:"is_approved"`

	// Indicates that the advertiser is blocked by the current user.
	IsBlocked P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked `json:"is_blocked"`

	// Indicates if the trade partner is favourited by requester.
	IsFavourite *P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite `json:"is_favourite,omitempty"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline `json:"is_online"`

	// Indicates if the trade partner is recommended by requester.
	IsRecommended *P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg interface{} `json:"release_time_avg"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate interface{} `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`
}

type P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification int

type P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline int

type P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended int

// Manage or list P2P advertiser payment methods.
type P2PAdvertiserPaymentMethodsRequest struct {
	// Contains new payment method entries.
	Create []P2PAdvertiserPaymentMethodsRequestCreateElem `json:"create,omitempty"`

	// Contains payment methods to delete.
	Delete []float64 `json:"delete,omitempty"`

	// Must be 1
	P2PAdvertiserPaymentMethods P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods `json:"p2p_advertiser_payment_methods"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserPaymentMethodsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Contains payment methods to update.
	Update P2PAdvertiserPaymentMethodsRequestUpdate `json:"update,omitempty"`
}

type P2PAdvertiserPaymentMethodsRequestCreateElem struct {
	// Payment method identifer.
	Method string `json:"method"`
}

type P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserPaymentMethodsRequestPassthrough map[string]interface{}

// Contains payment methods to update.
type P2PAdvertiserPaymentMethodsRequestUpdate map[string]interface{}

// List P2P advertiser payment methods.
type P2PAdvertiserPaymentMethodsResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserPaymentMethodsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserPaymentMethodsResponseMsgType `json:"msg_type"`

	// List of current methods.
	P2PAdvertiserPaymentMethods P2PAdvertiserPaymentMethodsResponseP2PAdvertiserPaymentMethods `json:"p2p_advertiser_payment_methods,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserPaymentMethodsResponseEchoReq map[string]interface{}

type P2PAdvertiserPaymentMethodsResponseMsgType string

const P2PAdvertiserPaymentMethodsResponseMsgTypeP2PAdvertiserPaymentMethods P2PAdvertiserPaymentMethodsResponseMsgType = "p2p_advertiser_payment_methods"

// List of current methods.
type P2PAdvertiserPaymentMethodsResponseP2PAdvertiserPaymentMethods map[string]interface{}

// Updates and returns favourite and blocked advertisers of the current user.
type P2PAdvertiserRelationsRequest struct {
	// IDs of advertisers to block.
	AddBlocked []float64 `json:"add_blocked,omitempty"`

	// IDs of advertisers to add as favourites.
	AddFavourites []float64 `json:"add_favourites,omitempty"`

	// Must be 1
	P2PAdvertiserRelations P2PAdvertiserRelationsRequestP2PAdvertiserRelations `json:"p2p_advertiser_relations"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserRelationsRequestPassthrough `json:"passthrough,omitempty"`

	// IDs of advertisers to remove from blocked.
	RemoveBlocked []float64 `json:"remove_blocked,omitempty"`

	// IDs of advertisers to remove from favourites.
	RemoveFavourites []float64 `json:"remove_favourites,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PAdvertiserRelationsRequestP2PAdvertiserRelations int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserRelationsRequestPassthrough map[string]interface{}

// Returns information about favourite and blocked advertisers.
type P2PAdvertiserRelationsResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserRelationsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserRelationsResponseMsgType `json:"msg_type"`

	// P2P advertiser relations information.
	P2PAdvertiserRelations *P2PAdvertiserRelationsResponseP2PAdvertiserRelations `json:"p2p_advertiser_relations,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserRelationsResponseEchoReq map[string]interface{}

type P2PAdvertiserRelationsResponseMsgType string

const P2PAdvertiserRelationsResponseMsgTypeP2PAdvertiserRelations P2PAdvertiserRelationsResponseMsgType = "p2p_advertiser_relations"

// P2P advertiser relations information.
type P2PAdvertiserRelationsResponseP2PAdvertiserRelations struct {
	// List of advertisers blocked by the current user.
	BlockedAdvertisers []P2PAdvertiserRelationsResponseP2PAdvertiserRelationsBlockedAdvertisersElem `json:"blocked_advertisers"`

	// Favourite advertisers of the current user.
	FavouriteAdvertisers []P2PAdvertiserRelationsResponseP2PAdvertiserRelationsFavouriteAdvertisersElem `json:"favourite_advertisers"`
}

// Advertiser details.
type P2PAdvertiserRelationsResponseP2PAdvertiserRelationsBlockedAdvertisersElem struct {
	// The epoch time that the advertiser was blocked.
	CreatedTime *int `json:"created_time,omitempty"`

	// Advertiser unique identifer.
	Id *string `json:"id,omitempty"`

	// Advertiser displayed name.
	Name *string `json:"name,omitempty"`
}

// Advertiser details.
type P2PAdvertiserRelationsResponseP2PAdvertiserRelationsFavouriteAdvertisersElem struct {
	// The epoch time that the advertiser was set as favourite.
	CreatedTime *int `json:"created_time,omitempty"`

	// Advertiser unique identifer.
	Id *string `json:"id,omitempty"`

	// Advertiser displayed name.
	Name *string `json:"name,omitempty"`
}

// Update the information of the P2P advertiser for the current account. Can only
// be used by an approved P2P advertiser.
type P2PAdvertiserUpdateRequest struct {
	// [Optional] Advertiser's contact information, to be used as a default for new
	// sell adverts.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] Default description that can be used every time an advert is
	// created.
	DefaultAdvertDescription *string `json:"default_advert_description,omitempty"`

	// [Optional] Used to set if the advertiser's adverts could be listed. When `0`,
	// adverts won't be listed regardless of they are active or not. This doesn't
	// change the `is_active` of each individual advert.
	IsListed *P2PAdvertiserUpdateRequestIsListed `json:"is_listed,omitempty"`

	// Must be 1
	P2PAdvertiserUpdate P2PAdvertiserUpdateRequestP2PAdvertiserUpdate `json:"p2p_advertiser_update"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserUpdateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Advertiser's payment information, to be used as a default for new
	// sell adverts.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] When `1`, the advertiser's real name will be displayed on to other
	// users on adverts and orders.
	ShowName *P2PAdvertiserUpdateRequestShowName `json:"show_name,omitempty"`

	// [Optional] Used to upgrade daily limits of advertiser if advertiser is eligible
	UpgradeLimits *P2PAdvertiserUpdateRequestUpgradeLimits `json:"upgrade_limits,omitempty"`
}

type P2PAdvertiserUpdateRequestIsListed int

type P2PAdvertiserUpdateRequestP2PAdvertiserUpdate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserUpdateRequestPassthrough map[string]interface{}

type P2PAdvertiserUpdateRequestShowName int

type P2PAdvertiserUpdateRequestUpgradeLimits int

// Returns latest information of the advertiser.
type P2PAdvertiserUpdateResponse struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserUpdateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserUpdateResponseMsgType `json:"msg_type"`

	// P2P advertiser information.
	P2PAdvertiserUpdate *P2PAdvertiserUpdateResponseP2PAdvertiserUpdate `json:"p2p_advertiser_update,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PAdvertiserUpdateResponseEchoReq map[string]interface{}

type P2PAdvertiserUpdateResponseMsgType string

const P2PAdvertiserUpdateResponseMsgTypeP2PAdvertiserUpdate P2PAdvertiserUpdateResponseMsgType = "p2p_advertiser_update"

// P2P advertiser information.
type P2PAdvertiserUpdateResponseP2PAdvertiserUpdate struct {
	// Number of active fixed rate adverts belonging to the advertiser.
	ActiveFixedAds *int `json:"active_fixed_ads,omitempty"`

	// Number of active floating rate adverts belonging to the advertiser.
	ActiveFloatAds *int `json:"active_float_ads,omitempty"`

	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates interface{} `json:"advert_rates"`

	// Amount of funds available to sell on P2P. May be less than account balance
	// according to deposit methods used.
	BalanceAvailable float64 `json:"balance_available"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification `json:"basic_verification"`

	// The number of P2P users who have blocked this advertiser.
	BlockedByCount int `json:"blocked_by_count"`

	// If a temporary bar was placed, this is the epoch time at which it will end.
	BlockedUntil *int `json:"blocked_until,omitempty"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate interface{} `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg interface{} `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg interface{} `json:"cancel_time_avg"`

	// The number of times the user may cancel orders before being temporarily
	// blocked.
	CancelsRemaining int `json:"cancels_remaining"`

	// The token to be used for authenticating the client for chat.
	ChatToken interface{} `json:"chat_token"`

	// The unique identifier for the chat user.
	ChatUserId interface{} `json:"chat_user_id"`

	// Advertiser's contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time that the client became an advertiser.
	CreatedTime int `json:"created_time"`

	// Total value of P2P buy transactions in the past 24 hours.
	DailyBuy *string `json:"daily_buy,omitempty"`

	// Maximum allowed value of P2P buy transactions in a 24 hour period.
	DailyBuyLimit *string `json:"daily_buy_limit,omitempty"`

	// Total value of P2P sell transactions in the past 24 hours.
	DailySell *string `json:"daily_sell,omitempty"`

	// Maximum allowed value of P2P sell transactions in a 24 hour period.
	DailySellLimit *string `json:"daily_sell_limit,omitempty"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved `json:"is_approved"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// Maximum order amount for adverts.
	MaxOrderAmount *string `json:"max_order_amount,omitempty"`

	// Sell ads will be hidden when your available balance or remaining daily sell
	// limit falls beneath this value.
	MinBalance *string `json:"min_balance,omitempty"`

	// Minimum order amount for adverts.
	MinOrderAmount *string `json:"min_order_amount,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Advertiser's payment information.
	PaymentInfo string `json:"payment_info"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage interface{} `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage interface{} `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount interface{} `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg interface{} `json:"release_time_avg"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate interface{} `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// When `1`, the advertiser's real name will be displayed on to other users on
	// adverts and orders.
	ShowName P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName `json:"show_name"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate interface{} `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`

	// New daily limits available.
	UpgradableDailyLimits *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateUpgradableDailyLimits `json:"upgradable_daily_limits,omitempty"`

	// Remaining withdrawal_limit of a non-fully authenticated advertiser.
	WithdrawalLimit interface{} `json:"withdrawal_limit,omitempty"`
}

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification int

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification int

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved int

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed int

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline int

type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName int

// New daily limits available.
type P2PAdvertiserUpdateResponseP2PAdvertiserUpdateUpgradableDailyLimits struct {
	// Upgradable daily buy limit.
	MaxDailyBuy string `json:"max_daily_buy"`

	// Upgradable daily sell limit.
	MaxDailySell string `json:"max_daily_sell"`
}

// Creates a P2P chat for the specified order.
type P2PChatCreateRequest struct {
	// The unique identifier for the order to create the chat for.
	OrderId string `json:"order_id"`

	// Must be 1
	P2PChatCreate P2PChatCreateRequestP2PChatCreate `json:"p2p_chat_create"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PChatCreateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PChatCreateRequestP2PChatCreate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PChatCreateRequestPassthrough map[string]interface{}

// Information of the created P2P chat.
type P2PChatCreateResponse struct {
	// Echo of the request made.
	EchoReq P2PChatCreateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PChatCreateResponseMsgType `json:"msg_type"`

	// Information of the P2P chat.
	P2PChatCreate *P2PChatCreateResponseP2PChatCreate `json:"p2p_chat_create,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PChatCreateResponseEchoReq map[string]interface{}

type P2PChatCreateResponseMsgType string

const P2PChatCreateResponseMsgTypeP2PChatCreate P2PChatCreateResponseMsgType = "p2p_chat_create"

// Information of the P2P chat.
type P2PChatCreateResponseP2PChatCreate struct {
	// The URL to be used to initialise the chat for the requested order.
	ChannelUrl string `json:"channel_url"`

	// The unique identifier for the order that the chat belongs to.
	OrderId string `json:"order_id"`
}

// Cancel a P2P order.
type P2POrderCancelRequest struct {
	// The unique identifier for this order.
	Id string `json:"id"`

	// Must be 1
	P2POrderCancel P2POrderCancelRequestP2POrderCancel `json:"p2p_order_cancel"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderCancelRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2POrderCancelRequestP2POrderCancel int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderCancelRequestPassthrough map[string]interface{}

// Result of the P2P order cancellation.
type P2POrderCancelResponse struct {
	// Echo of the request made.
	EchoReq P2POrderCancelResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderCancelResponseMsgType `json:"msg_type"`

	// Cancellation details
	P2POrderCancel *P2POrderCancelResponseP2POrderCancel `json:"p2p_order_cancel,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderCancelResponseEchoReq map[string]interface{}

type P2POrderCancelResponseMsgType string

const P2POrderCancelResponseMsgTypeP2POrderCancel P2POrderCancelResponseMsgType = "p2p_order_cancel"

// Cancellation details
type P2POrderCancelResponseP2POrderCancel struct {
	// The unique identifier for the order.
	Id string `json:"id"`

	// The new status of the order.
	Status P2POrderCancelResponseP2POrderCancelStatus `json:"status"`
}

type P2POrderCancelResponseP2POrderCancelStatus string

const P2POrderCancelResponseP2POrderCancelStatusCancelled P2POrderCancelResponseP2POrderCancelStatus = "cancelled"

// Confirm a P2P order.
type P2POrderConfirmRequest struct {
	// [Optional] If set to `1`, only validation is performed.
	DryRun P2POrderConfirmRequestDryRun `json:"dry_run,omitempty"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// Must be 1
	P2POrderConfirm P2POrderConfirmRequestP2POrderConfirm `json:"p2p_order_confirm"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderConfirmRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Verification code received from email.
	VerificationCode *string `json:"verification_code,omitempty"`
}

type P2POrderConfirmRequestDryRun int

type P2POrderConfirmRequestP2POrderConfirm int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderConfirmRequestPassthrough map[string]interface{}

// Result of the P2P order confirmation.
type P2POrderConfirmResponse struct {
	// Echo of the request made.
	EchoReq P2POrderConfirmResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderConfirmResponseMsgType `json:"msg_type"`

	// Confirmation details
	P2POrderConfirm *P2POrderConfirmResponseP2POrderConfirm `json:"p2p_order_confirm,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderConfirmResponseEchoReq map[string]interface{}

type P2POrderConfirmResponseMsgType string

const P2POrderConfirmResponseMsgTypeP2POrderConfirm P2POrderConfirmResponseMsgType = "p2p_order_confirm"

// Confirmation details
type P2POrderConfirmResponseP2POrderConfirm struct {
	// The `dry_run` was successful.
	DryRun *P2POrderConfirmResponseP2POrderConfirmDryRun `json:"dry_run,omitempty"`

	// The unique identifier for the order.
	Id string `json:"id"`

	// The new status of the order.
	Status *P2POrderConfirmResponseP2POrderConfirmStatus `json:"status,omitempty"`
}

type P2POrderConfirmResponseP2POrderConfirmDryRun int

type P2POrderConfirmResponseP2POrderConfirmStatus string

const P2POrderConfirmResponseP2POrderConfirmStatusBuyerConfirmed P2POrderConfirmResponseP2POrderConfirmStatus = "buyer-confirmed"
const P2POrderConfirmResponseP2POrderConfirmStatusCompleted P2POrderConfirmResponseP2POrderConfirmStatus = "completed"

// Creates a P2P order for the specified advert.
type P2POrderCreateRequest struct {
	// The unique identifier for the advert to create an order against.
	AdvertId string `json:"advert_id"`

	// The amount of currency to be bought or sold.
	Amount float64 `json:"amount"`

	// [Optional] Seller contact information. Only applicable for 'sell orders'.
	ContactInfo *string `json:"contact_info,omitempty"`

	// Must be 1
	P2POrderCreate P2POrderCreateRequestP2POrderCreate `json:"p2p_order_create"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderCreateRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Payment instructions, only applicable for sell orders.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// IDs of payment methods, only applicable for sell orders.
	PaymentMethodIds []int `json:"payment_method_ids,omitempty"`

	// [Optional] Conversion rate from account currency to local currency, only
	// applicable for floating rate adverts.
	Rate *float64 `json:"rate,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to the
	// order.
	Subscribe *P2POrderCreateRequestSubscribe `json:"subscribe,omitempty"`
}

type P2POrderCreateRequestP2POrderCreate int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderCreateRequestPassthrough map[string]interface{}

type P2POrderCreateRequestSubscribe int

// The information about the created P2P order.
type P2POrderCreateResponse struct {
	// Echo of the request made.
	EchoReq P2POrderCreateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderCreateResponseMsgType `json:"msg_type"`

	// Information of the creates P2P order.
	P2POrderCreate *P2POrderCreateResponseP2POrderCreate `json:"p2p_order_create,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2POrderCreateResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2POrderCreateResponseEchoReq map[string]interface{}

type P2POrderCreateResponseMsgType string

const P2POrderCreateResponseMsgTypeP2POrderCreate P2POrderCreateResponseMsgType = "p2p_order_create"

// Information of the creates P2P order.
type P2POrderCreateResponseP2POrderCreate struct {
	// The currency of order.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderCreateResponseP2POrderCreateAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderCreateResponseP2POrderCreateAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails P2POrderCreateResponseP2POrderCreateClientDetails `json:"client_details"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderCreateResponseP2POrderCreateDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderCreateResponseP2POrderCreateIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderCreateResponseP2POrderCreateIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen P2POrderCreateResponseP2POrderCreateIsSeen `json:"is_seen"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Supported payment methods. Comma separated list.
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Details of available payment methods.
	PaymentMethodDetails P2POrderCreateResponseP2POrderCreatePaymentMethodDetails `json:"payment_method_details,omitempty"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// The status of the created order.
	Status P2POrderCreateResponseP2POrderCreateStatus `json:"status"`

	// Type of the order.
	Type P2POrderCreateResponseP2POrderCreateType `json:"type"`
}

// Details of the advert for this order.
type P2POrderCreateResponseP2POrderCreateAdvertDetails struct {
	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderCreateResponseP2POrderCreateAdvertDetailsType `json:"type"`
}

type P2POrderCreateResponseP2POrderCreateAdvertDetailsType string

const P2POrderCreateResponseP2POrderCreateAdvertDetailsTypeBuy P2POrderCreateResponseP2POrderCreateAdvertDetailsType = "buy"
const P2POrderCreateResponseP2POrderCreateAdvertDetailsTypeSell P2POrderCreateResponseP2POrderCreateAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderCreateResponseP2POrderCreateAdvertiserDetails struct {
	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline int

// Details of the client who created the order.
type P2POrderCreateResponseP2POrderCreateClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline `json:"is_online"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline int

// Details of the order dispute.
type P2POrderCreateResponseP2POrderCreateDisputeDetails struct {
	// The dispute reason
	DisputeReason interface{} `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid interface{} `json:"disputer_loginid"`
}

type P2POrderCreateResponseP2POrderCreateIsIncoming int

type P2POrderCreateResponseP2POrderCreateIsReviewable int

type P2POrderCreateResponseP2POrderCreateIsSeen int

// Details of available payment methods.
type P2POrderCreateResponseP2POrderCreatePaymentMethodDetails map[string]interface{}

type P2POrderCreateResponseP2POrderCreateStatus string

const P2POrderCreateResponseP2POrderCreateStatusPending P2POrderCreateResponseP2POrderCreateStatus = "pending"

type P2POrderCreateResponseP2POrderCreateType string

const P2POrderCreateResponseP2POrderCreateTypeBuy P2POrderCreateResponseP2POrderCreateType = "buy"
const P2POrderCreateResponseP2POrderCreateTypeSell P2POrderCreateResponseP2POrderCreateType = "sell"

// For subscription requests only.
type P2POrderCreateResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Dispute a P2P order.
type P2POrderDisputeRequest struct {
	// The predefined dispute reason
	DisputeReason P2POrderDisputeRequestDisputeReason `json:"dispute_reason"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// Must be 1
	P2POrderDispute P2POrderDisputeRequestP2POrderDispute `json:"p2p_order_dispute"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderDisputeRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2POrderDisputeRequestDisputeReason string

const P2POrderDisputeRequestDisputeReasonBuyerNotPaid P2POrderDisputeRequestDisputeReason = "buyer_not_paid"
const P2POrderDisputeRequestDisputeReasonBuyerOverpaid P2POrderDisputeRequestDisputeReason = "buyer_overpaid"
const P2POrderDisputeRequestDisputeReasonBuyerUnderpaid P2POrderDisputeRequestDisputeReason = "buyer_underpaid"
const P2POrderDisputeRequestDisputeReasonSellerNotReleased P2POrderDisputeRequestDisputeReason = "seller_not_released"

type P2POrderDisputeRequestP2POrderDispute int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderDisputeRequestPassthrough map[string]interface{}

// Result of the P2P order disputing.
type P2POrderDisputeResponse struct {
	// Echo of the request made.
	EchoReq P2POrderDisputeResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderDisputeResponseMsgType `json:"msg_type"`

	// Details of the disputed order.
	P2POrderDispute *P2POrderDisputeResponseP2POrderDispute `json:"p2p_order_dispute,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderDisputeResponseEchoReq map[string]interface{}

type P2POrderDisputeResponseMsgType string

const P2POrderDisputeResponseMsgTypeP2POrderDispute P2POrderDisputeResponseMsgType = "p2p_order_dispute"

// Details of the disputed order.
type P2POrderDisputeResponseP2POrderDispute struct {
	// The currency of order.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderDisputeResponseP2POrderDisputeAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderDisputeResponseP2POrderDisputeAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails P2POrderDisputeResponseP2POrderDisputeClientDetails `json:"client_details"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderDisputeResponseP2POrderDisputeDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderDisputeResponseP2POrderDisputeIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderDisputeResponseP2POrderDisputeIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen P2POrderDisputeResponseP2POrderDisputeIsSeen `json:"is_seen"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Current order status.
	Status P2POrderDisputeResponseP2POrderDisputeStatus `json:"status"`

	// Whether this is a buy or a sell.
	Type P2POrderDisputeResponseP2POrderDisputeType `json:"type"`

	// If blocked for too many failed verification attempts, the epoch time that the
	// block will end.
	VerificationLockoutUntil *int `json:"verification_lockout_until,omitempty"`

	// If a verification request has already been made, the epoch time that another
	// verification request can be made.
	VerificationNextRequest *int `json:"verification_next_request,omitempty"`

	// Indicates that the seller in the process of confirming the order.
	VerificationPending *P2POrderDisputeResponseP2POrderDisputeVerificationPending `json:"verification_pending,omitempty"`

	// Epoch time that the current verification token will expire.
	VerificationTokenExpiry *int `json:"verification_token_expiry,omitempty"`
}

// Details of the advert for this order.
type P2POrderDisputeResponseP2POrderDisputeAdvertDetails struct {
	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType `json:"type"`
}

type P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType string

const P2POrderDisputeResponseP2POrderDisputeAdvertDetailsTypeBuy P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType = "buy"
const P2POrderDisputeResponseP2POrderDisputeAdvertDetailsTypeSell P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderDisputeResponseP2POrderDisputeAdvertiserDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline int

// Details of the client who created the order.
type P2POrderDisputeResponseP2POrderDisputeClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline `json:"is_online"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline int

// Details of the order dispute.
type P2POrderDisputeResponseP2POrderDisputeDisputeDetails struct {
	// The dispute reason
	DisputeReason string `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid string `json:"disputer_loginid"`
}

type P2POrderDisputeResponseP2POrderDisputeIsIncoming int

type P2POrderDisputeResponseP2POrderDisputeIsReviewable int

type P2POrderDisputeResponseP2POrderDisputeIsSeen int

type P2POrderDisputeResponseP2POrderDisputeStatus string

const P2POrderDisputeResponseP2POrderDisputeStatusBlocked P2POrderDisputeResponseP2POrderDisputeStatus = "blocked"
const P2POrderDisputeResponseP2POrderDisputeStatusBuyerConfirmed P2POrderDisputeResponseP2POrderDisputeStatus = "buyer-confirmed"
const P2POrderDisputeResponseP2POrderDisputeStatusCancelled P2POrderDisputeResponseP2POrderDisputeStatus = "cancelled"
const P2POrderDisputeResponseP2POrderDisputeStatusCompleted P2POrderDisputeResponseP2POrderDisputeStatus = "completed"
const P2POrderDisputeResponseP2POrderDisputeStatusDisputeCompleted P2POrderDisputeResponseP2POrderDisputeStatus = "dispute-completed"
const P2POrderDisputeResponseP2POrderDisputeStatusDisputeRefunded P2POrderDisputeResponseP2POrderDisputeStatus = "dispute-refunded"
const P2POrderDisputeResponseP2POrderDisputeStatusDisputed P2POrderDisputeResponseP2POrderDisputeStatus = "disputed"
const P2POrderDisputeResponseP2POrderDisputeStatusPending P2POrderDisputeResponseP2POrderDisputeStatus = "pending"
const P2POrderDisputeResponseP2POrderDisputeStatusRefunded P2POrderDisputeResponseP2POrderDisputeStatus = "refunded"
const P2POrderDisputeResponseP2POrderDisputeStatusTimedOut P2POrderDisputeResponseP2POrderDisputeStatus = "timed-out"

type P2POrderDisputeResponseP2POrderDisputeType string

const P2POrderDisputeResponseP2POrderDisputeTypeBuy P2POrderDisputeResponseP2POrderDisputeType = "buy"
const P2POrderDisputeResponseP2POrderDisputeTypeSell P2POrderDisputeResponseP2POrderDisputeType = "sell"

type P2POrderDisputeResponseP2POrderDisputeVerificationPending int

// Retrieves the information about a P2P order.
type P2POrderInfoRequest struct {
	// The unique identifier for the order.
	Id string `json:"id"`

	// Must be 1
	P2POrderInfo P2POrderInfoRequestP2POrderInfo `json:"p2p_order_info"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderInfoRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to order
	Subscribe *P2POrderInfoRequestSubscribe `json:"subscribe,omitempty"`
}

type P2POrderInfoRequestP2POrderInfo int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderInfoRequestPassthrough map[string]interface{}

type P2POrderInfoRequestSubscribe int

// Information of the P2P order.
type P2POrderInfoResponse struct {
	// Echo of the request made.
	EchoReq P2POrderInfoResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderInfoResponseMsgType `json:"msg_type"`

	// The information of P2P order.
	P2POrderInfo *P2POrderInfoResponseP2POrderInfo `json:"p2p_order_info,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2POrderInfoResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2POrderInfoResponseEchoReq map[string]interface{}

type P2POrderInfoResponseMsgType string

const P2POrderInfoResponseMsgTypeP2POrderInfo P2POrderInfoResponseMsgType = "p2p_order_info"

// The information of P2P order.
type P2POrderInfoResponseP2POrderInfo struct {
	// The currency of order.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderInfoResponseP2POrderInfoAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderInfoResponseP2POrderInfoAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails P2POrderInfoResponseP2POrderInfoClientDetails `json:"client_details"`

	// The epoch time of the order completion.
	CompletionTime *int `json:"completion_time,omitempty"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderInfoResponseP2POrderInfoDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderInfoResponseP2POrderInfoIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderInfoResponseP2POrderInfoIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen *P2POrderInfoResponseP2POrderInfoIsSeen `json:"is_seen,omitempty"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Supported payment methods. Comma separated list.
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Details of available payment methods.
	PaymentMethodDetails P2POrderInfoResponseP2POrderInfoPaymentMethodDetails `json:"payment_method_details,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Details of the review you gave for this order, if any.
	ReviewDetails *P2POrderInfoResponseP2POrderInfoReviewDetails `json:"review_details,omitempty"`

	// Current order status.
	Status P2POrderInfoResponseP2POrderInfoStatus `json:"status"`

	// Whether this is a buy or a sell.
	Type P2POrderInfoResponseP2POrderInfoType `json:"type"`

	// If blocked for too many failed verification attempts, the epoch time that the
	// block will end.
	VerificationLockoutUntil *int `json:"verification_lockout_until,omitempty"`

	// If a verification request has already been made, the epoch time that another
	// verification request can be made.
	VerificationNextRequest *int `json:"verification_next_request,omitempty"`

	// Indicates that the seller in the process of confirming the order.
	VerificationPending *P2POrderInfoResponseP2POrderInfoVerificationPending `json:"verification_pending,omitempty"`

	// Epoch time that the current verification token will expire.
	VerificationTokenExpiry *int `json:"verification_token_expiry,omitempty"`
}

// Details of the advert for this order.
type P2POrderInfoResponseP2POrderInfoAdvertDetails struct {
	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderInfoResponseP2POrderInfoAdvertDetailsType `json:"type"`
}

type P2POrderInfoResponseP2POrderInfoAdvertDetailsType string

const P2POrderInfoResponseP2POrderInfoAdvertDetailsTypeBuy P2POrderInfoResponseP2POrderInfoAdvertDetailsType = "buy"
const P2POrderInfoResponseP2POrderInfoAdvertDetailsTypeSell P2POrderInfoResponseP2POrderInfoAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderInfoResponseP2POrderInfoAdvertiserDetails struct {
	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline int

type P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended struct {
	Value interface{}
}

// Details of the client who created the order.
type P2POrderInfoResponseP2POrderInfoClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline *P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline `json:"is_online,omitempty"`

	// Indicates that the client was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time,omitempty"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline int

type P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended struct {
	Value interface{}
}

// Details of the order dispute.
type P2POrderInfoResponseP2POrderInfoDisputeDetails struct {
	// The dispute reason
	DisputeReason interface{} `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid interface{} `json:"disputer_loginid"`
}

type P2POrderInfoResponseP2POrderInfoIsIncoming int

type P2POrderInfoResponseP2POrderInfoIsReviewable int

type P2POrderInfoResponseP2POrderInfoIsSeen int

// Details of available payment methods.
type P2POrderInfoResponseP2POrderInfoPaymentMethodDetails map[string]interface{}

// Details of the review you gave for this order, if any.
type P2POrderInfoResponseP2POrderInfoReviewDetails struct {
	// The epoch time of the review.
	CreatedTime int `json:"created_time"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// `1` if the advertiser is recommended, `0` if not recommended.
	Recommended P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended `json:"recommended"`
}

type P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended struct {
	Value interface{}
}

type P2POrderInfoResponseP2POrderInfoStatus string

const P2POrderInfoResponseP2POrderInfoStatusBlocked P2POrderInfoResponseP2POrderInfoStatus = "blocked"
const P2POrderInfoResponseP2POrderInfoStatusBuyerConfirmed P2POrderInfoResponseP2POrderInfoStatus = "buyer-confirmed"
const P2POrderInfoResponseP2POrderInfoStatusCancelled P2POrderInfoResponseP2POrderInfoStatus = "cancelled"
const P2POrderInfoResponseP2POrderInfoStatusCompleted P2POrderInfoResponseP2POrderInfoStatus = "completed"
const P2POrderInfoResponseP2POrderInfoStatusDisputeCompleted P2POrderInfoResponseP2POrderInfoStatus = "dispute-completed"
const P2POrderInfoResponseP2POrderInfoStatusDisputeRefunded P2POrderInfoResponseP2POrderInfoStatus = "dispute-refunded"
const P2POrderInfoResponseP2POrderInfoStatusDisputed P2POrderInfoResponseP2POrderInfoStatus = "disputed"
const P2POrderInfoResponseP2POrderInfoStatusPending P2POrderInfoResponseP2POrderInfoStatus = "pending"
const P2POrderInfoResponseP2POrderInfoStatusRefunded P2POrderInfoResponseP2POrderInfoStatus = "refunded"
const P2POrderInfoResponseP2POrderInfoStatusTimedOut P2POrderInfoResponseP2POrderInfoStatus = "timed-out"

type P2POrderInfoResponseP2POrderInfoType string

const P2POrderInfoResponseP2POrderInfoTypeBuy P2POrderInfoResponseP2POrderInfoType = "buy"
const P2POrderInfoResponseP2POrderInfoTypeSell P2POrderInfoResponseP2POrderInfoType = "sell"

type P2POrderInfoResponseP2POrderInfoVerificationPending int

// For subscription requests only.
type P2POrderInfoResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// List active orders.
type P2POrderListRequest struct {
	// [Optional] Should be 1 to list active, 0 to list inactive (historical).
	Active *P2POrderListRequestActive `json:"active,omitempty"`

	// [Optional] If present, lists orders applying to a specific advert.
	AdvertId *string `json:"advert_id,omitempty"`

	// [Optional] Used for paging.
	Limit int `json:"limit,omitempty"`

	// [Optional] Used for paging.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2POrderList P2POrderListRequestP2POrderList `json:"p2p_order_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is a change to any
	// order belonging to you.
	Subscribe *P2POrderListRequestSubscribe `json:"subscribe,omitempty"`
}

type P2POrderListRequestActive float64

type P2POrderListRequestP2POrderList int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderListRequestPassthrough map[string]interface{}

type P2POrderListRequestSubscribe int

// All orders matching the requested criteria.
type P2POrderListResponse struct {
	// Echo of the request made.
	EchoReq P2POrderListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderListResponseMsgType `json:"msg_type"`

	// List of P2P orders.
	P2POrderList *P2POrderListResponseP2POrderList `json:"p2p_order_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2POrderListResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2POrderListResponseEchoReq map[string]interface{}

type P2POrderListResponseMsgType string

const P2POrderListResponseMsgTypeP2POrderList P2POrderListResponseMsgType = "p2p_order_list"

// List of P2P orders.
type P2POrderListResponseP2POrderList struct {
	// List of orders.
	List []P2POrderListResponseP2POrderListListElem `json:"list"`
}

type P2POrderListResponseP2POrderListListElem struct {
	// The currency to be bought or sold.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderListResponseP2POrderListListElemAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderListResponseP2POrderListListElemAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails *P2POrderListResponseP2POrderListListElemClientDetails `json:"client_details,omitempty"`

	// The epoch time of the order completion.
	CompletionTime *int `json:"completion_time,omitempty"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderListResponseP2POrderListListElemDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderListResponseP2POrderListListElemIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderListResponseP2POrderListListElemIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen *P2POrderListResponseP2POrderListListElemIsSeen `json:"is_seen,omitempty"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Supported payment methods. Comma separated list of identifiers.
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Details of the review you gave for this order, if any.
	ReviewDetails *P2POrderListResponseP2POrderListListElemReviewDetails `json:"review_details,omitempty"`

	// Current order status.
	Status P2POrderListResponseP2POrderListListElemStatus `json:"status"`

	// Whether this is a buy or a sell.
	Type P2POrderListResponseP2POrderListListElemType `json:"type"`

	// If blocked for too many failed verification attempts, the epoch time that the
	// block will end.
	VerificationLockoutUntil *int `json:"verification_lockout_until,omitempty"`

	// If a verification request has already been made, the epoch time that another
	// verification request can be made.
	VerificationNextRequest *int `json:"verification_next_request,omitempty"`

	// Indicates that the seller in the process of confirming the order.
	VerificationPending *P2POrderListResponseP2POrderListListElemVerificationPending `json:"verification_pending,omitempty"`

	// Epoch time that the current verification token will expire.
	VerificationTokenExpiry *int `json:"verification_token_expiry,omitempty"`
}

// Details of the advert for this order.
type P2POrderListResponseP2POrderListListElemAdvertDetails struct {
	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderListResponseP2POrderListListElemAdvertDetailsType `json:"type"`
}

type P2POrderListResponseP2POrderListListElemAdvertDetailsType string

const P2POrderListResponseP2POrderListListElemAdvertDetailsTypeBuy P2POrderListResponseP2POrderListListElemAdvertDetailsType = "buy"
const P2POrderListResponseP2POrderListListElemAdvertDetailsTypeSell P2POrderListResponseP2POrderListListElemAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderListResponseP2POrderListListElemAdvertiserDetails struct {
	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline int

type P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended struct {
	Value interface{}
}

// Details of the client who created the order.
type P2POrderListResponseP2POrderListListElemClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderListResponseP2POrderListListElemClientDetailsIsOnline `json:"is_online"`

	// Indicates that the client was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderListResponseP2POrderListListElemClientDetailsIsOnline int

type P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended struct {
	Value interface{}
}

// Details of the order dispute.
type P2POrderListResponseP2POrderListListElemDisputeDetails struct {
	// The dispute reason
	DisputeReason interface{} `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid interface{} `json:"disputer_loginid"`
}

type P2POrderListResponseP2POrderListListElemIsIncoming int

type P2POrderListResponseP2POrderListListElemIsReviewable int

type P2POrderListResponseP2POrderListListElemIsSeen int

// Details of the review you gave for this order, if any.
type P2POrderListResponseP2POrderListListElemReviewDetails struct {
	// The epoch time of the review.
	CreatedTime int `json:"created_time"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// `1` if the advertiser is recommended, `0` if not recommended.
	Recommended P2POrderListResponseP2POrderListListElemReviewDetailsRecommended `json:"recommended"`
}

type P2POrderListResponseP2POrderListListElemReviewDetailsRecommended struct {
	Value interface{}
}

type P2POrderListResponseP2POrderListListElemStatus string

const P2POrderListResponseP2POrderListListElemStatusBlocked P2POrderListResponseP2POrderListListElemStatus = "blocked"
const P2POrderListResponseP2POrderListListElemStatusBuyerConfirmed P2POrderListResponseP2POrderListListElemStatus = "buyer-confirmed"
const P2POrderListResponseP2POrderListListElemStatusCancelled P2POrderListResponseP2POrderListListElemStatus = "cancelled"
const P2POrderListResponseP2POrderListListElemStatusCompleted P2POrderListResponseP2POrderListListElemStatus = "completed"
const P2POrderListResponseP2POrderListListElemStatusDisputeCompleted P2POrderListResponseP2POrderListListElemStatus = "dispute-completed"
const P2POrderListResponseP2POrderListListElemStatusDisputeRefunded P2POrderListResponseP2POrderListListElemStatus = "dispute-refunded"
const P2POrderListResponseP2POrderListListElemStatusDisputed P2POrderListResponseP2POrderListListElemStatus = "disputed"
const P2POrderListResponseP2POrderListListElemStatusPending P2POrderListResponseP2POrderListListElemStatus = "pending"
const P2POrderListResponseP2POrderListListElemStatusRefunded P2POrderListResponseP2POrderListListElemStatus = "refunded"
const P2POrderListResponseP2POrderListListElemStatusTimedOut P2POrderListResponseP2POrderListListElemStatus = "timed-out"

type P2POrderListResponseP2POrderListListElemType string

const P2POrderListResponseP2POrderListListElemTypeBuy P2POrderListResponseP2POrderListListElemType = "buy"
const P2POrderListResponseP2POrderListListElemTypeSell P2POrderListResponseP2POrderListListElemType = "sell"

type P2POrderListResponseP2POrderListListElemVerificationPending int

// For subscription requests only.
type P2POrderListResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Creates a review for the specified order.
type P2POrderReviewRequest struct {
	// The order identification number.
	OrderId string `json:"order_id"`

	// Must be 1
	P2POrderReview P2POrderReviewRequestP2POrderReview `json:"p2p_order_review"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderReviewRequestPassthrough `json:"passthrough,omitempty"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// [Optional] `1` if the counterparty is recommendable to others, otherwise `0`.
	Recommended *P2POrderReviewRequestRecommended `json:"recommended,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2POrderReviewRequestP2POrderReview int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderReviewRequestPassthrough map[string]interface{}

type P2POrderReviewRequestRecommended struct {
	Value interface{}
}

// Response for creating a P2P order review.
type P2POrderReviewResponse struct {
	// Echo of the request made.
	EchoReq P2POrderReviewResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderReviewResponseMsgType `json:"msg_type"`

	// Details of the created order review.
	P2POrderReview *P2POrderReviewResponseP2POrderReview `json:"p2p_order_review,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderReviewResponseEchoReq map[string]interface{}

type P2POrderReviewResponseMsgType string

const P2POrderReviewResponseMsgTypeP2POrderReview P2POrderReviewResponseMsgType = "p2p_order_review"

// Details of the created order review.
type P2POrderReviewResponseP2POrderReview struct {
	// The reviewed advertiser's identification number.
	AdvertiserId string `json:"advertiser_id"`

	// The epoch time of the review.
	CreatedTime int `json:"created_time"`

	// The order identification number.
	OrderId string `json:"order_id"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// `1` if the advertiser is recommended, `0` if not recommended.
	Recommended P2POrderReviewResponseP2POrderReviewRecommended `json:"recommended"`
}

type P2POrderReviewResponseP2POrderReviewRecommended struct {
	Value interface{}
}

// List all P2P payment methods.
type P2PPaymentMethodsRequest struct {
	// Must be 1
	P2PPaymentMethods P2PPaymentMethodsRequestP2PPaymentMethods `json:"p2p_payment_methods"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PPaymentMethodsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PPaymentMethodsRequestP2PPaymentMethods int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PPaymentMethodsRequestPassthrough map[string]interface{}

// List all P2P payment methods.
type P2PPaymentMethodsResponse struct {
	// Echo of the request made.
	EchoReq P2PPaymentMethodsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PPaymentMethodsResponseMsgType `json:"msg_type"`

	// Payment methods keyed by identifier.
	P2PPaymentMethods P2PPaymentMethodsResponseP2PPaymentMethods `json:"p2p_payment_methods,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PPaymentMethodsResponseEchoReq map[string]interface{}

type P2PPaymentMethodsResponseMsgType string

const P2PPaymentMethodsResponseMsgTypeP2PPaymentMethods P2PPaymentMethodsResponseMsgType = "p2p_payment_methods"

// Payment methods keyed by identifier.
type P2PPaymentMethodsResponseP2PPaymentMethods map[string]interface{}

// Keeps the connection alive and updates the P2P advertiser's online status. The
// advertiser will be considered offline 60 seconds after a call is made.
type P2PPingRequest struct {
	// Must be `1`
	P2PPing P2PPingRequestP2PPing `json:"p2p_ping"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PPingRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PPingRequestP2PPing int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PPingRequestPassthrough map[string]interface{}

// The response of P2P ping request.
type P2PPingResponse struct {
	// Echo of the request made.
	EchoReq P2PPingResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PPingResponseMsgType `json:"msg_type"`

	// Will return 'pong'
	P2PPing *P2PPingResponseP2PPing `json:"p2p_ping,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2PPingResponseEchoReq map[string]interface{}

type P2PPingResponseMsgType string

const P2PPingResponseMsgTypeP2PPing P2PPingResponseMsgType = "p2p_ping"

type P2PPingResponseP2PPing string

const P2PPingResponseP2PPingPong P2PPingResponseP2PPing = "pong"

// Will return a list payment methods available for the given country. If the
// request is authenticated the client's residence country will be used.
type PaymentMethodsRequest struct {
	// [Optional] 2-letter country code (ISO standard).
	Country *string `json:"country,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentMethodsRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PaymentMethods PaymentMethodsRequestPaymentMethods `json:"payment_methods"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentMethodsRequestPassthrough map[string]interface{}

type PaymentMethodsRequestPaymentMethods int

// List of available payment methods for a given country.
type PaymentMethodsResponse struct {
	// Echo of the request made.
	EchoReq PaymentMethodsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentMethodsResponseMsgType `json:"msg_type"`

	// Available payment methods for a given country. Note: if a user is logged in,
	// the residence country will be considered.
	PaymentMethods []PaymentMethodsResponsePaymentMethodsElem `json:"payment_methods,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentMethodsResponseEchoReq map[string]interface{}

type PaymentMethodsResponseMsgType string

const PaymentMethodsResponseMsgTypePaymentMethods PaymentMethodsResponseMsgType = "payment_methods"

// A payment method suported for the given country
type PaymentMethodsResponsePaymentMethodsElem struct {
	// The min and max values for deposits.
	DepositLimits PaymentMethodsResponsePaymentMethodsElemDepositLimits `json:"deposit_limits"`

	// How much time it takes for a deposit to be processed.
	DepositTime string `json:"deposit_time"`

	// Short description explaining the payment method.
	Description string `json:"description"`

	// Common name for the payment method.
	DisplayName string `json:"display_name"`

	// Unique identifier for the payment method.
	Id string `json:"id"`

	// Payment processor for this payment method.
	PaymentProcessor string `json:"payment_processor"`

	// A list of predefined amounts for withdraw or deposit.
	PredefinedAmounts []int `json:"predefined_amounts"`

	// Sign up link for this payment method.
	SignupLink string `json:"signup_link"`

	// Currencies supported for this payment method.
	SupportedCurrencies []string `json:"supported_currencies"`

	// Type of Payment Method.
	Type string `json:"type"`

	// A printable description for type of payment method.
	TypeDisplayName string `json:"type_display_name"`

	// Withdrawal limits per currency.
	WithdrawLimits PaymentMethodsResponsePaymentMethodsElemWithdrawLimits `json:"withdraw_limits"`

	// How much time takes a withdrawal to be processed.
	WithdrawalTime string `json:"withdrawal_time"`
}

// The min and max values for deposits.
type PaymentMethodsResponsePaymentMethodsElemDepositLimits map[string]interface{}

// Withdrawal limits per currency.
type PaymentMethodsResponsePaymentMethodsElemWithdrawLimits map[string]interface{}

// Saves client's payment agent details.
type PaymentagentCreateRequest struct {
	// [Optional] Client's My Affiliate id, if exists.
	AffiliateId *string `json:"affiliate_id,omitempty"`

	// Indicates client's agreement with the Code of Conduct.
	CodeOfConductApproval PaymentagentCreateRequestCodeOfConductApproval `json:"code_of_conduct_approval"`

	// Commission  (%) the agent wants to take on deposits
	CommissionDeposit float64 `json:"commission_deposit"`

	// Commission  (%) the agent wants to take on withdrawals
	CommissionWithdrawal float64 `json:"commission_withdrawal"`

	// Payment agent's email address.
	Email string `json:"email"`

	// [Optional] Information about payment agent and their proposed service.
	Information string `json:"information"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentCreateRequestPassthrough `json:"passthrough,omitempty"`

	// The name with which the payment agent is going to be identified.
	PaymentAgentName string `json:"payment_agent_name"`

	// Must be 1
	PaymentagentCreate PaymentagentCreateRequestPaymentagentCreate `json:"paymentagent_create"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentCreateRequestPhoneNumbersElem `json:"phone_numbers,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentCreateRequestSupportedPaymentMethodsElem `json:"supported_payment_methods"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentCreateRequestUrlsElem `json:"urls"`
}

type PaymentagentCreateRequestCodeOfConductApproval int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentCreateRequestPassthrough map[string]interface{}

type PaymentagentCreateRequestPaymentagentCreate int

type PaymentagentCreateRequestPhoneNumbersElem struct {
	// A phone number
	PhoneNumber string `json:"phone_number"`
}

type PaymentagentCreateRequestSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod string `json:"payment_method"`
}

type PaymentagentCreateRequestUrlsElem struct {
	// A webpage or website's URL.
	Url string `json:"url"`
}

// Sets client's payment agent details.
type PaymentagentCreateResponse struct {
	// Echo of the request made.
	EchoReq PaymentagentCreateResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentCreateResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentCreateResponseEchoReq map[string]interface{}

type PaymentagentCreateResponseMsgType string

const PaymentagentCreateResponseMsgTypePaymentagentCreate PaymentagentCreateResponseMsgType = "paymentagent_create"

// Gets client's payment agent details.
type PaymentagentDetailsRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentDetailsRequestPassthrough `json:"passthrough,omitempty"`

	// Must be 1
	PaymentagentDetails PaymentagentDetailsRequestPaymentagentDetails `json:"paymentagent_details"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentDetailsRequestPassthrough map[string]interface{}

type PaymentagentDetailsRequestPaymentagentDetails int

// Gets client's payment agent details.
type PaymentagentDetailsResponse struct {
	// Echo of the request made.
	EchoReq PaymentagentDetailsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentDetailsResponseMsgType `json:"msg_type"`

	// Used to pass data through the websocket, which may be retrieved via the
	// `echo_req` output field.
	Passthrough PaymentagentDetailsResponsePassthrough `json:"passthrough,omitempty"`

	// The payment agent details.
	PaymentagentDetails *PaymentagentDetailsResponsePaymentagentDetails `json:"paymentagent_details,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentDetailsResponseEchoReq map[string]interface{}

type PaymentagentDetailsResponseMsgType string

const PaymentagentDetailsResponseMsgTypePaymentagentDetails PaymentagentDetailsResponseMsgType = "paymentagent_details"

// Used to pass data through the websocket, which may be retrieved via the
// `echo_req` output field.
type PaymentagentDetailsResponsePassthrough map[string]interface{}

// The payment agent details.
type PaymentagentDetailsResponsePaymentagentDetails struct {
	// Client's My Affiliate id, if exists.
	AffiliateId interface{} `json:"affiliate_id,omitempty"`

	// If 1, the client may apply using paymentagent_create.
	CanApply PaymentagentDetailsResponsePaymentagentDetailsCanApply `json:"can_apply"`

	// Indicates client's agreement with the Code of Conduct document.
	CodeOfConductApproval *PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval `json:"code_of_conduct_approval,omitempty"`

	// Commission (%) the agent want to take on deposits
	CommissionDeposit *float64 `json:"commission_deposit,omitempty"`

	// Commission (%) the agent want to take on withdrawals
	CommissionWithdrawal *float64 `json:"commission_withdrawal,omitempty"`

	// Currency supported by the payment agent. It's usually the same as agent's Deriv
	// account currency.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// Contains a list of error codes that would prevent a successful payment agent
	// application.
	EligibiltyValidation []string `json:"eligibilty_validation,omitempty"`

	// Payment agent's email address.
	Email *string `json:"email,omitempty"`

	// Information about payment agent and their proposed service.
	Information *string `json:"information,omitempty"`

	// Maximum amount allowed for withdrawals
	MaxWithdrawal *float64 `json:"max_withdrawal,omitempty"`

	// Minimum amount allowed for withdrawals
	MinWithdrawal *float64 `json:"min_withdrawal,omitempty"`

	// Indicates if the payment agent was recently approved with no transactions yet.
	NewlyAuthorized *PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized `json:"newly_authorized,omitempty"`

	// The name with which the payment agent is going to be identified.
	PaymentAgentName *string `json:"payment_agent_name,omitempty"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentDetailsResponsePaymentagentDetailsPhoneNumbersElem `json:"phone_numbers,omitempty"`

	// Indicates the status of the Payment Agent.
	Status interface{} `json:"status,omitempty"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentDetailsResponsePaymentagentDetailsSupportedPaymentMethodsElem `json:"supported_payment_methods,omitempty"`

	// Client's target country.
	TargetCountry *string `json:"target_country,omitempty"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentDetailsResponsePaymentagentDetailsUrlsElem `json:"urls,omitempty"`
}

type PaymentagentDetailsResponsePaymentagentDetailsCanApply int

type PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval int

type PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized int

type PaymentagentDetailsResponsePaymentagentDetailsPhoneNumbersElem struct {
	// A phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
}

type PaymentagentDetailsResponsePaymentagentDetailsSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type PaymentagentDetailsResponsePaymentagentDetailsUrlsElem struct {
	// A website url.
	Url *string `json:"url,omitempty"`
}

// Will return a list of Payment Agents for a given country for a given currency.
// Payment agents allow users to deposit and withdraw funds using local payment
// methods that might not be available via the main website's cashier system.
type PaymentagentListRequest struct {
	// [Optional] If specified, only payment agents that supports that currency will
	// be returned (obtained from `payout_currencies` call).
	Currency *string `json:"currency,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentListRequestPassthrough `json:"passthrough,omitempty"`

	// Client's 2-letter country code (obtained from `residence_list` call).
	PaymentagentList string `json:"paymentagent_list"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentListRequestPassthrough map[string]interface{}

// A message with Payment Agent List
type PaymentagentListResponse struct {
	// Echo of the request made.
	EchoReq PaymentagentListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentListResponseMsgType `json:"msg_type"`

	// Payment Agent List
	PaymentagentList *PaymentagentListResponsePaymentagentList `json:"paymentagent_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentListResponseEchoReq map[string]interface{}

type PaymentagentListResponseMsgType string

const PaymentagentListResponseMsgTypePaymentagentList PaymentagentListResponseMsgType = "paymentagent_list"

// Payment Agent List
type PaymentagentListResponsePaymentagentList struct {
	// The list of countries in which payment agent is available.
	AvailableCountries [][]interface{} `json:"available_countries,omitempty"`

	// List of payment agents available in the requested country.
	List []PaymentagentListResponsePaymentagentListListElem `json:"list"`
}

type PaymentagentListResponsePaymentagentListListElem struct {
	// Currencies that are accepted by this payment agent.
	Currencies string `json:"currencies"`

	// Commission amount applied on deposits made through this payment agent.
	DepositCommission string `json:"deposit_commission"`

	// Payment agent's email address.
	Email string `json:"email"`

	// More descriptions about this payment agent.
	FurtherInformation string `json:"further_information"`

	// Maximum withdrawal allowed for transactions through this payment agent.
	MaxWithdrawal interface{} `json:"max_withdrawal"`

	// Minimum withdrawal allowed for transactions through this payment agent.
	MinWithdrawal interface{} `json:"min_withdrawal"`

	// Payment agent's name.
	Name string `json:"name"`

	// Payment agent's loginid.
	PaymentagentLoginid string `json:"paymentagent_loginid"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentListResponsePaymentagentListListElemPhoneNumbersElem `json:"phone_numbers"`

	// A summary about payment agent.
	Summary string `json:"summary"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentListResponsePaymentagentListListElemSupportedPaymentMethodsElem `json:"supported_payment_methods"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentListResponsePaymentagentListListElemUrlsElem `json:"urls"`

	// Commission amount applied on withdrawals made through this payment agent.
	WithdrawalCommission string `json:"withdrawal_commission"`
}

type PaymentagentListResponsePaymentagentListListElemPhoneNumbersElem struct {
	// A phone number
	PhoneNumber *string `json:"phone_number,omitempty"`
}

type PaymentagentListResponsePaymentagentListListElemSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type PaymentagentListResponsePaymentagentListListElemUrlsElem struct {
	// A webpage or website's URL.
	Url *string `json:"url,omitempty"`
}

// Payment Agent Transfer - this call is available only to accounts that are
// approved Payment Agents.
type PaymentagentTransferRequest struct {
	// The amount to transfer.
	Amount float64 `json:"amount"`

	// Currency code.
	Currency string `json:"currency"`

	// [Optional] Remarks about the transfer.
	Description *string `json:"description,omitempty"`

	// [Optional] If set to `1`, just do validation.
	DryRun *PaymentagentTransferRequestDryRun `json:"dry_run,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentTransferRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PaymentagentTransfer PaymentagentTransferRequestPaymentagentTransfer `json:"paymentagent_transfer"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The loginid of the recipient account.
	TransferTo string `json:"transfer_to"`
}

type PaymentagentTransferRequestDryRun int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentTransferRequestPassthrough map[string]interface{}

type PaymentagentTransferRequestPaymentagentTransfer int

// The result of transfer request made.
type PaymentagentTransferResponse struct {
	// The `transfer_to` client full name
	ClientToFullName *string `json:"client_to_full_name,omitempty"`

	// The `transfer_to` client loginid
	ClientToLoginid *string `json:"client_to_loginid,omitempty"`

	// Echo of the request made.
	EchoReq PaymentagentTransferResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentTransferResponseMsgType `json:"msg_type"`

	// If set to `1`, transfer success. If set to `2`, dry-run success.
	PaymentagentTransfer *PaymentagentTransferResponsePaymentagentTransfer `json:"paymentagent_transfer,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Reference ID of transfer performed
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Echo of the request made.
type PaymentagentTransferResponseEchoReq map[string]interface{}

type PaymentagentTransferResponseMsgType string

const PaymentagentTransferResponseMsgTypePaymentagentTransfer PaymentagentTransferResponseMsgType = "paymentagent_transfer"

type PaymentagentTransferResponsePaymentagentTransfer int

// Provide justification to perform withdrawal using a Payment Agent.
type PaymentagentWithdrawJustificationRequest struct {
	// Reasons for needing to withdraw using a Payment Agent.
	Message *string `json:"message,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentWithdrawJustificationRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PaymentagentWithdrawJustification PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification `json:"paymentagent_withdraw_justification"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentWithdrawJustificationRequestPassthrough map[string]interface{}

type PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification int

// The result of payment agent withdrawal justification request made.
type PaymentagentWithdrawJustificationResponse struct {
	// Echo of the request made.
	EchoReq PaymentagentWithdrawJustificationResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentWithdrawJustificationResponseMsgType `json:"msg_type"`

	// 1 on success
	PaymentagentWithdrawJustification *int `json:"paymentagent_withdraw_justification,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentWithdrawJustificationResponseEchoReq map[string]interface{}

type PaymentagentWithdrawJustificationResponseMsgType string

const PaymentagentWithdrawJustificationResponseMsgTypePaymentagentWithdrawJustification PaymentagentWithdrawJustificationResponseMsgType = "paymentagent_withdraw_justification"

// Initiate a withdrawal to an approved Payment Agent.
type PaymentagentWithdrawRequest struct {
	// The amount to withdraw to the payment agent.
	Amount float64 `json:"amount"`

	// The currency code.
	Currency string `json:"currency"`

	// [Optional] Remarks about the withdraw. Only letters, numbers, space, period,
	// comma, - ' are allowed.
	Description *string `json:"description,omitempty"`

	// [Optional] If set to 1, just do validation.
	DryRun *PaymentagentWithdrawRequestDryRun `json:"dry_run,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentWithdrawRequestPassthrough `json:"passthrough,omitempty"`

	// The payment agent loginid received from the `paymentagent_list` call.
	PaymentagentLoginid string `json:"paymentagent_loginid"`

	// Must be `1`
	PaymentagentWithdraw PaymentagentWithdrawRequestPaymentagentWithdraw `json:"paymentagent_withdraw"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

type PaymentagentWithdrawRequestDryRun int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentWithdrawRequestPassthrough map[string]interface{}

type PaymentagentWithdrawRequestPaymentagentWithdraw int

// The result of payment agent withdrawal request made.
type PaymentagentWithdrawResponse struct {
	// Echo of the request made.
	EchoReq PaymentagentWithdrawResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentWithdrawResponseMsgType `json:"msg_type"`

	// Payment agent name.
	PaymentagentName *string `json:"paymentagent_name,omitempty"`

	// If set to `1`, withdrawal success. If set to `2`, dry-run success.
	PaymentagentWithdraw *PaymentagentWithdrawResponsePaymentagentWithdraw `json:"paymentagent_withdraw,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Reference ID of withdrawal performed.
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Echo of the request made.
type PaymentagentWithdrawResponseEchoReq map[string]interface{}

type PaymentagentWithdrawResponseMsgType string

const PaymentagentWithdrawResponseMsgTypePaymentagentWithdraw PaymentagentWithdrawResponseMsgType = "paymentagent_withdraw"

type PaymentagentWithdrawResponsePaymentagentWithdraw int

// Retrieve a list of available option payout currencies. If a user is logged in,
// only the currencies available for the account will be returned.
type PayoutCurrenciesRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PayoutCurrenciesRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PayoutCurrencies PayoutCurrenciesRequestPayoutCurrencies `json:"payout_currencies"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PayoutCurrenciesRequestPassthrough map[string]interface{}

type PayoutCurrenciesRequestPayoutCurrencies int

// List of available payout currencies.
type PayoutCurrenciesResponse struct {
	// Echo of the request made.
	EchoReq PayoutCurrenciesResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PayoutCurrenciesResponseMsgType `json:"msg_type"`

	// Available payout currencies. Note: if a user is logged in, only the currency
	// available for the account will be returned.
	PayoutCurrencies []string `json:"payout_currencies,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PayoutCurrenciesResponseEchoReq map[string]interface{}

type PayoutCurrenciesResponseMsgType string

const PayoutCurrenciesResponseMsgTypePayoutCurrencies PayoutCurrenciesResponseMsgType = "payout_currencies"

// To send the ping request to the server. Mostly used to test the connection or to
// keep it alive.
type PingRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PingRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	Ping PingRequestPing `json:"ping"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PingRequestPassthrough map[string]interface{}

type PingRequestPing int

// The response of ping request.
type PingResponse struct {
	// Echo of the request made.
	EchoReq PingResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PingResponseMsgType `json:"msg_type"`

	// Will return 'pong'
	Ping *PingResponsePing `json:"ping,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PingResponseEchoReq map[string]interface{}

type PingResponseMsgType string

const PingResponseMsgTypePing PingResponseMsgType = "ping"

type PingResponsePing string

const PingResponsePingPong PingResponsePing = "pong"

// Receive information about my current portfolio of outstanding options
type PortfolioRequest struct {
	// Return only contracts of the specified types
	ContractType []PortfolioRequestContractTypeElem `json:"contract_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PortfolioRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	Portfolio PortfolioRequestPortfolio `json:"portfolio"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type PortfolioRequestContractTypeElem string

const PortfolioRequestContractTypeElemASIAND PortfolioRequestContractTypeElem = "ASIAND"
const PortfolioRequestContractTypeElemASIANU PortfolioRequestContractTypeElem = "ASIANU"
const PortfolioRequestContractTypeElemCALL PortfolioRequestContractTypeElem = "CALL"
const PortfolioRequestContractTypeElemCALLE PortfolioRequestContractTypeElem = "CALLE"
const PortfolioRequestContractTypeElemCALLSPREAD PortfolioRequestContractTypeElem = "CALLSPREAD"
const PortfolioRequestContractTypeElemDIGITDIFF PortfolioRequestContractTypeElem = "DIGITDIFF"
const PortfolioRequestContractTypeElemDIGITEVEN PortfolioRequestContractTypeElem = "DIGITEVEN"
const PortfolioRequestContractTypeElemDIGITMATCH PortfolioRequestContractTypeElem = "DIGITMATCH"
const PortfolioRequestContractTypeElemDIGITODD PortfolioRequestContractTypeElem = "DIGITODD"
const PortfolioRequestContractTypeElemDIGITOVER PortfolioRequestContractTypeElem = "DIGITOVER"
const PortfolioRequestContractTypeElemDIGITUNDER PortfolioRequestContractTypeElem = "DIGITUNDER"
const PortfolioRequestContractTypeElemEXPIRYMISS PortfolioRequestContractTypeElem = "EXPIRYMISS"
const PortfolioRequestContractTypeElemEXPIRYMISSE PortfolioRequestContractTypeElem = "EXPIRYMISSE"
const PortfolioRequestContractTypeElemEXPIRYRANGE PortfolioRequestContractTypeElem = "EXPIRYRANGE"
const PortfolioRequestContractTypeElemEXPIRYRANGEE PortfolioRequestContractTypeElem = "EXPIRYRANGEE"
const PortfolioRequestContractTypeElemLBFLOATCALL PortfolioRequestContractTypeElem = "LBFLOATCALL"
const PortfolioRequestContractTypeElemLBFLOATPUT PortfolioRequestContractTypeElem = "LBFLOATPUT"
const PortfolioRequestContractTypeElemLBHIGHLOW PortfolioRequestContractTypeElem = "LBHIGHLOW"
const PortfolioRequestContractTypeElemMULTDOWN PortfolioRequestContractTypeElem = "MULTDOWN"
const PortfolioRequestContractTypeElemMULTUP PortfolioRequestContractTypeElem = "MULTUP"
const PortfolioRequestContractTypeElemNOTOUCH PortfolioRequestContractTypeElem = "NOTOUCH"
const PortfolioRequestContractTypeElemONETOUCH PortfolioRequestContractTypeElem = "ONETOUCH"
const PortfolioRequestContractTypeElemPUT PortfolioRequestContractTypeElem = "PUT"
const PortfolioRequestContractTypeElemPUTE PortfolioRequestContractTypeElem = "PUTE"
const PortfolioRequestContractTypeElemPUTSPREAD PortfolioRequestContractTypeElem = "PUTSPREAD"
const PortfolioRequestContractTypeElemRANGE PortfolioRequestContractTypeElem = "RANGE"
const PortfolioRequestContractTypeElemRESETCALL PortfolioRequestContractTypeElem = "RESETCALL"
const PortfolioRequestContractTypeElemRESETPUT PortfolioRequestContractTypeElem = "RESETPUT"
const PortfolioRequestContractTypeElemRUNHIGH PortfolioRequestContractTypeElem = "RUNHIGH"
const PortfolioRequestContractTypeElemRUNLOW PortfolioRequestContractTypeElem = "RUNLOW"
const PortfolioRequestContractTypeElemTICKHIGH PortfolioRequestContractTypeElem = "TICKHIGH"
const PortfolioRequestContractTypeElemTICKLOW PortfolioRequestContractTypeElem = "TICKLOW"
const PortfolioRequestContractTypeElemTURBOSLONG PortfolioRequestContractTypeElem = "TURBOSLONG"
const PortfolioRequestContractTypeElemTURBOSSHORT PortfolioRequestContractTypeElem = "TURBOSSHORT"
const PortfolioRequestContractTypeElemUPORDOWN PortfolioRequestContractTypeElem = "UPORDOWN"
const PortfolioRequestContractTypeElemVANILLALONGCALL PortfolioRequestContractTypeElem = "VANILLALONGCALL"
const PortfolioRequestContractTypeElemVANILLALONGPUT PortfolioRequestContractTypeElem = "VANILLALONGPUT"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PortfolioRequestPassthrough map[string]interface{}

type PortfolioRequestPortfolio int

// Receive a list of outstanding options in the user's portfolio
type PortfolioResponse struct {
	// Echo of the request made.
	EchoReq PortfolioResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PortfolioResponseMsgType `json:"msg_type"`

	// Current account's open positions.
	Portfolio *PortfolioResponsePortfolio `json:"portfolio,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PortfolioResponseEchoReq map[string]interface{}

type PortfolioResponseMsgType string

const PortfolioResponseMsgTypePortfolio PortfolioResponseMsgType = "portfolio"

// Current account's open positions.
type PortfolioResponsePortfolio struct {
	// List of open positions.
	Contracts []PortfolioResponsePortfolioContractsElem `json:"contracts"`
}

// The details of each open position.
type PortfolioResponsePortfolioContractsElem struct {
	// ID of the application where this contract was purchased.
	AppId interface{} `json:"app_id,omitempty"`

	// Buy price
	BuyPrice *float64 `json:"buy_price,omitempty"`

	// Internal contract identifier number (to be used in a `proposal_open_contract`
	// API call).
	ContractId *int `json:"contract_id,omitempty"`

	// Contract type
	ContractType *string `json:"contract_type,omitempty"`

	// Contract currency
	Currency *string `json:"currency,omitempty"`

	// Epoch of start date
	DateStart *int `json:"date_start,omitempty"`

	// Epoch of expiry time
	ExpiryTime *int `json:"expiry_time,omitempty"`

	// Contract description
	Longcode *string `json:"longcode,omitempty"`

	// Payout price
	Payout *float64 `json:"payout,omitempty"`

	// Epoch of purchase time
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// Contract short code description
	Shortcode *string `json:"shortcode,omitempty"`

	// Symbol code
	Symbol *string `json:"symbol,omitempty"`

	// It is the transaction ID. Every contract (buy or sell) and every payment has a
	// unique ID.
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Retrieve a summary of account Profit Table, according to given search criteria
type ProfitTableRequest struct {
	// Return only contracts of the specified types
	ContractType []ProfitTableRequestContractTypeElem `json:"contract_type,omitempty"`

	// [Optional] Start date (epoch or YYYY-MM-DD)
	DateFrom *string `json:"date_from,omitempty"`

	// [Optional] End date (epoch or YYYY-MM-DD)
	DateTo *string `json:"date_to,omitempty"`

	// [Optional] If set to 1, will return full contracts description.
	Description *ProfitTableRequestDescription `json:"description,omitempty"`

	// [Optional] Apply upper limit to count of transactions received.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] Number of transactions to skip.
	Offset *int `json:"offset,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ProfitTableRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	ProfitTable ProfitTableRequestProfitTable `json:"profit_table"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Sort direction.
	Sort ProfitTableRequestSort `json:"sort,omitempty"`
}

type ProfitTableRequestContractTypeElem string

const ProfitTableRequestContractTypeElemACCU ProfitTableRequestContractTypeElem = "ACCU"
const ProfitTableRequestContractTypeElemASIAND ProfitTableRequestContractTypeElem = "ASIAND"
const ProfitTableRequestContractTypeElemASIANU ProfitTableRequestContractTypeElem = "ASIANU"
const ProfitTableRequestContractTypeElemCALL ProfitTableRequestContractTypeElem = "CALL"
const ProfitTableRequestContractTypeElemCALLE ProfitTableRequestContractTypeElem = "CALLE"
const ProfitTableRequestContractTypeElemCALLSPREAD ProfitTableRequestContractTypeElem = "CALLSPREAD"
const ProfitTableRequestContractTypeElemDIGITDIFF ProfitTableRequestContractTypeElem = "DIGITDIFF"
const ProfitTableRequestContractTypeElemDIGITEVEN ProfitTableRequestContractTypeElem = "DIGITEVEN"
const ProfitTableRequestContractTypeElemDIGITMATCH ProfitTableRequestContractTypeElem = "DIGITMATCH"
const ProfitTableRequestContractTypeElemDIGITODD ProfitTableRequestContractTypeElem = "DIGITODD"
const ProfitTableRequestContractTypeElemDIGITOVER ProfitTableRequestContractTypeElem = "DIGITOVER"
const ProfitTableRequestContractTypeElemDIGITUNDER ProfitTableRequestContractTypeElem = "DIGITUNDER"
const ProfitTableRequestContractTypeElemEXPIRYMISS ProfitTableRequestContractTypeElem = "EXPIRYMISS"
const ProfitTableRequestContractTypeElemEXPIRYMISSE ProfitTableRequestContractTypeElem = "EXPIRYMISSE"
const ProfitTableRequestContractTypeElemEXPIRYRANGE ProfitTableRequestContractTypeElem = "EXPIRYRANGE"
const ProfitTableRequestContractTypeElemEXPIRYRANGEE ProfitTableRequestContractTypeElem = "EXPIRYRANGEE"
const ProfitTableRequestContractTypeElemLBFLOATCALL ProfitTableRequestContractTypeElem = "LBFLOATCALL"
const ProfitTableRequestContractTypeElemLBFLOATPUT ProfitTableRequestContractTypeElem = "LBFLOATPUT"
const ProfitTableRequestContractTypeElemLBHIGHLOW ProfitTableRequestContractTypeElem = "LBHIGHLOW"
const ProfitTableRequestContractTypeElemMULTDOWN ProfitTableRequestContractTypeElem = "MULTDOWN"
const ProfitTableRequestContractTypeElemMULTUP ProfitTableRequestContractTypeElem = "MULTUP"
const ProfitTableRequestContractTypeElemNOTOUCH ProfitTableRequestContractTypeElem = "NOTOUCH"
const ProfitTableRequestContractTypeElemONETOUCH ProfitTableRequestContractTypeElem = "ONETOUCH"
const ProfitTableRequestContractTypeElemPUT ProfitTableRequestContractTypeElem = "PUT"
const ProfitTableRequestContractTypeElemPUTE ProfitTableRequestContractTypeElem = "PUTE"
const ProfitTableRequestContractTypeElemPUTSPREAD ProfitTableRequestContractTypeElem = "PUTSPREAD"
const ProfitTableRequestContractTypeElemRANGE ProfitTableRequestContractTypeElem = "RANGE"
const ProfitTableRequestContractTypeElemRESETCALL ProfitTableRequestContractTypeElem = "RESETCALL"
const ProfitTableRequestContractTypeElemRESETPUT ProfitTableRequestContractTypeElem = "RESETPUT"
const ProfitTableRequestContractTypeElemRUNHIGH ProfitTableRequestContractTypeElem = "RUNHIGH"
const ProfitTableRequestContractTypeElemRUNLOW ProfitTableRequestContractTypeElem = "RUNLOW"
const ProfitTableRequestContractTypeElemTICKHIGH ProfitTableRequestContractTypeElem = "TICKHIGH"
const ProfitTableRequestContractTypeElemTICKLOW ProfitTableRequestContractTypeElem = "TICKLOW"
const ProfitTableRequestContractTypeElemTURBOSLONG ProfitTableRequestContractTypeElem = "TURBOSLONG"
const ProfitTableRequestContractTypeElemTURBOSSHORT ProfitTableRequestContractTypeElem = "TURBOSSHORT"
const ProfitTableRequestContractTypeElemUPORDOWN ProfitTableRequestContractTypeElem = "UPORDOWN"
const ProfitTableRequestContractTypeElemVANILLALONGCALL ProfitTableRequestContractTypeElem = "VANILLALONGCALL"
const ProfitTableRequestContractTypeElemVANILLALONGPUT ProfitTableRequestContractTypeElem = "VANILLALONGPUT"

type ProfitTableRequestDescription int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ProfitTableRequestPassthrough map[string]interface{}

type ProfitTableRequestProfitTable int

type ProfitTableRequestSort string

const ProfitTableRequestSortASC ProfitTableRequestSort = "ASC"
const ProfitTableRequestSortDESC ProfitTableRequestSort = "DESC"

// A summary of account profit table is received
type ProfitTableResponse struct {
	// Echo of the request made.
	EchoReq ProfitTableResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ProfitTableResponseMsgType `json:"msg_type"`

	// Account Profit Table.
	ProfitTable *ProfitTableResponseProfitTable `json:"profit_table,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type ProfitTableResponseEchoReq map[string]interface{}

type ProfitTableResponseMsgType string

const ProfitTableResponseMsgTypeProfitTable ProfitTableResponseMsgType = "profit_table"

// Account Profit Table.
type ProfitTableResponseProfitTable struct {
	// Number of transactions returned in this call
	Count *float64 `json:"count,omitempty"`

	// Array of returned transactions
	Transactions []ProfitTableResponseProfitTableTransactionsElem `json:"transactions,omitempty"`
}

type ProfitTableResponseProfitTableTransactionsElem struct {
	// ID of the application where this contract was purchased.
	AppId interface{} `json:"app_id,omitempty"`

	// The buy price
	BuyPrice *float64 `json:"buy_price,omitempty"`

	// The unique contract identifier.
	ContractId interface{} `json:"contract_id,omitempty"`

	// The duration type of the contract.
	DurationType interface{} `json:"duration_type,omitempty"`

	// The description of contract purchased if description is set to 1
	Longcode *string `json:"longcode,omitempty"`

	// Payout price
	Payout *float64 `json:"payout,omitempty"`

	// Epoch purchase time of the transaction
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// The price the contract sold for.
	SellPrice *float64 `json:"sell_price,omitempty"`

	// Epoch sell time of the transaction
	SellTime interface{} `json:"sell_time,omitempty"`

	// Compact description of the contract purchased if description is set to 1
	Shortcode *string `json:"shortcode,omitempty"`

	// The transaction Identifier. Every contract (buy or sell) and every payment has
	// a unique transaction identifier.
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Get latest price (and other information) for a contract in the user's portfolio
type ProposalOpenContractRequest struct {
	// [Optional] Contract ID received from a `portfolio` request. If not set, you
	// will receive stream of all open contracts.
	ContractId *int `json:"contract_id,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ProposalOpenContractRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	ProposalOpenContract ProposalOpenContractRequestProposalOpenContract `json:"proposal_open_contract"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] `1` to stream.
	Subscribe *ProposalOpenContractRequestSubscribe `json:"subscribe,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ProposalOpenContractRequestPassthrough map[string]interface{}

type ProposalOpenContractRequestProposalOpenContract int

type ProposalOpenContractRequestSubscribe int

// Latest price and other details for an open contract in the user's portfolio
type ProposalOpenContractResponse struct {
	// Echo of the request made.
	EchoReq ProposalOpenContractResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType *ProposalOpenContractResponseMsgType `json:"msg_type,omitempty"`

	// Latest price and other details for an open contract
	ProposalOpenContract *ProposalOpenContractResponseProposalOpenContract `json:"proposal_open_contract,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *ProposalOpenContractResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type ProposalOpenContractResponseEchoReq map[string]interface{}

type ProposalOpenContractResponseMsgType string

const ProposalOpenContractResponseMsgTypeProposalOpenContract ProposalOpenContractResponseMsgType = "proposal_open_contract"

// Latest price and other details for an open contract
type ProposalOpenContractResponseProposalOpenContract struct {
	// Account Id
	AccountId *float64 `json:"account_id,omitempty"`

	// Tick details around contract start and end time.
	AuditDetails interface{} `json:"audit_details,omitempty"`

	// Barrier of the contract (if any).
	Barrier interface{} `json:"barrier,omitempty"`

	// The number of barriers a contract has.
	BarrierCount *float64 `json:"barrier_count,omitempty"`

	// Price at which the contract could be sold back to the company.
	BidPrice *float64 `json:"bid_price,omitempty"`

	// Price at which contract was purchased
	BuyPrice *float64 `json:"buy_price,omitempty"`

	// Contains information about contract cancellation option.
	Cancellation *ProposalOpenContractResponseProposalOpenContractCancellation `json:"cancellation,omitempty"`

	// Commission in payout currency amount.
	Commision interface{} `json:"commision,omitempty"`

	// Commission in payout currency amount.
	Commission interface{} `json:"commission,omitempty"`

	// The internal contract identifier
	ContractId *int `json:"contract_id,omitempty"`

	// Contract type.
	ContractType *string `json:"contract_type,omitempty"`

	// The currency code of the contract.
	Currency *string `json:"currency,omitempty"`

	// Spot value if we have license to stream this symbol.
	CurrentSpot *float64 `json:"current_spot,omitempty"`

	// Spot value with the correct precision if we have license to stream this symbol.
	CurrentSpotDisplayValue *string `json:"current_spot_display_value,omitempty"`

	// The corresponding time of the current spot.
	CurrentSpotTime *int `json:"current_spot_time,omitempty"`

	// Expiry date (epoch) of the Contract. Please note that it is not applicable for
	// tick trade contracts.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// Settlement date (epoch) of the contract.
	DateSettlement *int `json:"date_settlement,omitempty"`

	// Start date (epoch) of the contract.
	DateStart *int `json:"date_start,omitempty"`

	// Display name of underlying
	DisplayName *string `json:"display_name,omitempty"`

	// The `bid_price` with the correct precision
	DisplayValue *string `json:"display_value,omitempty"`

	// Same as `entry_tick`. For backwards compatibility.
	EntrySpot interface{} `json:"entry_spot,omitempty"`

	// Same as `entry_tick_display_value`. For backwards compatibility.
	EntrySpotDisplayValue interface{} `json:"entry_spot_display_value,omitempty"`

	// This is the entry spot of the contract. For contracts starting immediately it
	// is the next tick after the start time. For forward-starting contracts it is the
	// spot at the start time.
	EntryTick *float64 `json:"entry_tick,omitempty"`

	// This is the entry spot with the correct precision of the contract. For
	// contracts starting immediately it is the next tick after the start time. For
	// forward-starting contracts it is the spot at the start time.
	EntryTickDisplayValue *string `json:"entry_tick_display_value,omitempty"`

	// This is the epoch time of the entry tick.
	EntryTickTime *int `json:"entry_tick_time,omitempty"`

	// Exit tick can refer to the latest tick at the end time, the tick that fulfils
	// the contract's winning or losing condition for path dependent contracts
	// (Touch/No Touch and Stays Between/Goes Outside) or the tick at which the
	// contract is sold before expiry.
	ExitTick *float64 `json:"exit_tick,omitempty"`

	// Exit tick can refer to the latest tick at the end time, the tick that fulfils
	// the contract's winning or losing condition for path dependent contracts
	// (Touch/No Touch and Stays Between/Goes Outside) or the tick at which the
	// contract is sold before expiry.
	ExitTickDisplayValue *string `json:"exit_tick_display_value,omitempty"`

	// This is the epoch time of the exit tick. Note that since certain instruments
	// don't tick every second, the exit tick time may be a few seconds before the end
	// time.
	ExitTickTime *int `json:"exit_tick_time,omitempty"`

	// This is the expiry time.
	ExpiryTime *int `json:"expiry_time,omitempty"`

	// [Only for accumulator] Growth rate of an accumulator contract.
	GrowthRate *float64 `json:"growth_rate,omitempty"`

	// High barrier of the contract (if any).
	HighBarrier *string `json:"high_barrier,omitempty"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// Whether the contract is expired or not.
	IsExpired *ProposalOpenContractResponseProposalOpenContractIsExpired `json:"is_expired,omitempty"`

	// Whether the contract is forward-starting or not.
	IsForwardStarting *ProposalOpenContractResponseProposalOpenContractIsForwardStarting `json:"is_forward_starting,omitempty"`

	// Whether the contract is an intraday contract.
	IsIntraday *ProposalOpenContractResponseProposalOpenContractIsIntraday `json:"is_intraday,omitempty"`

	// Whether the contract expiry price will depend on the path of the market (e.g.
	// One Touch contract).
	IsPathDependent *ProposalOpenContractResponseProposalOpenContractIsPathDependent `json:"is_path_dependent,omitempty"`

	// Whether the contract is settleable or not.
	IsSettleable *ProposalOpenContractResponseProposalOpenContractIsSettleable `json:"is_settleable,omitempty"`

	// Whether the contract is sold or not.
	IsSold *ProposalOpenContractResponseProposalOpenContractIsSold `json:"is_sold,omitempty"`

	// Whether the contract can be cancelled.
	IsValidToCancel *ProposalOpenContractResponseProposalOpenContractIsValidToCancel `json:"is_valid_to_cancel,omitempty"`

	// Whether the contract can be sold back to the company.
	IsValidToSell *ProposalOpenContractResponseProposalOpenContractIsValidToSell `json:"is_valid_to_sell,omitempty"`

	// Orders are applicable to `MULTUP` and `MULTDOWN` contracts only.
	LimitOrder *ProposalOpenContractResponseProposalOpenContractLimitOrder `json:"limit_order,omitempty"`

	// Text description of the contract purchased, Example: Win payout if Volatility
	// 100 Index is strictly higher than entry spot at 10 minutes after contract start
	// time.
	Longcode *string `json:"longcode,omitempty"`

	// Low barrier of the contract (if any).
	LowBarrier *string `json:"low_barrier,omitempty"`

	// [Only for lookback trades] Multiplier applies when calculating the final payoff
	// for each type of lookback. e.g. (Exit spot - Lowest historical price) *
	// multiplier = Payout
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Only for vanilla options] The implied number of contracts
	NumberOfContracts *float64 `json:"number_of_contracts,omitempty"`

	// Payout value of the contract.
	Payout *float64 `json:"payout,omitempty"`

	// The latest bid price minus buy price.
	Profit *float64 `json:"profit,omitempty"`

	// Profit in percentage.
	ProfitPercentage *float64 `json:"profit_percentage,omitempty"`

	// Epoch of purchase time, will be same as `date_start` for all contracts except
	// forward starting contracts.
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// [Only for reset trades] The epoch time of a barrier reset.
	ResetTime *int `json:"reset_time,omitempty"`

	// Price at which contract was sold, only available when contract has been sold.
	SellPrice *float64 `json:"sell_price,omitempty"`

	// Latest spot value at the sell time. (only present for contracts already sold).
	// Will no longer be supported in the next API release.
	SellSpot *float64 `json:"sell_spot,omitempty"`

	// Latest spot value with the correct precision at the sell time. (only present
	// for contracts already sold). Will no longer be supported in the next API
	// release.
	SellSpotDisplayValue *string `json:"sell_spot_display_value,omitempty"`

	// Epoch time of the sell spot. Note that since certain underlyings don't tick
	// every second, the sell spot time may be a few seconds before the sell time.
	// (only present for contracts already sold). Will no longer be supported in the
	// next API release.
	SellSpotTime *int `json:"sell_spot_time,omitempty"`

	// Epoch time of when the contract was sold (only present for contracts already
	// sold)
	SellTime interface{} `json:"sell_time,omitempty"`

	// Coded description of the contract purchased.
	Shortcode *string `json:"shortcode,omitempty"`

	// Contract status. Will be `sold` if the contract was sold back before expiry,
	// `won` if won and `lost` if lost at expiry. Otherwise will be `open`
	Status *ProposalOpenContractResponseProposalOpenContractStatus `json:"status,omitempty"`

	// Only for tick trades, number of ticks
	TickCount *int `json:"tick_count,omitempty"`

	// [Only for accumulator] Number of ticks passed since entry_tick
	TickPassed *int `json:"tick_passed,omitempty"`

	// Tick stream from entry to end time.
	TickStream []ProposalOpenContractResponseProposalOpenContractTickStreamElem `json:"tick_stream,omitempty"`

	// Every contract has buy and sell transaction ids, i.e. when you purchase a
	// contract we associate it with buy transaction id, and if contract is already
	// sold we associate that with sell transaction id.
	TransactionIds *ProposalOpenContractResponseProposalOpenContractTransactionIds `json:"transaction_ids,omitempty"`

	// The underlying symbol code.
	Underlying *string `json:"underlying,omitempty"`

	// Error message if validation fails
	ValidationError *string `json:"validation_error,omitempty"`

	// Error code if validation fails
	ValidationErrorCode *string `json:"validation_error_code,omitempty"`
}

// Contains information about contract cancellation option.
type ProposalOpenContractResponseProposalOpenContractCancellation struct {
	// Ask price of contract cancellation option.
	AskPrice *float64 `json:"ask_price,omitempty"`

	// Expiry time in epoch for contract cancellation option.
	DateExpiry *int `json:"date_expiry,omitempty"`
}

type ProposalOpenContractResponseProposalOpenContractIsExpired int

type ProposalOpenContractResponseProposalOpenContractIsForwardStarting int

type ProposalOpenContractResponseProposalOpenContractIsIntraday int

type ProposalOpenContractResponseProposalOpenContractIsPathDependent int

type ProposalOpenContractResponseProposalOpenContractIsSettleable int

type ProposalOpenContractResponseProposalOpenContractIsSold int

type ProposalOpenContractResponseProposalOpenContractIsValidToCancel int

type ProposalOpenContractResponseProposalOpenContractIsValidToSell int

// Orders are applicable to `MULTUP` and `MULTDOWN` contracts only.
type ProposalOpenContractResponseProposalOpenContractLimitOrder struct {
	// Contains information where the contract will be closed automatically at the
	// loss specified by the user.
	StopLoss *ProposalOpenContractResponseProposalOpenContractLimitOrderStopLoss `json:"stop_loss,omitempty"`

	// Contains information where the contract will be closed automatically when the
	// value of the contract is close to zero. This is set by the us.
	StopOut *ProposalOpenContractResponseProposalOpenContractLimitOrderStopOut `json:"stop_out,omitempty"`

	// Contain information where the contract will be closed automatically at the
	// profit specified by the user.
	TakeProfit *ProposalOpenContractResponseProposalOpenContractLimitOrderTakeProfit `json:"take_profit,omitempty"`
}

// Contains information where the contract will be closed automatically at the loss
// specified by the user.
type ProposalOpenContractResponseProposalOpenContractLimitOrderStopLoss struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Stop loss amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Stop loss order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

// Contains information where the contract will be closed automatically when the
// value of the contract is close to zero. This is set by the us.
type ProposalOpenContractResponseProposalOpenContractLimitOrderStopOut struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Stop out amount
	OrderAmount *float64 `json:"order_amount,omitempty"`

	// Stop out order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value *string `json:"value,omitempty"`
}

// Contain information where the contract will be closed automatically at the
// profit specified by the user.
type ProposalOpenContractResponseProposalOpenContractLimitOrderTakeProfit struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Take profit amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Take profit order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

type ProposalOpenContractResponseProposalOpenContractStatus struct {
	Value interface{}
}

type ProposalOpenContractResponseProposalOpenContractTickStreamElem struct {
	// Epoch time of a tick or the contract start or end time.
	Epoch *int `json:"epoch,omitempty"`

	// The spot value at the given epoch.
	Tick interface{} `json:"tick,omitempty"`

	// The spot value with the correct precision at the given epoch.
	TickDisplayValue interface{} `json:"tick_display_value,omitempty"`
}

// Every contract has buy and sell transaction ids, i.e. when you purchase a
// contract we associate it with buy transaction id, and if contract is already
// sold we associate that with sell transaction id.
type ProposalOpenContractResponseProposalOpenContractTransactionIds struct {
	// Buy transaction ID for that contract
	Buy *int `json:"buy,omitempty"`

	// Sell transaction ID for that contract, only present when contract is already
	// sold.
	Sell *int `json:"sell,omitempty"`
}

// For subscription requests only.
type ProposalOpenContractResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Gets latest price for a specific contract.
type ProposalRequest struct {
	// [Optional] Proposed contract payout or stake, or multiplier (for lookbacks).
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Barrier for the contract (or last digit prediction for digit
	// contracts). Contracts less than 24 hours in duration would need a relative
	// barrier (barriers which need +/-), where entry spot would be adjusted
	// accordingly with that amount to define a barrier, except for Synthetic Indices
	// as they support both relative and absolute barriers. Not needed for lookbacks.
	Barrier *string `json:"barrier,omitempty"`

	// [Optional] Low barrier for the contract (for contracts with two barriers).
	// Contracts less than 24 hours in duration would need a relative barrier
	// (barriers which need +/-), where entry spot would be adjusted accordingly with
	// that amount to define a barrier, except for Synthetic Indices as they support
	// both relative and absolute barriers. Not needed for lookbacks.
	Barrier2 *string `json:"barrier2,omitempty"`

	// [Optional] Barrier range for callputspread.
	BarrierRange *ProposalRequestBarrierRange `json:"barrier_range,omitempty"`

	// [Optional] Indicates type of the `amount`.
	Basis *ProposalRequestBasis `json:"basis,omitempty"`

	// Cancellation duration option (only for `MULTUP` and `MULTDOWN` contracts).
	Cancellation *string `json:"cancellation,omitempty"`

	// The proposed contract type
	ContractType ProposalRequestContractType `json:"contract_type"`

	// This can only be the account-holder's currency (obtained from
	// `payout_currencies` call).
	Currency string `json:"currency"`

	// [Optional] Epoch value of the expiry time of the contract. Either date_expiry
	// or duration is required.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// [Optional] Indicates epoch value of the starting time of the contract. If left
	// empty, the start time of the contract is now.
	DateStart *int `json:"date_start,omitempty"`

	// [Optional] Duration quantity. Either date_expiry or duration is required.
	Duration *int `json:"duration,omitempty"`

	// [Optional] Duration unit - `s`: seconds, `m`: minutes, `h`: hours, `d`: days,
	// `t`: ticks.
	DurationUnit ProposalRequestDurationUnit `json:"duration_unit,omitempty"`

	// [Optional] Growth rate of an accumulator contract.
	GrowthRate *float64 `json:"growth_rate,omitempty"`

	// Add an order to close the contract once the order condition is met (only for
	// `MULTUP` and `MULTDOWN` and 'ACCU' contracts). Supported orders: `take_profit`,
	// `stop_loss`.
	LimitOrder *ProposalRequestLimitOrder `json:"limit_order,omitempty"`

	// [Optional] The multiplier for non-binary options. E.g. lookbacks.
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ProposalRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] The product type.
	ProductType ProposalRequestProductType `json:"product_type,omitempty"`

	// Must be `1`
	Proposal ProposalRequestProposal `json:"proposal"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] The tick that is predicted to have the highest/lowest value - for
	// `TICKHIGH` and `TICKLOW` contracts.
	SelectedTick *int `json:"selected_tick,omitempty"`

	// [Optional] 1 - to initiate a realtime stream of prices. Note that tick trades
	// (without a user-defined barrier), digit trades and less than 24 hours
	// at-the-money contracts for the following underlying symbols are not streamed:
	// `R_10`, `R_25`, `R_50`, `R_75`, `R_100`, `RDBULL`, `RDBEAR` (this is because
	// their price is constant).
	Subscribe *ProposalRequestSubscribe `json:"subscribe,omitempty"`

	// The short symbol name (obtained from `active_symbols` call).
	Symbol string `json:"symbol"`

	// [Optional] Required only for multi-barrier trading. Defines the epoch value of
	// the trading period start time.
	TradingPeriodStart *int `json:"trading_period_start,omitempty"`
}

type ProposalRequestBarrierRange string

const ProposalRequestBarrierRangeMiddle ProposalRequestBarrierRange = "middle"
const ProposalRequestBarrierRangeTight ProposalRequestBarrierRange = "tight"
const ProposalRequestBarrierRangeWide ProposalRequestBarrierRange = "wide"

type ProposalRequestBasis string

const ProposalRequestBasisPayout ProposalRequestBasis = "payout"
const ProposalRequestBasisStake ProposalRequestBasis = "stake"

type ProposalRequestContractType string

const ProposalRequestContractTypeACCU ProposalRequestContractType = "ACCU"
const ProposalRequestContractTypeASIAND ProposalRequestContractType = "ASIAND"
const ProposalRequestContractTypeASIANU ProposalRequestContractType = "ASIANU"
const ProposalRequestContractTypeCALL ProposalRequestContractType = "CALL"
const ProposalRequestContractTypeCALLE ProposalRequestContractType = "CALLE"
const ProposalRequestContractTypeCALLSPREAD ProposalRequestContractType = "CALLSPREAD"
const ProposalRequestContractTypeDIGITDIFF ProposalRequestContractType = "DIGITDIFF"
const ProposalRequestContractTypeDIGITEVEN ProposalRequestContractType = "DIGITEVEN"
const ProposalRequestContractTypeDIGITMATCH ProposalRequestContractType = "DIGITMATCH"
const ProposalRequestContractTypeDIGITODD ProposalRequestContractType = "DIGITODD"
const ProposalRequestContractTypeDIGITOVER ProposalRequestContractType = "DIGITOVER"
const ProposalRequestContractTypeDIGITUNDER ProposalRequestContractType = "DIGITUNDER"
const ProposalRequestContractTypeEXPIRYMISS ProposalRequestContractType = "EXPIRYMISS"
const ProposalRequestContractTypeEXPIRYMISSE ProposalRequestContractType = "EXPIRYMISSE"
const ProposalRequestContractTypeEXPIRYRANGE ProposalRequestContractType = "EXPIRYRANGE"
const ProposalRequestContractTypeEXPIRYRANGEE ProposalRequestContractType = "EXPIRYRANGEE"
const ProposalRequestContractTypeLBFLOATCALL ProposalRequestContractType = "LBFLOATCALL"
const ProposalRequestContractTypeLBFLOATPUT ProposalRequestContractType = "LBFLOATPUT"
const ProposalRequestContractTypeLBHIGHLOW ProposalRequestContractType = "LBHIGHLOW"
const ProposalRequestContractTypeMULTDOWN ProposalRequestContractType = "MULTDOWN"
const ProposalRequestContractTypeMULTUP ProposalRequestContractType = "MULTUP"
const ProposalRequestContractTypeNOTOUCH ProposalRequestContractType = "NOTOUCH"
const ProposalRequestContractTypeONETOUCH ProposalRequestContractType = "ONETOUCH"
const ProposalRequestContractTypePUT ProposalRequestContractType = "PUT"
const ProposalRequestContractTypePUTE ProposalRequestContractType = "PUTE"
const ProposalRequestContractTypePUTSPREAD ProposalRequestContractType = "PUTSPREAD"
const ProposalRequestContractTypeRANGE ProposalRequestContractType = "RANGE"
const ProposalRequestContractTypeRESETCALL ProposalRequestContractType = "RESETCALL"
const ProposalRequestContractTypeRESETPUT ProposalRequestContractType = "RESETPUT"
const ProposalRequestContractTypeRUNHIGH ProposalRequestContractType = "RUNHIGH"
const ProposalRequestContractTypeRUNLOW ProposalRequestContractType = "RUNLOW"
const ProposalRequestContractTypeTICKHIGH ProposalRequestContractType = "TICKHIGH"
const ProposalRequestContractTypeTICKLOW ProposalRequestContractType = "TICKLOW"
const ProposalRequestContractTypeTURBOSLONG ProposalRequestContractType = "TURBOSLONG"
const ProposalRequestContractTypeTURBOSSHORT ProposalRequestContractType = "TURBOSSHORT"
const ProposalRequestContractTypeUPORDOWN ProposalRequestContractType = "UPORDOWN"
const ProposalRequestContractTypeVANILLALONGCALL ProposalRequestContractType = "VANILLALONGCALL"
const ProposalRequestContractTypeVANILLALONGPUT ProposalRequestContractType = "VANILLALONGPUT"

type ProposalRequestDurationUnit string

const ProposalRequestDurationUnitD ProposalRequestDurationUnit = "d"
const ProposalRequestDurationUnitH ProposalRequestDurationUnit = "h"
const ProposalRequestDurationUnitM ProposalRequestDurationUnit = "m"
const ProposalRequestDurationUnitS ProposalRequestDurationUnit = "s"
const ProposalRequestDurationUnitT ProposalRequestDurationUnit = "t"

// Add an order to close the contract once the order condition is met (only for
// `MULTUP` and `MULTDOWN` and 'ACCU' contracts). Supported orders: `take_profit`,
// `stop_loss`.
type ProposalRequestLimitOrder struct {
	// Contract will be automatically closed when the value of the contract reaches a
	// specific loss.
	StopLoss *float64 `json:"stop_loss,omitempty"`

	// Contract will be automatically closed when the value of the contract reaches a
	// specific profit.
	TakeProfit *float64 `json:"take_profit,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ProposalRequestPassthrough map[string]interface{}

type ProposalRequestProductType string

const ProposalRequestProductTypeBasic ProposalRequestProductType = "basic"

type ProposalRequestProposal int

type ProposalRequestSubscribe int

// Latest price and other details for a given contract
type ProposalResponse struct {
	// Echo of the request made.
	EchoReq ProposalResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ProposalResponseMsgType `json:"msg_type"`

	// Latest price and other details for a given contract
	Proposal *ProposalResponseProposal `json:"proposal,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *ProposalResponseSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type ProposalResponseEchoReq map[string]interface{}

type ProposalResponseMsgType string

const ProposalResponseMsgTypeProposal ProposalResponseMsgType = "proposal"

// Latest price and other details for a given contract
type ProposalResponseProposal struct {
	// The ask price.
	AskPrice float64 `json:"ask_price"`

	// [Only for vanilla options] The choices of predefined strike price for client to
	// choose
	BarrierChoices []interface{} `json:"barrier_choices,omitempty"`

	// Contains information about contract cancellation option.
	Cancellation *ProposalResponseProposalCancellation `json:"cancellation,omitempty"`

	// Commission changed in percentage (%).
	Commission interface{} `json:"commission,omitempty"`

	// Contains contract information. (Only applicable for accumulator).
	ContractDetails *ProposalResponseProposalContractDetails `json:"contract_details,omitempty"`

	// The end date of the contract.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// The start date of the contract.
	DateStart int `json:"date_start"`

	// Same as `ask_price`.
	DisplayValue string `json:"display_value"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`

	// Contains limit order information. (Only applicable for contract with limit
	// order).
	LimitOrder *ProposalResponseProposalLimitOrder `json:"limit_order,omitempty"`

	// Example: Win payout if Random 100 Index is strictly higher than entry spot at
	// 15 minutes after contract start time.
	Longcode string `json:"longcode"`

	// [Only for vanilla options and turbos options] Maximum stakes allowed
	MaxStake *float64 `json:"max_stake,omitempty"`

	// [Only for vanilla options and turbos options] Minimum stakes allowed
	MinStake *float64 `json:"min_stake,omitempty"`

	// [Only for lookback trades] Multiplier applies when calculating the final payoff
	// for each type of lookback. e.g. (Exit spot - Lowest historical price) *
	// multiplier = Payout
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Only for vanilla or turbos options] The implied number of contracts
	NumberOfContracts *float64 `json:"number_of_contracts,omitempty"`

	// The payout amount of the contract.
	Payout float64 `json:"payout"`

	// Spot value (if there are no Exchange data-feed licensing restrictions for the
	// underlying symbol).
	Spot float64 `json:"spot"`

	// The corresponding time of the spot value.
	SpotTime int `json:"spot_time"`
}

// Contains information about contract cancellation option.
type ProposalResponseProposalCancellation struct {
	// Ask price of contract cancellation option.
	AskPrice *float64 `json:"ask_price,omitempty"`

	// Expiry time in epoch for contract cancellation option.
	DateExpiry *int `json:"date_expiry,omitempty"`
}

// Contains contract information. (Only applicable for accumulator).
type ProposalResponseProposalContractDetails struct {
	// High barrier calculated based on current spot
	HighBarrier *string `json:"high_barrier,omitempty"`

	// Epoch of last tick considered for stat chart
	LastTickEpoch *int `json:"last_tick_epoch,omitempty"`

	// Low barrier calculated based on current spot
	LowBarrier *string `json:"low_barrier,omitempty"`

	// Maximum payout that user can get out of a contract, contract will close
	// automatically if payout reaches this number
	MaximumPayout *float64 `json:"maximum_payout,omitempty"`

	// Maximum duration that a contract can last, contract will close automatically
	// after this number of ticks
	MaximumTicks *int `json:"maximum_ticks,omitempty"`

	// Tick size barrier for Accumulator contracts
	TickSizeBarrier *float64 `json:"tick_size_barrier,omitempty"`

	// An array of numbers  to build a stat chart - each number represents the
	// duration that spot stayed between barries
	TicksStayedIn []int `json:"ticks_stayed_in,omitempty"`
}

// Contains limit order information. (Only applicable for contract with limit
// order).
type ProposalResponseProposalLimitOrder struct {
	// Contains information where the contract will be closed automatically at the
	// loss specified by the user.
	StopLoss *ProposalResponseProposalLimitOrderStopLoss `json:"stop_loss,omitempty"`

	// Contains information where the contract will be closed automatically when the
	// value of the contract is close to zero. This is set by the us.
	StopOut *ProposalResponseProposalLimitOrderStopOut `json:"stop_out,omitempty"`

	// Contains information where the contract will be closed automatically at the
	// profit specified by the user.
	TakeProfit *ProposalResponseProposalLimitOrderTakeProfit `json:"take_profit,omitempty"`
}

// Contains information where the contract will be closed automatically at the loss
// specified by the user.
type ProposalResponseProposalLimitOrderStopLoss struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Stop loss amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Stop loss order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

// Contains information where the contract will be closed automatically when the
// value of the contract is close to zero. This is set by the us.
type ProposalResponseProposalLimitOrderStopOut struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Stop out amount
	OrderAmount *float64 `json:"order_amount,omitempty"`

	// Stop out order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value *string `json:"value,omitempty"`
}

// Contains information where the contract will be closed automatically at the
// profit specified by the user.
type ProposalResponseProposalLimitOrderTakeProfit struct {
	// Localized display name
	DisplayName *string `json:"display_name,omitempty"`

	// Take profit amount
	OrderAmount interface{} `json:"order_amount,omitempty"`

	// Take profit order epoch
	OrderDate *int `json:"order_date,omitempty"`

	// Pip-sized barrier value
	Value interface{} `json:"value,omitempty"`
}

// For subscription requests only.
type ProposalResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Retrieve summary of client's trades and account for the Reality Check facility.
// A 'reality check' means a display of time elapsed since the session began, and
// associated client profit/loss. The Reality Check facility is a regulatory
// requirement for certain landing companies.
type RealityCheckRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough RealityCheckRequestPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	RealityCheck RealityCheckRequestRealityCheck `json:"reality_check"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type RealityCheckRequestPassthrough map[string]interface{}

type RealityCheckRequestRealityCheck int

// This gives summary of client's trades and account for reality check
type RealityCheckResponse struct {
	// Echo of the request made.
	EchoReq RealityCheckResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType RealityCheckResponseMsgType `json:"msg_type"`

	// Reality check summary of trades.
	RealityCheck *RealityCheckResponseRealityCheck `json:"reality_check,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type RealityCheckResponseEchoReq map[string]interface{}

type RealityCheckResponseMsgType string

const RealityCheckResponseMsgTypeRealityCheck RealityCheckResponseMsgType = "reality_check"

// Reality check summary of trades.
type RealityCheckResponseRealityCheck struct {
	// Total amount of contract purchased.
	BuyAmount *float64 `json:"buy_amount,omitempty"`

	// Total count of contract purchased.
	BuyCount *int `json:"buy_count,omitempty"`

	// Currency of client account i.e currency for trading
	Currency *string `json:"currency,omitempty"`

	// Client loginid.
	Loginid *string `json:"loginid,omitempty"`

	// Total count of contracts that are not yet expired.
	OpenContractCount *int `json:"open_contract_count,omitempty"`

	// Indicative profit of contract as per current market price.
	PotentialProfit *float64 `json:"potential_profit,omitempty"`

	// Total amount of contracts sold.
	SellAmount *float64 `json:"sell_amount,omitempty"`

	// Total count of contract sold.
	SellCount *int `json:"sell_count,omitempty"`

	// Reality check summary start time epoch
	StartTime *int `json:"start_time,omitempty"`
}

// This call returns a list of countries and 2-letter country codes, suitable for
// populating the account opening form.
type ResidenceListRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ResidenceListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	ResidenceList ResidenceListRequestResidenceList `json:"residence_list"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ResidenceListRequestPassthrough map[string]interface{}

type ResidenceListRequestResidenceList int

// A message with Residence List
type ResidenceListResponse struct {
	// Echo of the request made.
	EchoReq ResidenceListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ResidenceListResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// List of countries for account opening
	ResidenceList []ResidenceListResponseResidenceListElem `json:"residence_list,omitempty"`
}

// Echo of the request made.
type ResidenceListResponseEchoReq map[string]interface{}

type ResidenceListResponseMsgType string

const ResidenceListResponseMsgTypeResidenceList ResidenceListResponseMsgType = "residence_list"

type ResidenceListResponseResidenceListElem struct {
	// Disabled.
	Disabled *string `json:"disabled,omitempty"`

	// Information about identity options available
	Identity *ResidenceListResponseResidenceListElemIdentity `json:"identity,omitempty"`

	// IDD code of country
	PhoneIdd interface{} `json:"phone_idd,omitempty"`

	// Selected.
	Selected *string `json:"selected,omitempty"`

	// Country full name
	Text *string `json:"text,omitempty"`

	// Country tax identifier format
	TinFormat []string `json:"tin_format,omitempty"`

	// 2-letter country code
	Value *string `json:"value,omitempty"`
}

// Information about identity options available
type ResidenceListResponseResidenceListElemIdentity struct {
	// Identity services configuration
	Services *ResidenceListResponseResidenceListElemIdentityServices `json:"services,omitempty"`
}

// Identity services configuration
type ResidenceListResponseResidenceListElemIdentityServices struct {
	// IDV configuration
	Idv *ResidenceListResponseResidenceListElemIdentityServicesIdv `json:"idv,omitempty"`

	// Onfido configuration
	Onfido *ResidenceListResponseResidenceListElemIdentityServicesOnfido `json:"onfido,omitempty"`
}

// IDV configuration
type ResidenceListResponseResidenceListElemIdentityServicesIdv struct {
	// Documents supported by the IDV service in this country
	DocumentsSupported ResidenceListResponseResidenceListElemIdentityServicesIdvDocumentsSupported `json:"documents_supported,omitempty"`

	// Flag which indicates whether this country has IDV visual samples
	HasVisualSample *ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample `json:"has_visual_sample,omitempty"`

	// Flag which indicates whether IDV is available in this country
	IsCountrySupported *ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported `json:"is_country_supported,omitempty"`
}

// Documents supported by the IDV service in this country
type ResidenceListResponseResidenceListElemIdentityServicesIdvDocumentsSupported map[string]interface{}

type ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample int

type ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported int

// Onfido configuration
type ResidenceListResponseResidenceListElemIdentityServicesOnfido struct {
	// Documents supported by the IDV service in this country
	DocumentsSupported ResidenceListResponseResidenceListElemIdentityServicesOnfidoDocumentsSupported `json:"documents_supported,omitempty"`

	// Flag which indicates whether Onfido is available in this country
	IsCountrySupported *ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported `json:"is_country_supported,omitempty"`
}

// Documents supported by the IDV service in this country
type ResidenceListResponseResidenceListElemIdentityServicesOnfidoDocumentsSupported map[string]interface{}

type ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported int

// Used for revoking access of particular app.
type RevokeOauthAppRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough RevokeOauthAppRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The application ID to revoke.
	RevokeOauthApp int `json:"revoke_oauth_app"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type RevokeOauthAppRequestPassthrough map[string]interface{}

// A message with revoking a used application
type RevokeOauthAppResponse struct {
	// Echo of the request made.
	EchoReq RevokeOauthAppResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType RevokeOauthAppResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// `1` on success
	RevokeOauthApp *int `json:"revoke_oauth_app,omitempty"`
}

// Echo of the request made.
type RevokeOauthAppResponseEchoReq map[string]interface{}

type RevokeOauthAppResponseMsgType string

const RevokeOauthAppResponseMsgTypeRevokeOauthApp RevokeOauthAppResponseMsgType = "revoke_oauth_app"

// Sell contracts for multiple accounts simultaneously. Uses the shortcode response
// from `buy_contract_for_multiple_accounts` to identify the contract, and
// authorisation tokens to select which accounts to sell those contracts on. Note
// that only the accounts identified by the tokens will be affected. This will not
// sell the contract on the currently-authorised account unless you include the
// token for the current account.
type SellContractForMultipleAccountsRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SellContractForMultipleAccountsRequestPassthrough `json:"passthrough,omitempty"`

	// Minimum price at which to sell the contract, or `0` for 'sell at market'.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SellContractForMultipleAccounts SellContractForMultipleAccountsRequestSellContractForMultipleAccounts `json:"sell_contract_for_multiple_accounts"`

	// An internal ID used to identify the contract which was originally bought. This
	// is returned from the `buy` and `buy_contract_for_multiple_accounts` calls.
	Shortcode string `json:"shortcode"`

	// Authorisation tokens which select the accounts to sell use for the affected
	// accounts.
	Tokens []string `json:"tokens"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SellContractForMultipleAccountsRequestPassthrough map[string]interface{}

type SellContractForMultipleAccountsRequestSellContractForMultipleAccounts int

// Confirmation of the sale status for the selected contracts and accounts.
type SellContractForMultipleAccountsResponse struct {
	// Echo of the request made.
	EchoReq SellContractForMultipleAccountsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SellContractForMultipleAccountsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Status information for each affected account.
	SellContractForMultipleAccounts *SellContractForMultipleAccountsResponseSellContractForMultipleAccounts `json:"sell_contract_for_multiple_accounts,omitempty"`
}

// Echo of the request made.
type SellContractForMultipleAccountsResponseEchoReq map[string]interface{}

type SellContractForMultipleAccountsResponseMsgType string

const SellContractForMultipleAccountsResponseMsgTypeSellContractForMultipleAccounts SellContractForMultipleAccountsResponseMsgType = "sell_contract_for_multiple_accounts"

// Status information for each affected account.
type SellContractForMultipleAccountsResponseSellContractForMultipleAccounts struct {
	// The result of sell for multiple accounts request.
	Result []interface{} `json:"result,omitempty"`
}

// This call will try to sell any expired contracts and return the number of sold
// contracts.
type SellExpiredRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SellExpiredRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SellExpired SellExpiredRequestSellExpired `json:"sell_expired"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SellExpiredRequestPassthrough map[string]interface{}

type SellExpiredRequestSellExpired int

// The result of sell expired contract
type SellExpiredResponse struct {
	// Echo of the request made.
	EchoReq SellExpiredResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SellExpiredResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Sell expired contract object containing count of contracts sold
	SellExpired *SellExpiredResponseSellExpired `json:"sell_expired,omitempty"`
}

// Echo of the request made.
type SellExpiredResponseEchoReq map[string]interface{}

type SellExpiredResponseMsgType string

const SellExpiredResponseMsgTypeSellExpired SellExpiredResponseMsgType = "sell_expired"

// Sell expired contract object containing count of contracts sold
type SellExpiredResponseSellExpired struct {
	// The number of contracts that has been sold.
	Count *int `json:"count,omitempty"`
}

// Sell a Contract as identified from a previous `portfolio` call.
type SellRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SellRequestPassthrough `json:"passthrough,omitempty"`

	// Minimum price at which to sell the contract, or `0` for 'sell at market'.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Pass contract_id received from the `portfolio` call.
	Sell int `json:"sell"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SellRequestPassthrough map[string]interface{}

// A message with transaction results is received
type SellResponse struct {
	// Echo of the request made.
	EchoReq SellResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SellResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Receipt for the transaction
	Sell *SellResponseSell `json:"sell,omitempty"`
}

// Echo of the request made.
type SellResponseEchoReq map[string]interface{}

type SellResponseMsgType string

const SellResponseMsgTypeSell SellResponseMsgType = "sell"

// Receipt for the transaction
type SellResponseSell struct {
	// New account balance after completion of the sale
	BalanceAfter *float64 `json:"balance_after,omitempty"`

	// Internal contract identifier for the sold contract
	ContractId *int `json:"contract_id,omitempty"`

	// Internal transaction identifier for the corresponding buy transaction
	ReferenceId *int `json:"reference_id,omitempty"`

	// Actual effected sale price
	SoldFor *float64 `json:"sold_for,omitempty"`

	// Internal transaction identifier for the sale transaction
	TransactionId *int `json:"transaction_id,omitempty"`
}

// Set account currency, this will be default currency for your account i.e
// currency for trading, deposit. Please note that account currency can only be set
// once, and then can never be changed.
type SetAccountCurrencyRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetAccountCurrencyRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Currency of the account. List of supported currencies can be acquired with
	// `payout_currencies` call.
	SetAccountCurrency string `json:"set_account_currency"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetAccountCurrencyRequestPassthrough map[string]interface{}

// Status of set account currency call
type SetAccountCurrencyResponse struct {
	// Echo of the request made.
	EchoReq SetAccountCurrencyResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SetAccountCurrencyResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// `1`: success, `0`: no change
	SetAccountCurrency *SetAccountCurrencyResponseSetAccountCurrency `json:"set_account_currency,omitempty"`
}

// Echo of the request made.
type SetAccountCurrencyResponseEchoReq map[string]interface{}

type SetAccountCurrencyResponseMsgType string

const SetAccountCurrencyResponseMsgTypeSetAccountCurrency SetAccountCurrencyResponseMsgType = "set_account_currency"

type SetAccountCurrencyResponseSetAccountCurrency int

// This call sets the financial assessment details based on the client's answers to
// analyze whether they possess the experience and knowledge to understand the
// risks involved with binary options trading.
type SetFinancialAssessmentRequest struct {
	// [Optional] The anticipated account turnover.
	AccountTurnover *SetFinancialAssessmentRequestAccountTurnover `json:"account_turnover,omitempty"`

	// [Optional] Binary options trading experience.
	BinaryOptionsTradingExperience *SetFinancialAssessmentRequestBinaryOptionsTradingExperience `json:"binary_options_trading_experience,omitempty"`

	// [Optional] Binary options trading frequency.
	BinaryOptionsTradingFrequency *SetFinancialAssessmentRequestBinaryOptionsTradingFrequency `json:"binary_options_trading_frequency,omitempty"`

	// [Optional] CFDs trading experience.
	CfdTradingExperience *SetFinancialAssessmentRequestCfdTradingExperience `json:"cfd_trading_experience,omitempty"`

	// [Optional] CFDs trading frequency.
	CfdTradingFrequency *SetFinancialAssessmentRequestCfdTradingFrequency `json:"cfd_trading_frequency,omitempty"`

	// [Optional] Level of Education.
	EducationLevel *SetFinancialAssessmentRequestEducationLevel `json:"education_level,omitempty"`

	// [Optional] Industry of Employment.
	EmploymentIndustry *SetFinancialAssessmentRequestEmploymentIndustry `json:"employment_industry,omitempty"`

	// [Optional] Employment Status.
	EmploymentStatus *SetFinancialAssessmentRequestEmploymentStatus `json:"employment_status,omitempty"`

	// [Optional] Estimated Net Worth.
	EstimatedWorth *SetFinancialAssessmentRequestEstimatedWorth `json:"estimated_worth,omitempty"`

	// [Optional] The financial information of a client
	FinancialInformation *SetFinancialAssessmentRequestFinancialInformation `json:"financial_information,omitempty"`

	// [Optional] Forex trading experience.
	ForexTradingExperience *SetFinancialAssessmentRequestForexTradingExperience `json:"forex_trading_experience,omitempty"`

	// [Optional] Forex trading frequency.
	ForexTradingFrequency *SetFinancialAssessmentRequestForexTradingFrequency `json:"forex_trading_frequency,omitempty"`

	// [Optional] Income Source.
	IncomeSource *SetFinancialAssessmentRequestIncomeSource `json:"income_source,omitempty"`

	// [Optional] Net Annual Income.
	NetIncome *SetFinancialAssessmentRequestNetIncome `json:"net_income,omitempty"`

	// [Optional] Occupation.
	Occupation *SetFinancialAssessmentRequestOccupation `json:"occupation,omitempty"`

	// [Optional] Trading experience in other financial instruments.
	OtherInstrumentsTradingExperience *SetFinancialAssessmentRequestOtherInstrumentsTradingExperience `json:"other_instruments_trading_experience,omitempty"`

	// [Optional] Trading frequency in other financial instruments.
	OtherInstrumentsTradingFrequency *SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency `json:"other_instruments_trading_frequency,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetFinancialAssessmentRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SetFinancialAssessment SetFinancialAssessmentRequestSetFinancialAssessment `json:"set_financial_assessment"`

	// [Optional] Source of wealth.
	SourceOfWealth *SetFinancialAssessmentRequestSourceOfWealth `json:"source_of_wealth,omitempty"`

	// [Optional] The trading experience of a client
	TradingExperience *SetFinancialAssessmentRequestTradingExperience `json:"trading_experience,omitempty"`

	// [Optional] The trading experience of a `maltainvest` client
	TradingExperienceRegulated *SetFinancialAssessmentRequestTradingExperienceRegulated `json:"trading_experience_regulated,omitempty"`
}

type SetFinancialAssessmentRequestAccountTurnover string

const SetFinancialAssessmentRequestAccountTurnoverA100001500000 SetFinancialAssessmentRequestAccountTurnover = "$100,001 - $500,000"
const SetFinancialAssessmentRequestAccountTurnoverA2500050000 SetFinancialAssessmentRequestAccountTurnover = "$25,000 - $50,000"
const SetFinancialAssessmentRequestAccountTurnoverA50001100000 SetFinancialAssessmentRequestAccountTurnover = "$50,001 - $100,000"
const SetFinancialAssessmentRequestAccountTurnoverLessThan25000 SetFinancialAssessmentRequestAccountTurnover = "Less than $25,000"
const SetFinancialAssessmentRequestAccountTurnoverOver500000 SetFinancialAssessmentRequestAccountTurnover = "Over $500,000"

type SetFinancialAssessmentRequestBinaryOptionsTradingExperience string

const SetFinancialAssessmentRequestBinaryOptionsTradingExperienceA01Year SetFinancialAssessmentRequestBinaryOptionsTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestBinaryOptionsTradingExperienceA12Years SetFinancialAssessmentRequestBinaryOptionsTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestBinaryOptionsTradingExperienceOver3Years SetFinancialAssessmentRequestBinaryOptionsTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestBinaryOptionsTradingFrequency string

const SetFinancialAssessmentRequestBinaryOptionsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestBinaryOptionsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestBinaryOptionsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestBinaryOptionsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestBinaryOptionsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestBinaryOptionsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestBinaryOptionsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestBinaryOptionsTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestCfdTradingExperience string

const SetFinancialAssessmentRequestCfdTradingExperienceA01Year SetFinancialAssessmentRequestCfdTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestCfdTradingExperienceA12Years SetFinancialAssessmentRequestCfdTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestCfdTradingExperienceOver3Years SetFinancialAssessmentRequestCfdTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestCfdTradingFrequency string

const SetFinancialAssessmentRequestCfdTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestCfdTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestCfdTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestCfdTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestCfdTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestCfdTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestCfdTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestCfdTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestEducationLevel string

const SetFinancialAssessmentRequestEducationLevelPrimary SetFinancialAssessmentRequestEducationLevel = "Primary"
const SetFinancialAssessmentRequestEducationLevelSecondary SetFinancialAssessmentRequestEducationLevel = "Secondary"
const SetFinancialAssessmentRequestEducationLevelTertiary SetFinancialAssessmentRequestEducationLevel = "Tertiary"

type SetFinancialAssessmentRequestEmploymentIndustry string

const SetFinancialAssessmentRequestEmploymentIndustryAgriculture SetFinancialAssessmentRequestEmploymentIndustry = "Agriculture"
const SetFinancialAssessmentRequestEmploymentIndustryConstruction SetFinancialAssessmentRequestEmploymentIndustry = "Construction"
const SetFinancialAssessmentRequestEmploymentIndustryEducation SetFinancialAssessmentRequestEmploymentIndustry = "Education"
const SetFinancialAssessmentRequestEmploymentIndustryFinance SetFinancialAssessmentRequestEmploymentIndustry = "Finance"
const SetFinancialAssessmentRequestEmploymentIndustryFoodServices SetFinancialAssessmentRequestEmploymentIndustry = "Food Services"
const SetFinancialAssessmentRequestEmploymentIndustryHealth SetFinancialAssessmentRequestEmploymentIndustry = "Health"
const SetFinancialAssessmentRequestEmploymentIndustryInformationCommunicationsTechnology SetFinancialAssessmentRequestEmploymentIndustry = "Information & Communications Technology"
const SetFinancialAssessmentRequestEmploymentIndustryLegal SetFinancialAssessmentRequestEmploymentIndustry = "Legal"
const SetFinancialAssessmentRequestEmploymentIndustryManufacturing SetFinancialAssessmentRequestEmploymentIndustry = "Manufacturing"
const SetFinancialAssessmentRequestEmploymentIndustryRealEstate SetFinancialAssessmentRequestEmploymentIndustry = "Real Estate"
const SetFinancialAssessmentRequestEmploymentIndustryScienceEngineering SetFinancialAssessmentRequestEmploymentIndustry = "Science & Engineering"
const SetFinancialAssessmentRequestEmploymentIndustrySocialCultural SetFinancialAssessmentRequestEmploymentIndustry = "Social & Cultural"
const SetFinancialAssessmentRequestEmploymentIndustryTourism SetFinancialAssessmentRequestEmploymentIndustry = "Tourism"
const SetFinancialAssessmentRequestEmploymentIndustryUnemployed SetFinancialAssessmentRequestEmploymentIndustry = "Unemployed"

type SetFinancialAssessmentRequestEmploymentStatus string

const SetFinancialAssessmentRequestEmploymentStatusEmployed SetFinancialAssessmentRequestEmploymentStatus = "Employed"
const SetFinancialAssessmentRequestEmploymentStatusPensioner SetFinancialAssessmentRequestEmploymentStatus = "Pensioner"
const SetFinancialAssessmentRequestEmploymentStatusSelfEmployed SetFinancialAssessmentRequestEmploymentStatus = "Self-Employed"
const SetFinancialAssessmentRequestEmploymentStatusStudent SetFinancialAssessmentRequestEmploymentStatus = "Student"
const SetFinancialAssessmentRequestEmploymentStatusUnemployed SetFinancialAssessmentRequestEmploymentStatus = "Unemployed"

type SetFinancialAssessmentRequestEstimatedWorth string

const SetFinancialAssessmentRequestEstimatedWorthA100000250000 SetFinancialAssessmentRequestEstimatedWorth = "$100,000 - $250,000"
const SetFinancialAssessmentRequestEstimatedWorthA250001500000 SetFinancialAssessmentRequestEstimatedWorth = "$250,001 - $500,000"
const SetFinancialAssessmentRequestEstimatedWorthA5000011000000 SetFinancialAssessmentRequestEstimatedWorth = "$500,001 - $1,000,000"
const SetFinancialAssessmentRequestEstimatedWorthLessThan100000 SetFinancialAssessmentRequestEstimatedWorth = "Less than $100,000"
const SetFinancialAssessmentRequestEstimatedWorthOver1000000 SetFinancialAssessmentRequestEstimatedWorth = "Over $1,000,000"

// [Optional] The financial information of a client
type SetFinancialAssessmentRequestFinancialInformation struct {
	// [Optional] The anticipated account turnover.
	AccountTurnover *SetFinancialAssessmentRequestFinancialInformationAccountTurnover `json:"account_turnover,omitempty"`

	// Level of Education.
	EducationLevel SetFinancialAssessmentRequestFinancialInformationEducationLevel `json:"education_level"`

	// Industry of Employment.
	EmploymentIndustry SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry `json:"employment_industry"`

	// [Optional] Employment Status.
	EmploymentStatus *SetFinancialAssessmentRequestFinancialInformationEmploymentStatus `json:"employment_status,omitempty"`

	// Estimated Net Worth.
	EstimatedWorth SetFinancialAssessmentRequestFinancialInformationEstimatedWorth `json:"estimated_worth"`

	// Income Source.
	IncomeSource SetFinancialAssessmentRequestFinancialInformationIncomeSource `json:"income_source"`

	// Net Annual Income.
	NetIncome SetFinancialAssessmentRequestFinancialInformationNetIncome `json:"net_income"`

	// Occupation.
	Occupation SetFinancialAssessmentRequestFinancialInformationOccupation `json:"occupation"`

	// [Optional] Source of wealth.
	SourceOfWealth *SetFinancialAssessmentRequestFinancialInformationSourceOfWealth `json:"source_of_wealth,omitempty"`
}

type SetFinancialAssessmentRequestFinancialInformationAccountTurnover string

const SetFinancialAssessmentRequestFinancialInformationAccountTurnoverA100001500000 SetFinancialAssessmentRequestFinancialInformationAccountTurnover = "$100,001 - $500,000"
const SetFinancialAssessmentRequestFinancialInformationAccountTurnoverA2500050000 SetFinancialAssessmentRequestFinancialInformationAccountTurnover = "$25,000 - $50,000"
const SetFinancialAssessmentRequestFinancialInformationAccountTurnoverA50001100000 SetFinancialAssessmentRequestFinancialInformationAccountTurnover = "$50,001 - $100,000"
const SetFinancialAssessmentRequestFinancialInformationAccountTurnoverLessThan25000 SetFinancialAssessmentRequestFinancialInformationAccountTurnover = "Less than $25,000"
const SetFinancialAssessmentRequestFinancialInformationAccountTurnoverOver500000 SetFinancialAssessmentRequestFinancialInformationAccountTurnover = "Over $500,000"

type SetFinancialAssessmentRequestFinancialInformationEducationLevel string

const SetFinancialAssessmentRequestFinancialInformationEducationLevelPrimary SetFinancialAssessmentRequestFinancialInformationEducationLevel = "Primary"
const SetFinancialAssessmentRequestFinancialInformationEducationLevelSecondary SetFinancialAssessmentRequestFinancialInformationEducationLevel = "Secondary"
const SetFinancialAssessmentRequestFinancialInformationEducationLevelTertiary SetFinancialAssessmentRequestFinancialInformationEducationLevel = "Tertiary"

type SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry string

const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryAgriculture SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Agriculture"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryConstruction SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Construction"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryEducation SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Education"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryFinance SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Finance"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryFoodServices SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Food Services"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryHealth SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Health"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryInformationCommunicationsTechnology SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Information & Communications Technology"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryLegal SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Legal"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryManufacturing SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Manufacturing"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryRealEstate SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Real Estate"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryScienceEngineering SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Science & Engineering"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustrySocialCultural SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Social & Cultural"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryTourism SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Tourism"
const SetFinancialAssessmentRequestFinancialInformationEmploymentIndustryUnemployed SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = "Unemployed"

type SetFinancialAssessmentRequestFinancialInformationEmploymentStatus string

const SetFinancialAssessmentRequestFinancialInformationEmploymentStatusEmployed SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = "Employed"
const SetFinancialAssessmentRequestFinancialInformationEmploymentStatusPensioner SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = "Pensioner"
const SetFinancialAssessmentRequestFinancialInformationEmploymentStatusSelfEmployed SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = "Self-Employed"
const SetFinancialAssessmentRequestFinancialInformationEmploymentStatusStudent SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = "Student"
const SetFinancialAssessmentRequestFinancialInformationEmploymentStatusUnemployed SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = "Unemployed"

type SetFinancialAssessmentRequestFinancialInformationEstimatedWorth string

const SetFinancialAssessmentRequestFinancialInformationEstimatedWorthA100000250000 SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = "$100,000 - $250,000"
const SetFinancialAssessmentRequestFinancialInformationEstimatedWorthA250001500000 SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = "$250,001 - $500,000"
const SetFinancialAssessmentRequestFinancialInformationEstimatedWorthA5000011000000 SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = "$500,001 - $1,000,000"
const SetFinancialAssessmentRequestFinancialInformationEstimatedWorthLessThan100000 SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = "Less than $100,000"
const SetFinancialAssessmentRequestFinancialInformationEstimatedWorthOver1000000 SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = "Over $1,000,000"

type SetFinancialAssessmentRequestFinancialInformationIncomeSource string

const SetFinancialAssessmentRequestFinancialInformationIncomeSourceInvestmentsDividends SetFinancialAssessmentRequestFinancialInformationIncomeSource = "Investments & Dividends"
const SetFinancialAssessmentRequestFinancialInformationIncomeSourcePension SetFinancialAssessmentRequestFinancialInformationIncomeSource = "Pension"
const SetFinancialAssessmentRequestFinancialInformationIncomeSourceSalariedEmployee SetFinancialAssessmentRequestFinancialInformationIncomeSource = "Salaried Employee"
const SetFinancialAssessmentRequestFinancialInformationIncomeSourceSavingsInheritance SetFinancialAssessmentRequestFinancialInformationIncomeSource = "Savings & Inheritance"
const SetFinancialAssessmentRequestFinancialInformationIncomeSourceSelfEmployed SetFinancialAssessmentRequestFinancialInformationIncomeSource = "Self-Employed"
const SetFinancialAssessmentRequestFinancialInformationIncomeSourceStateBenefits SetFinancialAssessmentRequestFinancialInformationIncomeSource = "State Benefits"

type SetFinancialAssessmentRequestFinancialInformationNetIncome string

const SetFinancialAssessmentRequestFinancialInformationNetIncomeA100001500000 SetFinancialAssessmentRequestFinancialInformationNetIncome = "$100,001 - $500,000"
const SetFinancialAssessmentRequestFinancialInformationNetIncomeA2500050000 SetFinancialAssessmentRequestFinancialInformationNetIncome = "$25,000 - $50,000"
const SetFinancialAssessmentRequestFinancialInformationNetIncomeA50001100000 SetFinancialAssessmentRequestFinancialInformationNetIncome = "$50,001 - $100,000"
const SetFinancialAssessmentRequestFinancialInformationNetIncomeLessThan25000 SetFinancialAssessmentRequestFinancialInformationNetIncome = "Less than $25,000"
const SetFinancialAssessmentRequestFinancialInformationNetIncomeOver500000 SetFinancialAssessmentRequestFinancialInformationNetIncome = "Over $500,000"

type SetFinancialAssessmentRequestFinancialInformationOccupation string

const SetFinancialAssessmentRequestFinancialInformationOccupationAgriculturalForestryAndFisheryWorkers SetFinancialAssessmentRequestFinancialInformationOccupation = "Agricultural, Forestry and Fishery Workers"
const SetFinancialAssessmentRequestFinancialInformationOccupationArmedForces SetFinancialAssessmentRequestFinancialInformationOccupation = "Armed Forces"
const SetFinancialAssessmentRequestFinancialInformationOccupationChiefExecutivesSeniorOfficialsAndLegislators SetFinancialAssessmentRequestFinancialInformationOccupation = "Chief Executives, Senior Officials and Legislators"
const SetFinancialAssessmentRequestFinancialInformationOccupationCleanersAndHelpers SetFinancialAssessmentRequestFinancialInformationOccupation = "Cleaners and Helpers"
const SetFinancialAssessmentRequestFinancialInformationOccupationClerks SetFinancialAssessmentRequestFinancialInformationOccupation = "Clerks"
const SetFinancialAssessmentRequestFinancialInformationOccupationCraftMetalElectricalAndElectronicsWorkers SetFinancialAssessmentRequestFinancialInformationOccupation = "Craft, Metal, Electrical and Electronics Workers"
const SetFinancialAssessmentRequestFinancialInformationOccupationGovernmentOfficers SetFinancialAssessmentRequestFinancialInformationOccupation = "Government Officers"
const SetFinancialAssessmentRequestFinancialInformationOccupationManagers SetFinancialAssessmentRequestFinancialInformationOccupation = "Managers"
const SetFinancialAssessmentRequestFinancialInformationOccupationMiningConstructionManufacturingAndTransportWorkers SetFinancialAssessmentRequestFinancialInformationOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const SetFinancialAssessmentRequestFinancialInformationOccupationPersonalCareSalesAndServiceWorkers SetFinancialAssessmentRequestFinancialInformationOccupation = "Personal Care, Sales and Service Workers"
const SetFinancialAssessmentRequestFinancialInformationOccupationPlantAndMachineOperatorsAndAssemblers SetFinancialAssessmentRequestFinancialInformationOccupation = "Plant and Machine Operators and Assemblers"
const SetFinancialAssessmentRequestFinancialInformationOccupationProfessionals SetFinancialAssessmentRequestFinancialInformationOccupation = "Professionals"
const SetFinancialAssessmentRequestFinancialInformationOccupationStudents SetFinancialAssessmentRequestFinancialInformationOccupation = "Students"
const SetFinancialAssessmentRequestFinancialInformationOccupationUnemployed SetFinancialAssessmentRequestFinancialInformationOccupation = "Unemployed"

type SetFinancialAssessmentRequestFinancialInformationSourceOfWealth string

const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthAccumulationOfIncomeSavings SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Accumulation of Income/Savings"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthCashBusiness SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Cash Business"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthCompanyOwnership SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Company Ownership"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthDivorceSettlement SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Divorce Settlement"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthInheritance SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Inheritance"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthInvestmentIncome SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Investment Income"
const SetFinancialAssessmentRequestFinancialInformationSourceOfWealthSaleOfProperty SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = "Sale of Property"

type SetFinancialAssessmentRequestForexTradingExperience string

const SetFinancialAssessmentRequestForexTradingExperienceA01Year SetFinancialAssessmentRequestForexTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestForexTradingExperienceA12Years SetFinancialAssessmentRequestForexTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestForexTradingExperienceOver3Years SetFinancialAssessmentRequestForexTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestForexTradingFrequency string

const SetFinancialAssessmentRequestForexTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestForexTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestForexTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestForexTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestForexTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestForexTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestForexTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestForexTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestIncomeSource string

const SetFinancialAssessmentRequestIncomeSourceInvestmentsDividends SetFinancialAssessmentRequestIncomeSource = "Investments & Dividends"
const SetFinancialAssessmentRequestIncomeSourcePension SetFinancialAssessmentRequestIncomeSource = "Pension"
const SetFinancialAssessmentRequestIncomeSourceSalariedEmployee SetFinancialAssessmentRequestIncomeSource = "Salaried Employee"
const SetFinancialAssessmentRequestIncomeSourceSavingsInheritance SetFinancialAssessmentRequestIncomeSource = "Savings & Inheritance"
const SetFinancialAssessmentRequestIncomeSourceSelfEmployed SetFinancialAssessmentRequestIncomeSource = "Self-Employed"
const SetFinancialAssessmentRequestIncomeSourceStateBenefits SetFinancialAssessmentRequestIncomeSource = "State Benefits"

type SetFinancialAssessmentRequestNetIncome string

const SetFinancialAssessmentRequestNetIncomeA100001500000 SetFinancialAssessmentRequestNetIncome = "$100,001 - $500,000"
const SetFinancialAssessmentRequestNetIncomeA2500050000 SetFinancialAssessmentRequestNetIncome = "$25,000 - $50,000"
const SetFinancialAssessmentRequestNetIncomeA50001100000 SetFinancialAssessmentRequestNetIncome = "$50,001 - $100,000"
const SetFinancialAssessmentRequestNetIncomeLessThan25000 SetFinancialAssessmentRequestNetIncome = "Less than $25,000"
const SetFinancialAssessmentRequestNetIncomeOver500000 SetFinancialAssessmentRequestNetIncome = "Over $500,000"

type SetFinancialAssessmentRequestOccupation string

const SetFinancialAssessmentRequestOccupationAgriculturalForestryAndFisheryWorkers SetFinancialAssessmentRequestOccupation = "Agricultural, Forestry and Fishery Workers"
const SetFinancialAssessmentRequestOccupationArmedForces SetFinancialAssessmentRequestOccupation = "Armed Forces"
const SetFinancialAssessmentRequestOccupationChiefExecutivesSeniorOfficialsAndLegislators SetFinancialAssessmentRequestOccupation = "Chief Executives, Senior Officials and Legislators"
const SetFinancialAssessmentRequestOccupationCleanersAndHelpers SetFinancialAssessmentRequestOccupation = "Cleaners and Helpers"
const SetFinancialAssessmentRequestOccupationClerks SetFinancialAssessmentRequestOccupation = "Clerks"
const SetFinancialAssessmentRequestOccupationCraftMetalElectricalAndElectronicsWorkers SetFinancialAssessmentRequestOccupation = "Craft, Metal, Electrical and Electronics Workers"
const SetFinancialAssessmentRequestOccupationGovernmentOfficers SetFinancialAssessmentRequestOccupation = "Government Officers"
const SetFinancialAssessmentRequestOccupationManagers SetFinancialAssessmentRequestOccupation = "Managers"
const SetFinancialAssessmentRequestOccupationMiningConstructionManufacturingAndTransportWorkers SetFinancialAssessmentRequestOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const SetFinancialAssessmentRequestOccupationPersonalCareSalesAndServiceWorkers SetFinancialAssessmentRequestOccupation = "Personal Care, Sales and Service Workers"
const SetFinancialAssessmentRequestOccupationPlantAndMachineOperatorsAndAssemblers SetFinancialAssessmentRequestOccupation = "Plant and Machine Operators and Assemblers"
const SetFinancialAssessmentRequestOccupationProfessionals SetFinancialAssessmentRequestOccupation = "Professionals"
const SetFinancialAssessmentRequestOccupationStudents SetFinancialAssessmentRequestOccupation = "Students"
const SetFinancialAssessmentRequestOccupationUnemployed SetFinancialAssessmentRequestOccupation = "Unemployed"

type SetFinancialAssessmentRequestOtherInstrumentsTradingExperience string

const SetFinancialAssessmentRequestOtherInstrumentsTradingExperienceA01Year SetFinancialAssessmentRequestOtherInstrumentsTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestOtherInstrumentsTradingExperienceA12Years SetFinancialAssessmentRequestOtherInstrumentsTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestOtherInstrumentsTradingExperienceOver3Years SetFinancialAssessmentRequestOtherInstrumentsTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency string

const SetFinancialAssessmentRequestOtherInstrumentsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestOtherInstrumentsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestOtherInstrumentsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestOtherInstrumentsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency = "6-10 transactions in the past 12 months"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetFinancialAssessmentRequestPassthrough map[string]interface{}

type SetFinancialAssessmentRequestSetFinancialAssessment int

type SetFinancialAssessmentRequestSourceOfWealth string

const SetFinancialAssessmentRequestSourceOfWealthAccumulationOfIncomeSavings SetFinancialAssessmentRequestSourceOfWealth = "Accumulation of Income/Savings"
const SetFinancialAssessmentRequestSourceOfWealthCashBusiness SetFinancialAssessmentRequestSourceOfWealth = "Cash Business"
const SetFinancialAssessmentRequestSourceOfWealthCompanyOwnership SetFinancialAssessmentRequestSourceOfWealth = "Company Ownership"
const SetFinancialAssessmentRequestSourceOfWealthDivorceSettlement SetFinancialAssessmentRequestSourceOfWealth = "Divorce Settlement"
const SetFinancialAssessmentRequestSourceOfWealthInheritance SetFinancialAssessmentRequestSourceOfWealth = "Inheritance"
const SetFinancialAssessmentRequestSourceOfWealthInvestmentIncome SetFinancialAssessmentRequestSourceOfWealth = "Investment Income"
const SetFinancialAssessmentRequestSourceOfWealthSaleOfProperty SetFinancialAssessmentRequestSourceOfWealth = "Sale of Property"

// [Optional] The trading experience of a client
type SetFinancialAssessmentRequestTradingExperience struct {
	// [Optional] Binary options trading experience.
	BinaryOptionsTradingExperience *SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience `json:"binary_options_trading_experience,omitempty"`

	// [Optional] Binary options trading frequency.
	BinaryOptionsTradingFrequency *SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency `json:"binary_options_trading_frequency,omitempty"`

	// [Optional] CFDs trading experience.
	CfdTradingExperience *SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience `json:"cfd_trading_experience,omitempty"`

	// [Optional] CFDs trading frequency.
	CfdTradingFrequency *SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency `json:"cfd_trading_frequency,omitempty"`

	// [Optional] Forex trading experience.
	ForexTradingExperience *SetFinancialAssessmentRequestTradingExperienceForexTradingExperience `json:"forex_trading_experience,omitempty"`

	// [Optional] Forex trading frequency.
	ForexTradingFrequency *SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency `json:"forex_trading_frequency,omitempty"`

	// [Optional] Trading experience in other financial instruments.
	OtherInstrumentsTradingExperience *SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience `json:"other_instruments_trading_experience,omitempty"`

	// [Optional] Trading frequency in other financial instruments.
	OtherInstrumentsTradingFrequency *SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency `json:"other_instruments_trading_frequency,omitempty"`
}

type SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience string

const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperienceA01Year SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperienceA12Years SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperienceOver3Years SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency string

const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience string

const SetFinancialAssessmentRequestTradingExperienceCfdTradingExperienceA01Year SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestTradingExperienceCfdTradingExperienceA12Years SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestTradingExperienceCfdTradingExperienceOver3Years SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency string

const SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestTradingExperienceForexTradingExperience string

const SetFinancialAssessmentRequestTradingExperienceForexTradingExperienceA01Year SetFinancialAssessmentRequestTradingExperienceForexTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestTradingExperienceForexTradingExperienceA12Years SetFinancialAssessmentRequestTradingExperienceForexTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestTradingExperienceForexTradingExperienceOver3Years SetFinancialAssessmentRequestTradingExperienceForexTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency string

const SetFinancialAssessmentRequestTradingExperienceForexTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceForexTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceForexTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceForexTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience string

const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperienceA01Year SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience = "0-1 year"
const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperienceA12Years SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience = "1-2 years"
const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperienceOver3Years SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency string

const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency = "6-10 transactions in the past 12 months"

// [Optional] The trading experience of a `maltainvest` client
type SetFinancialAssessmentRequestTradingExperienceRegulated struct {
	// How much experience do you have in CFD trading?
	CfdExperience SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience `json:"cfd_experience"`

	// How many CFD trades have you placed in the past 12 months?
	CfdFrequency SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency `json:"cfd_frequency"`

	// In your understanding, CFD trading allows you to:
	CfdTradingDefinition SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition `json:"cfd_trading_definition"`

	// How does leverage affect CFD trading?
	LeverageImpactTrading SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading `json:"leverage_impact_trading"`

	// Leverage trading is high-risk, so it's a good idea to use risk management
	// features such as stop loss. Stop loss allows you to
	LeverageTradingHighRiskStopLoss SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss `json:"leverage_trading_high_risk_stop_loss"`

	// When would you be required to pay an initial margin?
	RequiredInitialMargin SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin `json:"required_initial_margin"`

	// Do you understand that you could potentially lose 100% of the money you use to
	// trade?
	RiskTolerance SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance `json:"risk_tolerance"`

	// How much knowledge and experience do you have in relation to online trading?
	SourceOfExperience SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience `json:"source_of_experience"`

	// How much experience do you have with other financial instruments?
	TradingExperienceFinancialInstruments SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments `json:"trading_experience_financial_instruments"`

	// How many trades have you placed with other financial instruments in the past 12
	// months?
	TradingFrequencyFinancialInstruments SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments `json:"trading_frequency_financial_instruments"`
}

type SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience string

const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperienceA12Years SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience = "1 - 2 years"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperienceLessThanAYear SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience = "Less than a year"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperienceNoExperience SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience = "No experience"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperienceOver3Years SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency string

const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = "11 - 39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequencyA15TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = "1 - 5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = "6 - 10 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequencyNoTransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = "No transactions in the past 12 months"

type SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition string

const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinitionMakeALongTermInvestment SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition = "Make a long-term investment."
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinitionPlaceABetOnThePriceMovement SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition = "Place a bet on the price movement."
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinitionPurchaseSharesOfACompanyOrPhysicalCommodities SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition = "Purchase shares of a company or physical commodities."
const SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinitionSpeculateOnThePriceMovement SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition = "Speculate on the price movement."

type SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading string

const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTradingLeverageGuaranteesProfits SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading = "Leverage guarantees profits."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTradingLeverageIsARiskMitigationTechnique SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading = "Leverage is a risk mitigation technique."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTradingLeverageLetsYouOpenLargerPositionsForAFractionOfTheTradeSValue SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading = "Leverage lets you open larger positions for a fraction of the trade's value."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTradingLeveragePreventsYouFromOpeningLargePositions SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading = "Leverage prevents you from opening large positions."

type SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss string

const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLossCancelYourTradeAtAnyTimeWithinAChosenTimeframe SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Cancel your trade at any time within a chosen timeframe."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheLossIsMoreThanOrEqualToASpecificAmount SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Close your trade automatically when the loss is more than or equal to a specific amount."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheProfitIsMoreThanOrEqualToASpecificAmount SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Close your trade automatically when the profit is more than or equal to a specific amount."
const SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLossMakeAGuaranteedProfitOnYourTrade SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Make a guaranteed profit on your trade."

type SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin string

const SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMarginAllOfTheAbove SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin = "All of the above."
const SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMarginWhenBuyingSharesOfACompany SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin = "When buying shares of a company."
const SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMarginWhenOpeningALeveragedCFDTrade SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin = "When opening a Leveraged CFD trade."
const SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMarginWhenTradingMultipliers SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin = "When trading Multipliers."

type SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance string

const SetFinancialAssessmentRequestTradingExperienceRegulatedRiskToleranceNo SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance = "No"
const SetFinancialAssessmentRequestTradingExperienceRegulatedRiskToleranceYes SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance = "Yes"

type SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience string

const SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperienceIHaveAnAcademicDegreeProfessionalCertificationAndOrWorkExperience SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = "I have an academic degree, professional certification, and/or work experience."
const SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperienceIHaveAttendedSeminarsTrainingAndOrWorkshops SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = "I have attended seminars, training, and/or workshops."
const SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperienceIHaveLittleExperience SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = "I have little experience."
const SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperienceIHaveNoKnowledge SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = "I have no knowledge."
const SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperienceITradeForexCFDsAndOtherComplexFinancialInstruments SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = "I trade forex CFDs and other complex financial instruments."

type SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments string

const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstrumentsA12Years SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments = "1 - 2 years"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstrumentsLessThanAYear SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments = "Less than a year"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstrumentsNoExperience SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments = "No experience"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstrumentsOver3Years SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments = "Over 3 years"

type SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments string

const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA1139TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "11 - 39 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA15TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "1 - 5 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA610TransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "6 - 10 transactions in the past 12 months"
const SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsNoTransactionsInThePast12Months SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "No transactions in the past 12 months"

// Set Financial Assessment Receive
type SetFinancialAssessmentResponse struct {
	// Echo of the request made.
	EchoReq SetFinancialAssessmentResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SetFinancialAssessmentResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// The financial assessment score assigned to the submitted financial assessment
	SetFinancialAssessment *SetFinancialAssessmentResponseSetFinancialAssessment `json:"set_financial_assessment,omitempty"`
}

// Echo of the request made.
type SetFinancialAssessmentResponseEchoReq map[string]interface{}

type SetFinancialAssessmentResponseMsgType string

const SetFinancialAssessmentResponseMsgTypeSetFinancialAssessment SetFinancialAssessmentResponseMsgType = "set_financial_assessment"

// The financial assessment score assigned to the submitted financial assessment
type SetFinancialAssessmentResponseSetFinancialAssessment struct {
	// CFD score based on answers
	CfdScore *int `json:"cfd_score,omitempty"`

	// Financial information score based on answers
	FinancialInformationScore *int `json:"financial_information_score,omitempty"`

	// Financial Assessment score based on answers
	TotalScore *int `json:"total_score,omitempty"`

	// Trading experience score based on answers
	TradingScore *int `json:"trading_score,omitempty"`
}

// Set Self-Exclusion (this call should be used in conjunction with
// `get_self_exclusion`)
type SetSelfExclusionRequest struct {
	// [Optional] Exclude me from the website (for a minimum of 6 months, up to a
	// maximum of 5 years). Note: uplifting this self-exclusion may require contacting
	// the company.
	ExcludeUntil interface{} `json:"exclude_until,omitempty"`

	// [Optional] 7-day limit on deposits.
	Max30DayDeposit interface{} `json:"max_30day_deposit,omitempty"`

	// [Optional] 30-day limit on losses.
	Max30DayLosses interface{} `json:"max_30day_losses,omitempty"`

	// [Optional] 30-day turnover limit.
	Max30DayTurnover interface{} `json:"max_30day_turnover,omitempty"`

	// [Optional] 7-day limit on deposits.
	Max7DayDeposit interface{} `json:"max_7day_deposit,omitempty"`

	// [Optional] 7-day limit on losses.
	Max7DayLosses interface{} `json:"max_7day_losses,omitempty"`

	// [Optional] 7-day turnover limit.
	Max7DayTurnover interface{} `json:"max_7day_turnover,omitempty"`

	// [Optional] Maximum account cash balance.
	MaxBalance interface{} `json:"max_balance,omitempty"`

	// [Optional] Daily deposit limit.
	MaxDeposit interface{} `json:"max_deposit,omitempty"`

	// [Optional] Daily limit on losses.
	MaxLosses interface{} `json:"max_losses,omitempty"`

	// [Optional] Maximum number of open positions.
	MaxOpenBets interface{} `json:"max_open_bets,omitempty"`

	// [Optional] Daily turnover limit.
	MaxTurnover interface{} `json:"max_turnover,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetSelfExclusionRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Session duration limit, in minutes.
	SessionDurationLimit interface{} `json:"session_duration_limit,omitempty"`

	// Must be `1`
	SetSelfExclusion SetSelfExclusionRequestSetSelfExclusion `json:"set_self_exclusion"`

	// [Optional] Exclude me from the website (for up to 6 weeks). Requires time in
	// epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted
	// automatically at the expiry of the timeout period.
	TimeoutUntil interface{} `json:"timeout_until,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetSelfExclusionRequestPassthrough map[string]interface{}

type SetSelfExclusionRequestSetSelfExclusion int

// A message with User Self-Exclusion
type SetSelfExclusionResponse struct {
	// Echo of the request made.
	EchoReq SetSelfExclusionResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SetSelfExclusionResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// `1` on success
	SetSelfExclusion *int `json:"set_self_exclusion,omitempty"`
}

// Echo of the request made.
type SetSelfExclusionResponseEchoReq map[string]interface{}

type SetSelfExclusionResponseMsgType string

const SetSelfExclusionResponseMsgTypeSetSelfExclusion SetSelfExclusionResponseMsgType = "set_self_exclusion"

// Set User Settings (this call should be used in conjunction with `get_settings`)
type SetSettingsRequest struct {
	// [Optional] Purpose and reason for requesting the account opening. Only
	// applicable for real money account. Required for clients that have not set it
	// yet. Can only be set once.
	AccountOpeningReason *SetSettingsRequestAccountOpeningReason `json:"account_opening_reason,omitempty"`

	// [Optional] Note: not applicable for virtual account. Required field for real
	// money account.
	AddressCity *string `json:"address_city,omitempty"`

	// [Optional] Note: not applicable for virtual account. Required field for real
	// money account.
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressLine2 interface{} `json:"address_line_2,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] Boolean value 1 or 0, indicating permission to allow others to
	// follow your trades. Note: not applicable for Virtual account. Only allow for
	// real money account.
	AllowCopiers *SetSettingsRequestAllowCopiers `json:"allow_copiers,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code.
	Citizen interface{} `json:"citizen,omitempty"`

	// [Optional] Date of birth format: yyyy-mm-dd (can only be changed on
	// unauthenticated svg accounts).
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// Boolean value 1 or 0, indicating if user email belong to dxtrade exception
	// list.
	DxtradeUserException *SetSettingsRequestDxtradeUserException `json:"dxtrade_user_exception,omitempty"`

	// [Optional] Boolean value 1 or 0, indicating permission to use email address for
	// any contact which may include marketing
	EmailConsent *SetSettingsRequestEmailConsent `json:"email_consent,omitempty"`

	// [Optional] Employment Status.
	EmploymentStatus *SetSettingsRequestEmploymentStatus `json:"employment_status,omitempty"`

	// [Optional] Enable or disable one or multiple features.
	FeatureFlag *SetSettingsRequestFeatureFlag `json:"feature_flag,omitempty"`

	// [Optional] Within 2-50 characters, use only letters, spaces, hyphens,
	// full-stops or apostrophes (can only be changed on unauthenticated svg
	// accounts).
	FirstName *string `json:"first_name,omitempty"`

	// [Optional] Within 2-50 characters, use only letters, spaces, hyphens,
	// full-stops or apostrophes (can only be changed on unauthenticated svg
	// accounts).
	LastName *string `json:"last_name,omitempty"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA
	// (Politically Exposed Person/Relatives and Close Associates). Effective for real
	// accounts only.
	NonPepDeclaration *SetSettingsRequestNonPepDeclaration `json:"non_pep_declaration,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetSettingsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Note: not applicable for virtual account. Starting with `+` followed
	// by 9-35 digits, hyphens or space.
	Phone interface{} `json:"phone,omitempty"`

	// [Optional] Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// [Optional] User's preferred language, ISO standard language code
	PreferredLanguage interface{} `json:"preferred_language,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Required when client wants to be treated as professional. Applicable
	// for financial accounts only.
	RequestProfessionalStatus *SetSettingsRequestRequestProfessionalStatus `json:"request_professional_status,omitempty"`

	// [Optional] 2-letter country code. Note: not applicable for real money account.
	// Only allow for Virtual account without residence set.
	Residence interface{} `json:"residence,omitempty"`

	// [Optional] Accept any value in enum list (can only be changed on
	// unauthenticated svg accounts).
	Salutation *SetSettingsRequestSalutation `json:"salutation,omitempty"`

	// [Optional] Answer to secret question, within 4-50 characters. Required for new
	// account and existing client details will be used if client opens another
	// account.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list. Required for new account and existing
	// client details will be used if client opens another account.
	SecretQuestion *SetSettingsRequestSecretQuestion `json:"secret_question,omitempty"`

	// Must be `1`
	SetSettings SetSettingsRequestSetSettings `json:"set_settings"`

	// [Optional] Tax identification number. Only applicable for real money account.
	// Required for maltainvest landing company.
	TaxIdentificationNumber *string `json:"tax_identification_number,omitempty"`

	// [Optional] Residence for tax purpose. Comma separated iso country code if
	// multiple jurisdictions. Only applicable for real money account. Required for
	// maltainvest landing company.
	TaxResidence *string `json:"tax_residence,omitempty"`

	// [Optional] Enable/Disable Trading Hub dashboard
	TradingHub *SetSettingsRequestTradingHub `json:"trading_hub,omitempty"`
}

type SetSettingsRequestAccountOpeningReason string

const SetSettingsRequestAccountOpeningReasonHedging SetSettingsRequestAccountOpeningReason = "Hedging"
const SetSettingsRequestAccountOpeningReasonIncomeEarning SetSettingsRequestAccountOpeningReason = "Income Earning"
const SetSettingsRequestAccountOpeningReasonPeerToPeerExchange SetSettingsRequestAccountOpeningReason = "Peer-to-peer exchange"
const SetSettingsRequestAccountOpeningReasonSpeculative SetSettingsRequestAccountOpeningReason = "Speculative"

type SetSettingsRequestAllowCopiers int

type SetSettingsRequestDxtradeUserException int

type SetSettingsRequestEmailConsent int

type SetSettingsRequestEmploymentStatus string

const SetSettingsRequestEmploymentStatusEmployed SetSettingsRequestEmploymentStatus = "Employed"
const SetSettingsRequestEmploymentStatusPensioner SetSettingsRequestEmploymentStatus = "Pensioner"
const SetSettingsRequestEmploymentStatusSelfEmployed SetSettingsRequestEmploymentStatus = "Self-Employed"
const SetSettingsRequestEmploymentStatusStudent SetSettingsRequestEmploymentStatus = "Student"
const SetSettingsRequestEmploymentStatusUnemployed SetSettingsRequestEmploymentStatus = "Unemployed"

// [Optional] Enable or disable one or multiple features.
type SetSettingsRequestFeatureFlag struct {
	// [Optional] Boolean value 1 or 0 indicating whether to enable/disable this
	// feature
	Wallet *SetSettingsRequestFeatureFlagWallet `json:"wallet,omitempty"`
}

type SetSettingsRequestFeatureFlagWallet int

type SetSettingsRequestNonPepDeclaration int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetSettingsRequestPassthrough map[string]interface{}

type SetSettingsRequestRequestProfessionalStatus int

type SetSettingsRequestSalutation string

const SetSettingsRequestSalutationMiss SetSettingsRequestSalutation = "Miss"
const SetSettingsRequestSalutationMr SetSettingsRequestSalutation = "Mr"
const SetSettingsRequestSalutationMrs SetSettingsRequestSalutation = "Mrs"
const SetSettingsRequestSalutationMs SetSettingsRequestSalutation = "Ms"

type SetSettingsRequestSecretQuestion string

const SetSettingsRequestSecretQuestionBrandOfFirstCar SetSettingsRequestSecretQuestion = "Brand of first car"
const SetSettingsRequestSecretQuestionFavouriteArtist SetSettingsRequestSecretQuestion = "Favourite artist"
const SetSettingsRequestSecretQuestionFavouriteDish SetSettingsRequestSecretQuestion = "Favourite dish"
const SetSettingsRequestSecretQuestionMemorableDate SetSettingsRequestSecretQuestion = "Memorable date"
const SetSettingsRequestSecretQuestionMemorableTownCity SetSettingsRequestSecretQuestion = "Memorable town/city"
const SetSettingsRequestSecretQuestionMotherSMaidenName SetSettingsRequestSecretQuestion = "Mother's maiden name"
const SetSettingsRequestSecretQuestionNameOfFirstLove SetSettingsRequestSecretQuestion = "Name of first love"
const SetSettingsRequestSecretQuestionNameOfYourPet SetSettingsRequestSecretQuestion = "Name of your pet"

type SetSettingsRequestSetSettings int

type SetSettingsRequestTradingHub int

// A message with User Settings
type SetSettingsResponse struct {
	// Echo of the request made.
	EchoReq SetSettingsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SetSettingsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// 1 on success
	SetSettings *int `json:"set_settings,omitempty"`
}

// Echo of the request made.
type SetSettingsResponseEchoReq map[string]interface{}

type SetSettingsResponseMsgType string

const SetSettingsResponseMsgTypeSetSettings SetSettingsResponseMsgType = "set_settings"

// Retrieve a summary of account transactions, according to given search criteria
type StatementRequest struct {
	// [Optional] To filter the statement according to the type of transaction.
	ActionType *StatementRequestActionType `json:"action_type,omitempty"`

	// [Optional] Start date (epoch)
	DateFrom *int `json:"date_from,omitempty"`

	// [Optional] End date (epoch)
	DateTo *int `json:"date_to,omitempty"`

	// [Optional] If set to 1, will return full contracts description.
	Description *StatementRequestDescription `json:"description,omitempty"`

	// [Optional] Maximum number of transactions to receive.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] Number of transactions to skip.
	Offset *int `json:"offset,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough StatementRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	Statement StatementRequestStatement `json:"statement"`
}

type StatementRequestActionType string

const StatementRequestActionTypeAdjustment StatementRequestActionType = "adjustment"
const StatementRequestActionTypeBuy StatementRequestActionType = "buy"
const StatementRequestActionTypeDeposit StatementRequestActionType = "deposit"
const StatementRequestActionTypeEscrow StatementRequestActionType = "escrow"
const StatementRequestActionTypeSell StatementRequestActionType = "sell"
const StatementRequestActionTypeTransfer StatementRequestActionType = "transfer"
const StatementRequestActionTypeVirtualCredit StatementRequestActionType = "virtual_credit"
const StatementRequestActionTypeWithdrawal StatementRequestActionType = "withdrawal"

type StatementRequestDescription int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type StatementRequestPassthrough map[string]interface{}

type StatementRequestStatement int

// A summary of account statement is received
type StatementResponse struct {
	// Echo of the request made.
	EchoReq StatementResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType StatementResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Account statement.
	Statement *StatementResponseStatement `json:"statement,omitempty"`
}

// Echo of the request made.
type StatementResponseEchoReq map[string]interface{}

type StatementResponseMsgType string

const StatementResponseMsgTypeStatement StatementResponseMsgType = "statement"

// Account statement.
type StatementResponseStatement struct {
	// Number of transactions returned in this call
	Count *float64 `json:"count,omitempty"`

	// Array of returned transactions
	Transactions []StatementResponseStatementTransactionsElem `json:"transactions,omitempty"`
}

type StatementResponseStatementTransactionsElem struct {
	// It is the type of action.
	ActionType *StatementResponseStatementTransactionsElemActionType `json:"action_type,omitempty"`

	// It is the amount of transaction.
	Amount *float64 `json:"amount,omitempty"`

	// ID of the application where this contract was purchased.
	AppId interface{} `json:"app_id,omitempty"`

	// It is the remaining balance.
	BalanceAfter *float64 `json:"balance_after,omitempty"`

	// It is the contract ID.
	ContractId interface{} `json:"contract_id,omitempty"`

	// Contains details about fees used for transfer. It is present only when action
	// type is transfer.
	Fees *StatementResponseStatementTransactionsElemFees `json:"fees,omitempty"`

	// Contains details of account from which amount was transferred. It is present
	// only when action type is transfer.
	From *StatementResponseStatementTransactionsElemFrom `json:"from,omitempty"`

	// The description of contract purchased if description is set to `1`.
	Longcode *string `json:"longcode,omitempty"`

	// Payout price
	Payout interface{} `json:"payout,omitempty"`

	// Time at which contract was purchased, present only for sell transaction
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// Internal transaction identifier for the corresponding buy transaction ( set
	// only for contract selling )
	ReferenceId interface{} `json:"reference_id,omitempty"`

	// Compact description of the contract purchased if description is set to `1`.
	Shortcode interface{} `json:"shortcode,omitempty"`

	// Contains details of account to which amount was transferred. It is present only
	// when action type is transfer.
	To *StatementResponseStatementTransactionsElemTo `json:"to,omitempty"`

	// It is the transaction ID. In statement every contract (buy or sell) and every
	// payment has a unique ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// It is the time of transaction.
	TransactionTime *int `json:"transaction_time,omitempty"`

	// Additional withdrawal details such as typical processing times, if description
	// is set to `1`.
	WithdrawalDetails *string `json:"withdrawal_details,omitempty"`
}

type StatementResponseStatementTransactionsElemActionType string

const StatementResponseStatementTransactionsElemActionTypeAdjustment StatementResponseStatementTransactionsElemActionType = "adjustment"
const StatementResponseStatementTransactionsElemActionTypeBuy StatementResponseStatementTransactionsElemActionType = "buy"
const StatementResponseStatementTransactionsElemActionTypeDeposit StatementResponseStatementTransactionsElemActionType = "deposit"
const StatementResponseStatementTransactionsElemActionTypeHold StatementResponseStatementTransactionsElemActionType = "hold"
const StatementResponseStatementTransactionsElemActionTypeRelease StatementResponseStatementTransactionsElemActionType = "release"
const StatementResponseStatementTransactionsElemActionTypeSell StatementResponseStatementTransactionsElemActionType = "sell"
const StatementResponseStatementTransactionsElemActionTypeTransfer StatementResponseStatementTransactionsElemActionType = "transfer"
const StatementResponseStatementTransactionsElemActionTypeVirtualCredit StatementResponseStatementTransactionsElemActionType = "virtual_credit"
const StatementResponseStatementTransactionsElemActionTypeWithdrawal StatementResponseStatementTransactionsElemActionType = "withdrawal"

// Contains details about fees used for transfer. It is present only when action
// type is transfer.
type StatementResponseStatementTransactionsElemFees struct {
	// Fees amount
	Amount *float64 `json:"amount,omitempty"`

	// Fees currency
	Currency *string `json:"currency,omitempty"`

	// Minimum amount of fees
	Minimum *float64 `json:"minimum,omitempty"`

	// Fees percentage
	Percentage *float64 `json:"percentage,omitempty"`
}

// Contains details of account from which amount was transferred. It is present
// only when action type is transfer.
type StatementResponseStatementTransactionsElemFrom struct {
	// Login id of the account from which money was transferred.
	Loginid *string `json:"loginid,omitempty"`
}

// Contains details of account to which amount was transferred. It is present only
// when action type is transfer.
type StatementResponseStatementTransactionsElemTo struct {
	// Login id of the account to which money was transferred.
	Loginid *string `json:"loginid,omitempty"`
}

// For a given country, returns a list of States of that country. This is useful to
// populate the account opening form.
type StatesListRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough StatesListRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Client's 2-letter country code (obtained from `residence_list` call)
	StatesList string `json:"states_list"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type StatesListRequestPassthrough map[string]interface{}

// A message with States List
type StatesListResponse struct {
	// Echo of the request made.
	EchoReq StatesListResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType StatesListResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// List of states.
	StatesList []StatesListResponseStatesListElem `json:"states_list,omitempty"`
}

// Echo of the request made.
type StatesListResponseEchoReq map[string]interface{}

type StatesListResponseMsgType string

const StatesListResponseMsgTypeStatesList StatesListResponseMsgType = "states_list"

type StatesListResponseStatesListElem struct {
	// The state name.
	Text *string `json:"text,omitempty"`

	// The state code.
	Value *string `json:"value,omitempty"`
}

type StreamTypes string

const StreamTypesBalance StreamTypes = "balance"
const StreamTypesCandles StreamTypes = "candles"
const StreamTypesCashierPayments StreamTypes = "cashier_payments"
const StreamTypesP2PAdvert StreamTypes = "p2p_advert"
const StreamTypesP2PAdvertiser StreamTypes = "p2p_advertiser"
const StreamTypesP2POrder StreamTypes = "p2p_order"
const StreamTypesProposal StreamTypes = "proposal"
const StreamTypesProposalOpenContract StreamTypes = "proposal_open_contract"
const StreamTypesTicks StreamTypes = "ticks"
const StreamTypesTradingPlatformAssetListing StreamTypes = "trading_platform_asset_listing"
const StreamTypesTransaction StreamTypes = "transaction"
const StreamTypesWebsiteStatus StreamTypes = "website_status"

// Get historic tick data for a given symbol.
type TicksHistoryRequest struct {
	// [Optional] 1 - if the market is closed at the end time, or license limit is
	// before end time, adjust interval backwards to compensate.
	AdjustStartTime *TicksHistoryRequestAdjustStartTime `json:"adjust_start_time,omitempty"`

	// [Optional] An upper limit on ticks to receive.
	Count int `json:"count,omitempty"`

	// Epoch value representing the latest boundary of the returned ticks. If `latest`
	// is specified, this will be the latest available timestamp.
	End string `json:"end"`

	// [Optional] Only applicable for style: `candles`. Candle time-dimension width
	// setting. (default: `60`).
	Granularity *TicksHistoryRequestGranularity `json:"granularity,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TicksHistoryRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Epoch value representing the earliest boundary of the returned
	// ticks.
	// - For `"style": "ticks"`: this will default to 1 day ago.
	// - For `"style": "candles"`: it will default to 1 day ago if count or
	// granularity is undefined.
	Start *int `json:"start,omitempty"`

	// [Optional] The tick-output style.
	Style TicksHistoryRequestStyle `json:"style,omitempty"`

	// [Optional] 1 - to send updates whenever a new tick is received.
	Subscribe *TicksHistoryRequestSubscribe `json:"subscribe,omitempty"`

	// Short symbol name (obtained from the `active_symbols` call).
	TicksHistory string `json:"ticks_history"`
}

type TicksHistoryRequestAdjustStartTime int

type TicksHistoryRequestGranularity int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TicksHistoryRequestPassthrough map[string]interface{}

type TicksHistoryRequestStyle string

const TicksHistoryRequestStyleCandles TicksHistoryRequestStyle = "candles"
const TicksHistoryRequestStyleTicks TicksHistoryRequestStyle = "ticks"

type TicksHistoryRequestSubscribe int

// Historic tick data for a single symbol
type TicksHistoryResponse struct {
	// Array of OHLC (open/high/low/close) price values for the given time (only for
	// style=`candles`)
	Candles []TicksHistoryResponseCandlesElem `json:"candles,omitempty"`

	// Echo of the request made.
	EchoReq TicksHistoryResponseEchoReq `json:"echo_req"`

	// Historic tick data for a given symbol. Note: this will always return the latest
	// possible set of ticks with accordance to the parameters specified.
	History *TicksHistoryResponseHistory `json:"history,omitempty"`

	// Type of the response according to the `style` sent in request. Would be
	// `history` or `candles` for the first response, and `tick` or `ohlc` for the
	// rest when subscribed.
	MsgType TicksHistoryResponseMsgType `json:"msg_type"`

	// Indicates the number of decimal points that the returned amounts must be
	// displayed with
	PipSize *float64 `json:"pip_size,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *TicksHistoryResponseSubscription `json:"subscription,omitempty"`
}

type TicksHistoryResponseCandlesElem struct {
	// It is the close price value for the given time
	Close *float64 `json:"close,omitempty"`

	// It is an epoch value
	Epoch *int `json:"epoch,omitempty"`

	// It is the high price value for the given time
	High *float64 `json:"high,omitempty"`

	// It is the low price value for the given time
	Low *float64 `json:"low,omitempty"`

	// It is the open price value for the given time
	Open *float64 `json:"open,omitempty"`
}

// Echo of the request made.
type TicksHistoryResponseEchoReq map[string]interface{}

// Historic tick data for a given symbol. Note: this will always return the latest
// possible set of ticks with accordance to the parameters specified.
type TicksHistoryResponseHistory struct {
	// An array containing list of tick values for the corresponding epoch values in
	// `times` array.
	Prices []float64 `json:"prices,omitempty"`

	// An array containing list of epoch values for the corresponding tick values in
	// `prices` array.
	Times []int `json:"times,omitempty"`
}

type TicksHistoryResponseMsgType string

const TicksHistoryResponseMsgTypeCandles TicksHistoryResponseMsgType = "candles"
const TicksHistoryResponseMsgTypeHistory TicksHistoryResponseMsgType = "history"
const TicksHistoryResponseMsgTypeOhlc TicksHistoryResponseMsgType = "ohlc"
const TicksHistoryResponseMsgTypeTick TicksHistoryResponseMsgType = "tick"

// For subscription requests only.
type TicksHistoryResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Initiate a continuous stream of spot price updates for a given symbol.
type TicksRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TicksRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever a new tick is received.
	Subscribe *TicksRequestSubscribe `json:"subscribe,omitempty"`

	// The short symbol name or array of symbols (obtained from `active_symbols`
	// call).
	Ticks interface{} `json:"ticks"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TicksRequestPassthrough map[string]interface{}

type TicksRequestSubscribe int

// Latest spot price for a given symbol. Continuous responses with a frequency of
// up to one second.
type TicksResponse struct {
	// Echo of the request made.
	EchoReq TicksResponseEchoReq `json:"echo_req"`

	// Type of the response.
	MsgType TicksResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *TicksResponseSubscription `json:"subscription,omitempty"`

	// Tick by tick list of streamed data
	Tick *TicksResponseTick `json:"tick,omitempty"`
}

// Echo of the request made.
type TicksResponseEchoReq map[string]interface{}

type TicksResponseMsgType string

const TicksResponseMsgTypeTick TicksResponseMsgType = "tick"

// For subscription requests only.
type TicksResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Tick by tick list of streamed data
type TicksResponseTick struct {
	// Market ask at the epoch
	Ask *float64 `json:"ask,omitempty"`

	// Market bid at the epoch
	Bid *float64 `json:"bid,omitempty"`

	// Epoch time of the tick
	Epoch *int `json:"epoch,omitempty"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// Indicates the number of decimal points that the returned amounts must be
	// displayed with
	PipSize float64 `json:"pip_size"`

	// Market value at the epoch
	Quote *float64 `json:"quote,omitempty"`

	// Symbol
	Symbol *string `json:"symbol,omitempty"`
}

// Request back-end server epoch time.
type TimeRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TimeRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	Time TimeRequestTime `json:"time"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TimeRequestPassthrough map[string]interface{}

type TimeRequestTime int

// The result of server time request.
type TimeResponse struct {
	// Echo of the request made.
	EchoReq TimeResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TimeResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Epoch of server time.
	Time *int `json:"time,omitempty"`
}

// Echo of the request made.
type TimeResponseEchoReq map[string]interface{}

type TimeResponseMsgType string

const TimeResponseMsgTypeTime TimeResponseMsgType = "time"

// To approve the latest version of terms and conditions.
type TncApprovalRequest struct {
	// [Optional] For Affiliate's Code of Conduct Agreement.
	AffiliateCocAgreement *TncApprovalRequestAffiliateCocAgreement `json:"affiliate_coc_agreement,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TncApprovalRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TncApproval TncApprovalRequestTncApproval `json:"tnc_approval"`

	// [Optional] For `ASK_UK_FUNDS_PROTECTION` in `cashier`.
	UkgcFundsProtection *TncApprovalRequestUkgcFundsProtection `json:"ukgc_funds_protection,omitempty"`
}

type TncApprovalRequestAffiliateCocAgreement int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TncApprovalRequestPassthrough map[string]interface{}

type TncApprovalRequestTncApproval float64

type TncApprovalRequestUkgcFundsProtection int

// The result of T&C approval request.
type TncApprovalResponse struct {
	// Echo of the request made.
	EchoReq TncApprovalResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TncApprovalResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Set terms and conditions 1: success
	TncApproval *TncApprovalResponseTncApproval `json:"tnc_approval,omitempty"`
}

// Echo of the request made.
type TncApprovalResponseEchoReq map[string]interface{}

type TncApprovalResponseMsgType string

const TncApprovalResponseMsgTypeTncApproval TncApprovalResponseMsgType = "tnc_approval"

type TncApprovalResponseTncApproval int

// When a virtual-money's account balance becomes low, it can be topped up using
// this call.
type TopupVirtualRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TopupVirtualRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TopupVirtual TopupVirtualRequestTopupVirtual `json:"topup_virtual"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TopupVirtualRequestPassthrough map[string]interface{}

type TopupVirtualRequestTopupVirtual int

// The result of virtual money top up
type TopupVirtualResponse struct {
	// Echo of the request made.
	EchoReq TopupVirtualResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TopupVirtualResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// The information regarding a successful top up for a virtual money account
	TopupVirtual *TopupVirtualResponseTopupVirtual `json:"topup_virtual,omitempty"`
}

// Echo of the request made.
type TopupVirtualResponseEchoReq map[string]interface{}

type TopupVirtualResponseMsgType string

const TopupVirtualResponseMsgTypeTopupVirtual TopupVirtualResponseMsgType = "topup_virtual"

// The information regarding a successful top up for a virtual money account
type TopupVirtualResponseTopupVirtual struct {
	// Top up amount
	Amount *float64 `json:"amount,omitempty"`

	// Top up currency string
	Currency *string `json:"currency,omitempty"`
}

// Retrieve a list of all available underlyings and the corresponding contract
// types and trading duration boundaries. If the user is logged in, only the assets
// available for that user's landing company will be returned.
type TradingDurationsRequest struct {
	// Deprecated - Replaced by landing_company_short.
	LandingCompany *TradingDurationsRequestLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *TradingDurationsRequestLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingDurationsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingDurations TradingDurationsRequestTradingDurations `json:"trading_durations"`
}

type TradingDurationsRequestLandingCompany string

const TradingDurationsRequestLandingCompanyChampion TradingDurationsRequestLandingCompany = "champion"
const TradingDurationsRequestLandingCompanyChampionVirtual TradingDurationsRequestLandingCompany = "champion-virtual"
const TradingDurationsRequestLandingCompanyIom TradingDurationsRequestLandingCompany = "iom"
const TradingDurationsRequestLandingCompanyMalta TradingDurationsRequestLandingCompany = "malta"
const TradingDurationsRequestLandingCompanyMaltainvest TradingDurationsRequestLandingCompany = "maltainvest"

type TradingDurationsRequestLandingCompanyShort string

const TradingDurationsRequestLandingCompanyShortChampion TradingDurationsRequestLandingCompanyShort = "champion"
const TradingDurationsRequestLandingCompanyShortChampionVirtual TradingDurationsRequestLandingCompanyShort = "champion-virtual"
const TradingDurationsRequestLandingCompanyShortIom TradingDurationsRequestLandingCompanyShort = "iom"
const TradingDurationsRequestLandingCompanyShortMalta TradingDurationsRequestLandingCompanyShort = "malta"
const TradingDurationsRequestLandingCompanyShortMaltainvest TradingDurationsRequestLandingCompanyShort = "maltainvest"
const TradingDurationsRequestLandingCompanyShortSvg TradingDurationsRequestLandingCompanyShort = "svg"
const TradingDurationsRequestLandingCompanyShortVanuatu TradingDurationsRequestLandingCompanyShort = "vanuatu"
const TradingDurationsRequestLandingCompanyShortVirtual TradingDurationsRequestLandingCompanyShort = "virtual"
const TradingDurationsRequestLandingCompanySvg TradingDurationsRequestLandingCompany = "svg"
const TradingDurationsRequestLandingCompanyVanuatu TradingDurationsRequestLandingCompany = "vanuatu"
const TradingDurationsRequestLandingCompanyVirtual TradingDurationsRequestLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingDurationsRequestPassthrough map[string]interface{}

type TradingDurationsRequestTradingDurations int

// A message with trading duration information for symbol and contract
// combinations.
type TradingDurationsResponse struct {
	// Echo of the request made.
	EchoReq TradingDurationsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingDurationsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// List of underlyings by their display name and symbol followed by their
	// available contract types and trading duration boundaries.
	TradingDurations []TradingDurationsResponseTradingDurationsElem `json:"trading_durations,omitempty"`
}

// Echo of the request made.
type TradingDurationsResponseEchoReq map[string]interface{}

type TradingDurationsResponseMsgType string

const TradingDurationsResponseMsgTypeTradingDurations TradingDurationsResponseMsgType = "trading_durations"

type TradingDurationsResponseTradingDurationsElem struct {
	// Available contract types and trading duration boundaries
	Data []TradingDurationsResponseTradingDurationsElemDataElem `json:"data,omitempty"`

	// The market in which the underlyings listed in `symbol` located.
	Market *TradingDurationsResponseTradingDurationsElemMarket `json:"market,omitempty"`

	// The submarket in which the underlyings listed in `symbol` located.
	Submarket *TradingDurationsResponseTradingDurationsElemSubmarket `json:"submarket,omitempty"`
}

type TradingDurationsResponseTradingDurationsElemDataElem struct {
	// The market in which the underlyings listed in `symbol` located.
	Market *TradingDurationsResponseTradingDurationsElemDataElemMarket `json:"market,omitempty"`

	// The submarket in which the underlyings listed in `symbol` located.
	Submarket *TradingDurationsResponseTradingDurationsElemDataElemSubmarket `json:"submarket,omitempty"`

	// List of underlying symbols.
	Symbol []TradingDurationsResponseTradingDurationsElemDataElemSymbolElem `json:"symbol,omitempty"`

	// List of trade durations available for symbols and contract combinations.
	TradeDurations []TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElem `json:"trade_durations,omitempty"`
}

// The market in which the underlyings listed in `symbol` located.
type TradingDurationsResponseTradingDurationsElemDataElemMarket struct {
	// Translated market name.
	DisplayName *string `json:"display_name,omitempty"`

	// Market name.
	Name *string `json:"name,omitempty"`
}

// The submarket in which the underlyings listed in `symbol` located.
type TradingDurationsResponseTradingDurationsElemDataElemSubmarket struct {
	// Translated submarket name.
	DisplayName *string `json:"display_name,omitempty"`

	// Submarket name.
	Name *string `json:"name,omitempty"`
}

type TradingDurationsResponseTradingDurationsElemDataElemSymbolElem struct {
	// Translated symbol name.
	DisplayName *string `json:"display_name,omitempty"`

	// Symbol name.
	Name *string `json:"name,omitempty"`
}

type TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElem struct {
	// List of trade durations available for the symbols.
	Durations []TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElemDurationsElem `json:"durations,omitempty"`

	// List of trade types available for the symbols.
	TradeType *TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElemTradeType `json:"trade_type,omitempty"`
}

type TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElemDurationsElem struct {
	// Translated duration type name.
	DisplayName *string `json:"display_name,omitempty"`

	// Maximum allowed duration for this type.
	Max *int `json:"max,omitempty"`

	// Minimum allowed duration for this type.
	Min *int `json:"min,omitempty"`

	// Duration type name.
	Name *string `json:"name,omitempty"`
}

// List of trade types available for the symbols.
type TradingDurationsResponseTradingDurationsElemDataElemTradeDurationsElemTradeType struct {
	// Translated trade type name.
	DisplayName *string `json:"display_name,omitempty"`

	// Trade type name.
	Name *string `json:"name,omitempty"`
}

// The market in which the underlyings listed in `symbol` located.
type TradingDurationsResponseTradingDurationsElemMarket struct {
	// Translated market name.
	DisplayName *string `json:"display_name,omitempty"`

	// Market name.
	Name *string `json:"name,omitempty"`
}

// The submarket in which the underlyings listed in `symbol` located.
type TradingDurationsResponseTradingDurationsElemSubmarket struct {
	// Translated submarket name.
	DisplayName *string `json:"display_name,omitempty"`

	// Submarket name.
	Name *string `json:"name,omitempty"`
}

// Reset the investor password of a Trading Platform Account
type TradingPlatformInvestorPasswordResetRequest struct {
	// Trading account ID.
	AccountId string `json:"account_id"`

	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address).
	NewPassword string `json:"new_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingPlatformInvestorPasswordResetRequestPassthrough `json:"passthrough,omitempty"`

	// Name of trading platform.
	Platform TradingPlatformInvestorPasswordResetRequestPlatform `json:"platform"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingPlatformInvestorPasswordReset TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset `json:"trading_platform_investor_password_reset"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingPlatformInvestorPasswordResetRequestPassthrough map[string]interface{}

type TradingPlatformInvestorPasswordResetRequestPlatform string

const TradingPlatformInvestorPasswordResetRequestPlatformMt5 TradingPlatformInvestorPasswordResetRequestPlatform = "mt5"

type TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset int

// The result of the Trading Platform investor password reset.
type TradingPlatformInvestorPasswordResetResponse struct {
	// Echo of the request made.
	EchoReq TradingPlatformInvestorPasswordResetResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingPlatformInvestorPasswordResetResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// If set to 1, the investor password has been reset.
	TradingPlatformPasswordReset *TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset `json:"trading_platform_password_reset,omitempty"`
}

// Echo of the request made.
type TradingPlatformInvestorPasswordResetResponseEchoReq map[string]interface{}

type TradingPlatformInvestorPasswordResetResponseMsgType string

const TradingPlatformInvestorPasswordResetResponseMsgTypeTradingPlatformInvestorPasswordReset TradingPlatformInvestorPasswordResetResponseMsgType = "trading_platform_investor_password_reset"

type TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset int

// Reset the password of a Trading Platform Account
type TradingPlatformPasswordResetRequest struct {
	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address).
	NewPassword string `json:"new_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingPlatformPasswordResetRequestPassthrough `json:"passthrough,omitempty"`

	// Name of trading platform.
	Platform TradingPlatformPasswordResetRequestPlatform `json:"platform"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingPlatformPasswordReset TradingPlatformPasswordResetRequestTradingPlatformPasswordReset `json:"trading_platform_password_reset"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingPlatformPasswordResetRequestPassthrough map[string]interface{}

type TradingPlatformPasswordResetRequestPlatform string

const TradingPlatformPasswordResetRequestPlatformDxtrade TradingPlatformPasswordResetRequestPlatform = "dxtrade"
const TradingPlatformPasswordResetRequestPlatformMt5 TradingPlatformPasswordResetRequestPlatform = "mt5"

type TradingPlatformPasswordResetRequestTradingPlatformPasswordReset int

// The result of the Trading Platform password reset.
type TradingPlatformPasswordResetResponse struct {
	// Echo of the request made.
	EchoReq TradingPlatformPasswordResetResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingPlatformPasswordResetResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// If set to 1, the password has been reset.
	TradingPlatformPasswordReset *TradingPlatformPasswordResetResponseTradingPlatformPasswordReset `json:"trading_platform_password_reset,omitempty"`
}

// Echo of the request made.
type TradingPlatformPasswordResetResponseEchoReq map[string]interface{}

type TradingPlatformPasswordResetResponseMsgType string

const TradingPlatformPasswordResetResponseMsgTypeTradingPlatformPasswordReset TradingPlatformPasswordResetResponseMsgType = "trading_platform_password_reset"

type TradingPlatformPasswordResetResponseTradingPlatformPasswordReset int

// Get the list of servers for a trading platform.
type TradingServersRequest struct {
	// [Optional] Trading account type.
	AccountType *TradingServersRequestAccountType `json:"account_type,omitempty"`

	// [Optional] Pass the environment (installation) instance. Currently, there are
	// one demo and two real environments. Defaults to 'all'.
	Environment TradingServersRequestEnvironment `json:"environment,omitempty"`

	// [Optional] Market type.
	MarketType TradingServersRequestMarketType `json:"market_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingServersRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Pass the trading platform name, default to mt5
	Platform TradingServersRequestPlatform `json:"platform,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingServers TradingServersRequestTradingServers `json:"trading_servers"`
}

type TradingServersRequestAccountType string

const TradingServersRequestAccountTypeDemo TradingServersRequestAccountType = "demo"
const TradingServersRequestAccountTypeReal TradingServersRequestAccountType = "real"

type TradingServersRequestEnvironment string

const TradingServersRequestEnvironmentAll TradingServersRequestEnvironment = "all"
const TradingServersRequestEnvironmentDerivDemo TradingServersRequestEnvironment = "Deriv-Demo"
const TradingServersRequestEnvironmentDerivServer TradingServersRequestEnvironment = "Deriv-Server"
const TradingServersRequestEnvironmentDerivServer02 TradingServersRequestEnvironment = "Deriv-Server-02"

type TradingServersRequestMarketType string

const TradingServersRequestMarketTypeFinancial TradingServersRequestMarketType = "financial"
const TradingServersRequestMarketTypeSynthetic TradingServersRequestMarketType = "synthetic"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingServersRequestPassthrough map[string]interface{}

type TradingServersRequestPlatform string

const TradingServersRequestPlatformDxtrade TradingServersRequestPlatform = "dxtrade"
const TradingServersRequestPlatformMt5 TradingServersRequestPlatform = "mt5"

type TradingServersRequestTradingServers int

// Get list of servers for the platform provided.
type TradingServersResponse struct {
	// Echo of the request made.
	EchoReq TradingServersResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingServersResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Array containing platform server objects.
	TradingServers []TradingServersResponseTradingServersElem `json:"trading_servers,omitempty"`
}

// Echo of the request made.
type TradingServersResponseEchoReq map[string]interface{}

type TradingServersResponseMsgType string

const TradingServersResponseMsgTypeTradingServers TradingServersResponseMsgType = "trading_servers"

type TradingServersResponseTradingServersElem struct {
	// Supported trading account type.
	AccountType *TradingServersResponseTradingServersElemAccountType `json:"account_type,omitempty"`

	// Flag to represent if this server is currently disabled or not
	Disabled *TradingServersResponseTradingServersElemDisabled `json:"disabled,omitempty"`

	// Current environment (installation instance) where servers are deployed.
	// Currently, there are one demo and two real environments.
	Environment *TradingServersResponseTradingServersElemEnvironment `json:"environment,omitempty"`

	// Object containing geolocation information of the server.
	Geolocation *TradingServersResponseTradingServersElemGeolocation `json:"geolocation,omitempty"`

	// Server unique id.
	Id *TradingServersResponseTradingServersElemId `json:"id,omitempty"`

	// Market type
	MarketType *string `json:"market_type,omitempty"`

	// Error message to client when server is disabled
	MessageToClient *string `json:"message_to_client,omitempty"`

	// Flag to represent if this is server is recommended based on client's country of
	// residence.
	Recommended *TradingServersResponseTradingServersElemRecommended `json:"recommended,omitempty"`

	// Account type supported by the server.
	SupportedAccounts []string `json:"supported_accounts,omitempty"`
}

type TradingServersResponseTradingServersElemAccountType string

const TradingServersResponseTradingServersElemAccountTypeDemo TradingServersResponseTradingServersElemAccountType = "demo"
const TradingServersResponseTradingServersElemAccountTypeReal TradingServersResponseTradingServersElemAccountType = "real"

type TradingServersResponseTradingServersElemDisabled int

type TradingServersResponseTradingServersElemEnvironment string

const TradingServersResponseTradingServersElemEnvironmentDerivDemo TradingServersResponseTradingServersElemEnvironment = "Deriv-Demo"
const TradingServersResponseTradingServersElemEnvironmentDerivServer TradingServersResponseTradingServersElemEnvironment = "Deriv-Server"
const TradingServersResponseTradingServersElemEnvironmentDerivServer02 TradingServersResponseTradingServersElemEnvironment = "Deriv-Server-02"

// Object containing geolocation information of the server.
type TradingServersResponseTradingServersElemGeolocation struct {
	// Internal server grouping.
	Group *string `json:"group,omitempty"`

	// Geolocation country or place where server is located.
	Location *string `json:"location,omitempty"`

	// Geolocation region where server is located.
	Region *string `json:"region,omitempty"`

	// Sequence number of the server in that region.
	Sequence *int `json:"sequence,omitempty"`
}

type TradingServersResponseTradingServersElemId string

const TradingServersResponseTradingServersElemIdP01Ts01 TradingServersResponseTradingServersElemId = "p01_ts01"
const TradingServersResponseTradingServersElemIdP01Ts02 TradingServersResponseTradingServersElemId = "p01_ts02"
const TradingServersResponseTradingServersElemIdP01Ts03 TradingServersResponseTradingServersElemId = "p01_ts03"
const TradingServersResponseTradingServersElemIdP01Ts04 TradingServersResponseTradingServersElemId = "p01_ts04"
const TradingServersResponseTradingServersElemIdP02Ts02 TradingServersResponseTradingServersElemId = "p02_ts02"

type TradingServersResponseTradingServersElemRecommended int

// Receive a list of market opening times for a given date.
type TradingTimesRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingTimesRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Date to receive market opening times for. (`yyyy-mm-dd` format. `today` can
	// also be specified).
	TradingTimes string `json:"trading_times"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingTimesRequestPassthrough map[string]interface{}

// A message with Trading Times
type TradingTimesResponse struct {
	// Echo of the request made.
	EchoReq TradingTimesResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingTimesResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// The trading times structure is a hierarchy as follows: Market -> SubMarket ->
	// Underlyings
	TradingTimes *TradingTimesResponseTradingTimes `json:"trading_times,omitempty"`
}

// Echo of the request made.
type TradingTimesResponseEchoReq map[string]interface{}

type TradingTimesResponseMsgType string

const TradingTimesResponseMsgTypeTradingTimes TradingTimesResponseMsgType = "trading_times"

// The trading times structure is a hierarchy as follows: Market -> SubMarket ->
// Underlyings
type TradingTimesResponseTradingTimes struct {
	// An array of markets
	Markets []TradingTimesResponseTradingTimesMarketsElem `json:"markets"`
}

type TradingTimesResponseTradingTimesMarketsElem struct {
	// Market name
	Name string `json:"name"`

	// An array of submarkets
	Submarkets []TradingTimesResponseTradingTimesMarketsElemSubmarketsElem `json:"submarkets,omitempty"`
}

type TradingTimesResponseTradingTimesMarketsElemSubmarketsElem struct {
	// Submarket name
	Name string `json:"name"`

	// Symbols array
	Symbols []TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElem `json:"symbols,omitempty"`
}

type TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElem struct {
	// Events
	Events []interface{} `json:"events,omitempty"`

	// Symbol name
	Name string `json:"name"`

	// Symbol shortcode
	Symbol string `json:"symbol"`

	// Open, close and settlement times
	Times TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTimes `json:"times,omitempty"`

	// Trading days
	TradingDays []TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem `json:"trading_days,omitempty"`
}

// Open, close and settlement times
type TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTimes map[string]interface{}

type TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem string

const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemFri TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Fri"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemMon TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Mon"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemSat TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Sat"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemSun TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Sun"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemThu TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Thu"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemTue TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Tue"
const TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemWed TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Wed"

// Subscribe to transaction notifications
type TransactionRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TransactionRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// If set to 1, will send updates whenever there is an update to transactions. If
	// not to 1 then it will not return any records.
	Subscribe TransactionRequestSubscribe `json:"subscribe"`

	// Must be `1`
	Transaction TransactionRequestTransaction `json:"transaction"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TransactionRequestPassthrough map[string]interface{}

type TransactionRequestSubscribe int

type TransactionRequestTransaction int

// Return transaction updates
type TransactionResponse struct {
	// Echo of the request made.
	EchoReq TransactionResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TransactionResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *TransactionResponseSubscription `json:"subscription,omitempty"`

	// Realtime stream of user transaction updates.
	Transaction *TransactionResponseTransaction `json:"transaction,omitempty"`
}

// Echo of the request made.
type TransactionResponseEchoReq map[string]interface{}

type TransactionResponseMsgType string

const TransactionResponseMsgTypeTransaction TransactionResponseMsgType = "transaction"

// For subscription requests only.
type TransactionResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Realtime stream of user transaction updates.
type TransactionResponseTransaction struct {
	// The transaction type.
	Action *TransactionResponseTransactionAction `json:"action,omitempty"`

	// It is the amount of transaction performed.
	Amount *float64 `json:"amount,omitempty"`

	// Balance amount
	Balance *float64 `json:"balance,omitempty"`

	// Barrier of the contract. Only applicable to single barrier contracts. Could be
	// undefined if a contract does not have a barrier.
	Barrier interface{} `json:"barrier,omitempty"`

	// It is the contract ID.
	ContractId interface{} `json:"contract_id,omitempty"`

	// Transaction currency
	Currency *string `json:"currency,omitempty"`

	// Epoch value of the expiry time of the contract. Please note that in case of buy
	// transaction this is approximate value not exact one.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// Display name of symbol
	DisplayName *string `json:"display_name,omitempty"`

	// The high barrier of a contract. Only applicable to double barrier contracts.
	HighBarrier interface{} `json:"high_barrier,omitempty"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// Description of contract purchased
	Longcode *string `json:"longcode,omitempty"`

	// The low barrier of a contract. Only applicable to double barrier contracts.
	LowBarrier *string `json:"low_barrier,omitempty"`

	// Time at which contract was purchased, present only for sell transaction
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// at the loss specified by the user.
	StopLoss interface{} `json:"stop_loss,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// when the value of the contract is close to zero. This is set by the us.
	StopOut interface{} `json:"stop_out,omitempty"`

	// Symbol code
	Symbol *string `json:"symbol,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// at the profit specified by the user.
	TakeProfit interface{} `json:"take_profit,omitempty"`

	// It is the transaction ID. Every contract (buy or sell) or payment has a unique
	// ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// Time at which transaction was performed: for buy it is purchase time, for sell
	// it is sell time.
	TransactionTime *int `json:"transaction_time,omitempty"`
}

type TransactionResponseTransactionAction string

const TransactionResponseTransactionActionAdjustment TransactionResponseTransactionAction = "adjustment"
const TransactionResponseTransactionActionBuy TransactionResponseTransactionAction = "buy"
const TransactionResponseTransactionActionDeposit TransactionResponseTransactionAction = "deposit"
const TransactionResponseTransactionActionEscrow TransactionResponseTransactionAction = "escrow"
const TransactionResponseTransactionActionSell TransactionResponseTransactionAction = "sell"
const TransactionResponseTransactionActionTransfer TransactionResponseTransactionAction = "transfer"
const TransactionResponseTransactionActionVirtualCredit TransactionResponseTransactionAction = "virtual_credit"
const TransactionResponseTransactionActionWithdrawal TransactionResponseTransactionAction = "withdrawal"

// This call allows transfers between accounts held by a given user. Transfer funds
// between your fiat and cryptocurrency accounts (for a fee). Please note that
// account_from should be same as current authorized account.
type TransferBetweenAccountsRequest struct {
	// [Optional] The loginid of the account to transfer funds from.
	AccountFrom *string `json:"account_from,omitempty"`

	// [Optional] The loginid of the account to transfer funds to.
	AccountTo *string `json:"account_to,omitempty"`

	// [Optional] To control the list of accounts returned when `account_from` or
	// `account_to` is not provided. `brief` (default value) means that accounts with
	// `mt5` account_type will be excluded; it will run faster. `all` means that all
	// accounts with any account_type (including `mt5`) will be returned.
	Accounts TransferBetweenAccountsRequestAccounts `json:"accounts,omitempty"`

	// [Optional] The amount to transfer.
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Currency code.
	Currency *string `json:"currency,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TransferBetweenAccountsRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// If `account_from` or `account_to` is not provided, it just returns the
	// available accounts.
	TransferBetweenAccounts TransferBetweenAccountsRequestTransferBetweenAccounts `json:"transfer_between_accounts"`
}

type TransferBetweenAccountsRequestAccounts string

const TransferBetweenAccountsRequestAccountsAll TransferBetweenAccountsRequestAccounts = "all"
const TransferBetweenAccountsRequestAccountsBrief TransferBetweenAccountsRequestAccounts = "brief"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TransferBetweenAccountsRequestPassthrough map[string]interface{}

type TransferBetweenAccountsRequestTransferBetweenAccounts int

// The result of transfer order.
type TransferBetweenAccountsResponse struct {
	// The available accounts to transfer, or the accounts affected by a successful
	// transfer.
	Accounts []TransferBetweenAccountsResponseAccountsElem `json:"accounts,omitempty"`

	// The account to client full name
	ClientToFullName *string `json:"client_to_full_name,omitempty"`

	// The account to client loginid
	ClientToLoginid *string `json:"client_to_loginid,omitempty"`

	// Echo of the request made.
	EchoReq TransferBetweenAccountsResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TransferBetweenAccountsResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Reference ID of transfer performed
	TransactionId *int `json:"transaction_id,omitempty"`

	// If set to 1, transfer succeeded.
	TransferBetweenAccounts *TransferBetweenAccountsResponseTransferBetweenAccounts `json:"transfer_between_accounts,omitempty"`
}

type TransferBetweenAccountsResponseAccountsElem struct {
	// Type of the account. Please note that `binary` is deprecated and replaced by
	// `trading`
	AccountType *TransferBetweenAccountsResponseAccountsElemAccountType `json:"account_type,omitempty"`

	// Account balance.
	Balance *string `json:"balance,omitempty"`

	// Default account currency.
	Currency *string `json:"currency,omitempty"`

	// 0 for real accounts; 1 for virtual/demo accounts.
	DemoAccount *TransferBetweenAccountsResponseAccountsElemDemoAccount `json:"demo_account,omitempty"`

	// The group of derivez account.
	DerivezGroup *string `json:"derivez_group,omitempty"`

	// Account identifier used for system transfers.
	Loginid *string `json:"loginid,omitempty"`

	// Market type of account.
	MarketType *TransferBetweenAccountsResponseAccountsElemMarketType `json:"market_type,omitempty"`

	// The group of mt5 account.
	Mt5Group *string `json:"mt5_group,omitempty"`

	// The status of account.
	Status interface{} `json:"status,omitempty"`
}

type TransferBetweenAccountsResponseAccountsElemAccountType string

const TransferBetweenAccountsResponseAccountsElemAccountTypeBinary TransferBetweenAccountsResponseAccountsElemAccountType = "binary"
const TransferBetweenAccountsResponseAccountsElemAccountTypeDerivez TransferBetweenAccountsResponseAccountsElemAccountType = "derivez"
const TransferBetweenAccountsResponseAccountsElemAccountTypeDxtrade TransferBetweenAccountsResponseAccountsElemAccountType = "dxtrade"
const TransferBetweenAccountsResponseAccountsElemAccountTypeMt5 TransferBetweenAccountsResponseAccountsElemAccountType = "mt5"
const TransferBetweenAccountsResponseAccountsElemAccountTypeTrading TransferBetweenAccountsResponseAccountsElemAccountType = "trading"
const TransferBetweenAccountsResponseAccountsElemAccountTypeWallet TransferBetweenAccountsResponseAccountsElemAccountType = "wallet"

type TransferBetweenAccountsResponseAccountsElemDemoAccount int

type TransferBetweenAccountsResponseAccountsElemMarketType string

const TransferBetweenAccountsResponseAccountsElemMarketTypeAll TransferBetweenAccountsResponseAccountsElemMarketType = "all"
const TransferBetweenAccountsResponseAccountsElemMarketTypeFinancial TransferBetweenAccountsResponseAccountsElemMarketType = "financial"
const TransferBetweenAccountsResponseAccountsElemMarketTypeSynthetic TransferBetweenAccountsResponseAccountsElemMarketType = "synthetic"

// Echo of the request made.
type TransferBetweenAccountsResponseEchoReq map[string]interface{}

type TransferBetweenAccountsResponseMsgType string

const TransferBetweenAccountsResponseMsgTypeTransferBetweenAccounts TransferBetweenAccountsResponseMsgType = "transfer_between_accounts"

type TransferBetweenAccountsResponseTransferBetweenAccounts int

// It unsubscribe user from the email subscription.
type UnsubscribeEmailRequest struct {
	// Customer User ID.
	BinaryUserId float64 `json:"binary_user_id"`

	// The generated checksum for the customer.
	Checksum string `json:"checksum"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough UnsubscribeEmailRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	UnsubscribeEmail UnsubscribeEmailRequestUnsubscribeEmail `json:"unsubscribe_email"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type UnsubscribeEmailRequestPassthrough map[string]interface{}

type UnsubscribeEmailRequestUnsubscribeEmail int

// The result of the unsubscribe email request.
type UnsubscribeEmailResponse struct {
	// Customer User ID.
	BinaryUserId *float64 `json:"binary_user_id,omitempty"`

	// Echo of the request made.
	EchoReq UnsubscribeEmailResponseEchoReq `json:"echo_req"`

	// `1`: email notification unsubscribed sucssesfully, `0`: failed to unsubscribed
	// email notification
	EmailUnsubscribeStatus *UnsubscribeEmailResponseEmailUnsubscribeStatus `json:"email_unsubscribe_status,omitempty"`

	// Action name of the request made.
	MsgType UnsubscribeEmailResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type UnsubscribeEmailResponseEchoReq map[string]interface{}

type UnsubscribeEmailResponseEmailUnsubscribeStatus int

type UnsubscribeEmailResponseMsgType string

const UnsubscribeEmailResponseMsgTypeUnsubscribeEmail UnsubscribeEmailResponseMsgType = "unsubscribe_email"

// Verify an email address for Cellxpert. The system will send an email to the
// address containing a security code for verification.
type VerifyEmailCellxpertRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough VerifyEmailCellxpertRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Purpose of the email verification call.
	Type VerifyEmailCellxpertRequestType `json:"type"`

	// [Optional] Extra parameters that can be attached to the verify email link URL.
	UrlParameters *VerifyEmailCellxpertRequestUrlParameters `json:"url_parameters,omitempty"`

	// Email address to be verified.
	VerifyEmailCellxpert string `json:"verify_email_cellxpert"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type VerifyEmailCellxpertRequestPassthrough map[string]interface{}

type VerifyEmailCellxpertRequestType string

const VerifyEmailCellxpertRequestTypePartnerAccountOpening VerifyEmailCellxpertRequestType = "partner_account_opening"

// [Optional] Extra parameters that can be attached to the verify email link URL.
type VerifyEmailCellxpertRequestUrlParameters struct {
	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// [Optional] Master affiliate Id.
	Bta *int `json:"bta,omitempty"`

	// [Optional] Date of first contact, format: yyyy-mm-dd in GMT timezone.
	DateFirstContact *string `json:"date_first_contact,omitempty"`

	// [Optional] Google Click Identifier to track source.
	GclidUrl *string `json:"gclid_url,omitempty"`

	// [Optional] The amount to withdraw to the payment agent. Only allowed for
	// payment agent withdraw.
	PaAmount *float64 `json:"pa_amount,omitempty"`

	// [Optional] The currency code. Only allowed for payment agent withdraw.
	PaCurrency *string `json:"pa_currency,omitempty"`

	// [Optional] The payment agent loginid received from the `paymentagent_list`
	// call. Only allowed for payment agent withdraw.
	PaLoginid *string `json:"pa_loginid,omitempty"`

	// [Optional] Remarks about the withdraw. Only letters, numbers, space, period,
	// comma, - ' are allowed. Only allowed for payment agent withdraw.
	PaRemarks *string `json:"pa_remarks,omitempty"`

	// [Optional] The page ID to redirect to
	RedirectTo *int `json:"redirect_to,omitempty"`

	// [Optional] Show whether user has used mobile or desktop.
	SignupDevice *VerifyEmailCellxpertRequestUrlParametersSignupDevice `json:"signup_device,omitempty"`

	// [Optional] Identifier of particular ad. Value must match Regex pattern to be
	// recorded
	UtmAdId interface{} `json:"utm_ad_id,omitempty"`

	// [Optional] Identifier of ad group in the campaign. Value must match Regex
	// pattern to be recorded
	UtmAdgroupId interface{} `json:"utm_adgroup_id,omitempty"`

	// [Optional] Unique identifier of click on AdRoll ads platform. Value must match
	// Regex pattern to be recorded
	UtmAdrollclkId interface{} `json:"utm_adrollclk_id,omitempty"`

	// [Optional] Identifies a specific product promotion or strategic campaign such
	// as a spring sale or other promotions. Value must match Regex pattern to be
	// recorded
	UtmCampaign interface{} `json:"utm_campaign,omitempty"`

	// [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be
	// recorded
	UtmCampaignId interface{} `json:"utm_campaign_id,omitempty"`

	// [Optional] Used to differentiate similar content, or links within the same ad.
	// Value must match Regex pattern to be recorded
	UtmContent interface{} `json:"utm_content,omitempty"`

	// [Optional] Unique identifier of click on Facebook ads platform. Value must
	// match Regex pattern to be recorded
	UtmFbclId interface{} `json:"utm_fbcl_id,omitempty"`

	// [Optional] Unique visitor identifier on Google Ads platform. Value must match
	// Regex pattern to be recorded
	UtmGlClientId interface{} `json:"utm_gl_client_id,omitempty"`

	// [Optional] Identifies the medium the link was used upon such as: email, CPC, or
	// other methods of sharing. Value must match Regex pattern to be recorded
	UtmMedium interface{} `json:"utm_medium,omitempty"`

	// [Optional] Unique click identifier on Microsoft Bing ads platform. Value must
	// match Regex pattern to be recorded
	UtmMsclkId interface{} `json:"utm_msclk_id,omitempty"`

	// [Optional] Identifies the source of traffic such as: search engine, newsletter,
	// or other referral. Value must match Regex pattern to be recorded
	UtmSource interface{} `json:"utm_source,omitempty"`

	// [Optional] Used to send information related to the campaign term like paid
	// search keywords. Value must match Regex pattern to be recorded
	UtmTerm interface{} `json:"utm_term,omitempty"`
}

type VerifyEmailCellxpertRequestUrlParametersSignupDevice string

const VerifyEmailCellxpertRequestUrlParametersSignupDeviceDesktop VerifyEmailCellxpertRequestUrlParametersSignupDevice = "desktop"
const VerifyEmailCellxpertRequestUrlParametersSignupDeviceMobile VerifyEmailCellxpertRequestUrlParametersSignupDevice = "mobile"

// Verify Email Cellxpert Receive
type VerifyEmailCellxpertResponse struct {
	// Echo of the request made.
	EchoReq VerifyEmailCellxpertResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType VerifyEmailCellxpertResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// 1 for success (secure code has been sent to the email address)
	VerifyEmailCellxpert *VerifyEmailCellxpertResponseVerifyEmailCellxpert `json:"verify_email_cellxpert,omitempty"`
}

// Echo of the request made.
type VerifyEmailCellxpertResponseEchoReq map[string]interface{}

type VerifyEmailCellxpertResponseMsgType string

const VerifyEmailCellxpertResponseMsgTypeVerifyEmailCellxpert VerifyEmailCellxpertResponseMsgType = "verify_email_cellxpert"

type VerifyEmailCellxpertResponseVerifyEmailCellxpert int

// Verify an email address for various purposes. The system will send an email to
// the address containing a security code for verification.
type VerifyEmailRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough VerifyEmailRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Purpose of the email verification call.
	Type VerifyEmailRequestType `json:"type"`

	// [Optional] Extra parameters that can be attached to the verify email link URL.
	UrlParameters *VerifyEmailRequestUrlParameters `json:"url_parameters,omitempty"`

	// Email address to be verified.
	VerifyEmail string `json:"verify_email"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type VerifyEmailRequestPassthrough map[string]interface{}

type VerifyEmailRequestType string

const VerifyEmailRequestTypeAccountOpening VerifyEmailRequestType = "account_opening"
const VerifyEmailRequestTypePartnerAccountOpening VerifyEmailRequestType = "partner_account_opening"
const VerifyEmailRequestTypePaymentWithdraw VerifyEmailRequestType = "payment_withdraw"
const VerifyEmailRequestTypePaymentagentWithdraw VerifyEmailRequestType = "paymentagent_withdraw"
const VerifyEmailRequestTypeRequestEmail VerifyEmailRequestType = "request_email"
const VerifyEmailRequestTypeResetPassword VerifyEmailRequestType = "reset_password"
const VerifyEmailRequestTypeTradingPlatformDxtradePasswordReset VerifyEmailRequestType = "trading_platform_dxtrade_password_reset"
const VerifyEmailRequestTypeTradingPlatformInvestorPasswordReset VerifyEmailRequestType = "trading_platform_investor_password_reset"
const VerifyEmailRequestTypeTradingPlatformMt5PasswordReset VerifyEmailRequestType = "trading_platform_mt5_password_reset"
const VerifyEmailRequestTypeTradingPlatformPasswordReset VerifyEmailRequestType = "trading_platform_password_reset"

// [Optional] Extra parameters that can be attached to the verify email link URL.
type VerifyEmailRequestUrlParameters struct {
	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// [Optional] Date of first contact, format: yyyy-mm-dd in GMT timezone.
	DateFirstContact *string `json:"date_first_contact,omitempty"`

	// [Optional] Google Click Identifier to track source.
	GclidUrl *string `json:"gclid_url,omitempty"`

	// [Optional] The amount to withdraw to the payment agent. Only allowed for
	// payment agent withdraw.
	PaAmount *float64 `json:"pa_amount,omitempty"`

	// [Optional] The currency code. Only allowed for payment agent withdraw.
	PaCurrency *string `json:"pa_currency,omitempty"`

	// [Optional] The payment agent loginid received from the `paymentagent_list`
	// call. Only allowed for payment agent withdraw.
	PaLoginid *string `json:"pa_loginid,omitempty"`

	// [Optional] Remarks about the withdraw. Only letters, numbers, space, period,
	// comma, - ' are allowed. Only allowed for payment agent withdraw.
	PaRemarks *string `json:"pa_remarks,omitempty"`

	// [Optional] The page ID to redirect to
	RedirectTo *int `json:"redirect_to,omitempty"`

	// [Optional] Show whether user has used mobile or desktop.
	SignupDevice *VerifyEmailRequestUrlParametersSignupDevice `json:"signup_device,omitempty"`

	// [Optional] Identifier of particular ad. Value must match Regex pattern to be
	// recorded
	UtmAdId interface{} `json:"utm_ad_id,omitempty"`

	// [Optional] Identifier of ad group in the campaign. Value must match Regex
	// pattern to be recorded
	UtmAdgroupId interface{} `json:"utm_adgroup_id,omitempty"`

	// [Optional] Unique identifier of click on AdRoll ads platform. Value must match
	// Regex pattern to be recorded
	UtmAdrollclkId interface{} `json:"utm_adrollclk_id,omitempty"`

	// [Optional] Identifies a specific product promotion or strategic campaign such
	// as a spring sale or other promotions. Value must match Regex pattern to be
	// recorded
	UtmCampaign interface{} `json:"utm_campaign,omitempty"`

	// [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be
	// recorded
	UtmCampaignId interface{} `json:"utm_campaign_id,omitempty"`

	// [Optional] Used to differentiate similar content, or links within the same ad.
	// Value must match Regex pattern to be recorded
	UtmContent interface{} `json:"utm_content,omitempty"`

	// [Optional] Unique identifier of click on Facebook ads platform. Value must
	// match Regex pattern to be recorded
	UtmFbclId interface{} `json:"utm_fbcl_id,omitempty"`

	// [Optional] Unique visitor identifier on Google Ads platform. Value must match
	// Regex pattern to be recorded
	UtmGlClientId interface{} `json:"utm_gl_client_id,omitempty"`

	// [Optional] Identifies the medium the link was used upon such as: email, CPC, or
	// other methods of sharing. Value must match Regex pattern to be recorded
	UtmMedium interface{} `json:"utm_medium,omitempty"`

	// [Optional] Unique click identifier on Microsoft Bing ads platform. Value must
	// match Regex pattern to be recorded
	UtmMsclkId interface{} `json:"utm_msclk_id,omitempty"`

	// [Optional] Identifies the source of traffic such as: search engine, newsletter,
	// or other referral. Value must match Regex pattern to be recorded
	UtmSource interface{} `json:"utm_source,omitempty"`

	// [Optional] Used to send information related to the campaign term like paid
	// search keywords. Value must match Regex pattern to be recorded
	UtmTerm interface{} `json:"utm_term,omitempty"`
}

type VerifyEmailRequestUrlParametersSignupDevice string

const VerifyEmailRequestUrlParametersSignupDeviceDesktop VerifyEmailRequestUrlParametersSignupDevice = "desktop"
const VerifyEmailRequestUrlParametersSignupDeviceMobile VerifyEmailRequestUrlParametersSignupDevice = "mobile"

// Verify Email Receive
type VerifyEmailResponse struct {
	// Echo of the request made.
	EchoReq VerifyEmailResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType VerifyEmailResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// 1 for success (secure code has been sent to the email address)
	VerifyEmail *VerifyEmailResponseVerifyEmail `json:"verify_email,omitempty"`
}

// Echo of the request made.
type VerifyEmailResponseEchoReq map[string]interface{}

type VerifyEmailResponseMsgType string

const VerifyEmailResponseMsgTypeVerifyEmail VerifyEmailResponseMsgType = "verify_email"

type VerifyEmailResponseVerifyEmail int

// Request server status.
type WebsiteStatusRequest struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough WebsiteStatusRequestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] `1` to stream the server/website status updates.
	Subscribe *WebsiteStatusRequestSubscribe `json:"subscribe,omitempty"`

	// Must be `1`
	WebsiteStatus WebsiteStatusRequestWebsiteStatus `json:"website_status"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type WebsiteStatusRequestPassthrough map[string]interface{}

type WebsiteStatusRequestSubscribe int

type WebsiteStatusRequestWebsiteStatus int

// Server status alongside general settings like call limits, currencies
// information, supported languages, etc.
type WebsiteStatusResponse struct {
	// Echo of the request made.
	EchoReq WebsiteStatusResponseEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType WebsiteStatusResponseMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *WebsiteStatusResponseSubscription `json:"subscription,omitempty"`

	// Server status and other information regarding general settings
	WebsiteStatus *WebsiteStatusResponseWebsiteStatus `json:"website_status,omitempty"`
}

// Echo of the request made.
type WebsiteStatusResponseEchoReq map[string]interface{}

type WebsiteStatusResponseMsgType string

const WebsiteStatusResponseMsgTypeWebsiteStatus WebsiteStatusResponseMsgType = "website_status"

// For subscription requests only.
type WebsiteStatusResponseSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// Server status and other information regarding general settings
type WebsiteStatusResponseWebsiteStatus struct {
	// Maximum number of API calls during specified period of time.
	ApiCallLimits WebsiteStatusResponseWebsiteStatusApiCallLimits `json:"api_call_limits"`

	// List of all available broker codes.
	BrokerCodes []string `json:"broker_codes,omitempty"`

	// Country code of connected IP
	ClientsCountry *string `json:"clients_country,omitempty"`

	// Available currencies and their information
	CurrenciesConfig WebsiteStatusResponseWebsiteStatusCurrenciesConfig `json:"currencies_config"`

	// Suspension status of Dxtrade/DerivX API calls
	DxtradeStatus *WebsiteStatusResponseWebsiteStatusDxtradeStatus `json:"dxtrade_status,omitempty"`

	// Text for site status banner, contains problem description. shown only if set by
	// the system.
	Message *string `json:"message,omitempty"`

	// Suspension status of MT5 API calls
	Mt5Status *WebsiteStatusResponseWebsiteStatusMt5Status `json:"mt5_status,omitempty"`

	// Peer-to-peer payment system settings.
	P2PConfig *WebsiteStatusResponseWebsiteStatusP2PConfig `json:"p2p_config,omitempty"`

	// Payments Agents system settings.
	PaymentAgents *WebsiteStatusResponseWebsiteStatusPaymentAgents `json:"payment_agents,omitempty"`

	// The current status of the website.
	SiteStatus *WebsiteStatusResponseWebsiteStatusSiteStatus `json:"site_status,omitempty"`

	// Provides codes for languages supported.
	SupportedLanguages []string `json:"supported_languages,omitempty"`

	// Latest terms and conditions version.
	TermsConditionsVersion *string `json:"terms_conditions_version,omitempty"`
}

// Maximum number of API calls during specified period of time.
type WebsiteStatusResponseWebsiteStatusApiCallLimits struct {
	// Maximum subscription to proposal calls.
	MaxProposalSubscription WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxProposalSubscription `json:"max_proposal_subscription"`

	// Maximum number of general requests allowed during specified period of time.
	MaxRequestesGeneral WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestesGeneral `json:"max_requestes_general"`

	// Maximum number of outcome requests allowed during specified period of time.
	MaxRequestsOutcome WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsOutcome `json:"max_requests_outcome"`

	// Maximum number of pricing requests allowed during specified period of time.
	MaxRequestsPricing WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsPricing `json:"max_requests_pricing"`
}

// Maximum subscription to proposal calls.
type WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxProposalSubscription struct {
	// Describes which calls this limit applies to.
	AppliesTo string `json:"applies_to"`

	// Maximum number of allowed calls.
	Max float64 `json:"max"`
}

// Maximum number of general requests allowed during specified period of time.
type WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestesGeneral struct {
	// Describes which calls this limit applies to.
	AppliesTo string `json:"applies_to"`

	// The maximum of allowed calls per hour.
	Hourly float64 `json:"hourly"`

	// The maximum of allowed calls per minute.
	Minutely float64 `json:"minutely"`
}

// Maximum number of outcome requests allowed during specified period of time.
type WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsOutcome struct {
	// Describes which calls this limit applies to.
	AppliesTo string `json:"applies_to"`

	// The maximum of allowed calls per hour.
	Hourly float64 `json:"hourly"`

	// The maximum of allowed calls per minute.
	Minutely float64 `json:"minutely"`
}

// Maximum number of pricing requests allowed during specified period of time.
type WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsPricing struct {
	// Describes which calls this limit applies to.
	AppliesTo string `json:"applies_to"`

	// The maximum of allowed calls per hour.
	Hourly float64 `json:"hourly"`

	// The maximum of allowed calls per minute.
	Minutely float64 `json:"minutely"`
}

// Available currencies and their information
type WebsiteStatusResponseWebsiteStatusCurrenciesConfig map[string]interface{}

// Suspension status of Dxtrade/DerivX API calls
type WebsiteStatusResponseWebsiteStatusDxtradeStatus struct {
	// Suspension of Dxtrade/DerivX API calls on all servers.
	All *int `json:"all,omitempty"`

	// Suspension of Dxtrade/DerivX API calls on demo servers.
	Demo *int `json:"demo,omitempty"`

	// Suspension of Dxtrade/DerivX API calls on real trading servers.
	Real *int `json:"real,omitempty"`
}

// Suspension status of MT5 API calls
type WebsiteStatusResponseWebsiteStatusMt5Status struct {
	// Suspension of MT5 API calls on demo servers.
	Demo []interface{} `json:"demo,omitempty"`

	// Suspension of MT5 API calls on real trading servers.
	Real []interface{} `json:"real,omitempty"`
}

// Peer-to-peer payment system settings.
type WebsiteStatusResponseWebsiteStatusP2PConfig struct {
	// Maximum number of active ads allowed by an advertiser per currency pair and
	// advert type (buy or sell).
	AdvertsActiveLimit int `json:"adverts_active_limit"`

	// Adverts will be deactivated if no activity occurs within this period, in days.
	AdvertsArchivePeriod *int `json:"adverts_archive_period,omitempty"`

	// A buyer will be blocked for this duration after exceeding the cancellation
	// limit, in hours.
	CancellationBlockDuration int `json:"cancellation_block_duration"`

	// The period within which to count buyer cancellations, in hours.
	CancellationCountPeriod int `json:"cancellation_count_period"`

	// A buyer may cancel an order within this period without negative consequences,
	// in minutes after order creation.
	CancellationGracePeriod int `json:"cancellation_grace_period"`

	// A buyer will be temporarily barred after marking this number of cancellations
	// within cancellation_period.
	CancellationLimit int `json:"cancellation_limit"`

	// When 0, only exchanges in local currency are allowed for P2P advertiser.
	CrossBorderAdsEnabled WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled `json:"cross_border_ads_enabled"`

	// When 1, the P2P service is unavailable.
	Disabled WebsiteStatusResponseWebsiteStatusP2PConfigDisabled `json:"disabled"`

	// Indicates the availbility of certain backend features.
	FeatureLevel int `json:"feature_level"`

	// Availability of fixed rate adverts.
	FixedRateAdverts WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts `json:"fixed_rate_adverts"`

	// Date on which fixed rate adverts will be deactivated.
	FixedRateAdvertsEndDate *string `json:"fixed_rate_adverts_end_date,omitempty"`

	// Availability of floating rate adverts.
	FloatRateAdverts WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts `json:"float_rate_adverts"`

	// Maximum rate offset for floating rate adverts.
	FloatRateOffsetLimit float64 `json:"float_rate_offset_limit"`

	// Available local currencies for p2p_advert_list request.
	LocalCurrencies []WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElem `json:"local_currencies"`

	// Maximum amount of an advert, in USD.
	MaximumAdvertAmount float64 `json:"maximum_advert_amount"`

	// Maximum amount of an order, in USD.
	MaximumOrderAmount float64 `json:"maximum_order_amount"`

	// Maximum number of orders a user may create per day.
	OrderDailyLimit int `json:"order_daily_limit"`

	// Time allowed for order payment, in minutes after order creation.
	OrderPaymentPeriod int `json:"order_payment_period"`

	// Local P2P exchange rate which should be used instead of those obtained from the
	// `exchange_rates` call.
	OverrideExchangeRate *string `json:"override_exchange_rate,omitempty"`

	// Indicates if the payment methods feature is enabled.
	PaymentMethodsEnabled WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled `json:"payment_methods_enabled"`

	// Time after successful order completion during which reviews can be created, in
	// hours.
	ReviewPeriod float64 `json:"review_period"`

	// List of currencies for which P2P is available
	SupportedCurrencies []string `json:"supported_currencies"`
}

type WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled int

type WebsiteStatusResponseWebsiteStatusP2PConfigDisabled int

type WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts string

const WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdvertsDisabled WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts = "disabled"
const WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdvertsEnabled WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts = "enabled"
const WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdvertsListOnly WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts = "list_only"

type WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts string

const WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdvertsDisabled WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts = "disabled"
const WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdvertsEnabled WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts = "enabled"
const WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdvertsListOnly WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts = "list_only"

// Local currency details.
type WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElem struct {
	// Local currency name
	DisplayName string `json:"display_name"`

	// Indicates that there are adverts available for this currency.
	HasAdverts WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts `json:"has_adverts"`

	// Indicates that this is local currency for the current country.
	IsDefault *WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault `json:"is_default,omitempty"`

	// Local currency symbol
	Symbol string `json:"symbol"`
}

type WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts int

type WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault int

type WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled int

// Payments Agents system settings.
type WebsiteStatusResponseWebsiteStatusPaymentAgents struct {
	// Initial deposit requirement per country.
	InitialDepositPerCountry WebsiteStatusResponseWebsiteStatusPaymentAgentsInitialDepositPerCountry `json:"initial_deposit_per_country"`
}

// Initial deposit requirement per country.
type WebsiteStatusResponseWebsiteStatusPaymentAgentsInitialDepositPerCountry map[string]interface{}

type WebsiteStatusResponseWebsiteStatusSiteStatus string

const WebsiteStatusResponseWebsiteStatusSiteStatusDown WebsiteStatusResponseWebsiteStatusSiteStatus = "down"
const WebsiteStatusResponseWebsiteStatusSiteStatusUp WebsiteStatusResponseWebsiteStatusSiteStatus = "up"
const WebsiteStatusResponseWebsiteStatusSiteStatusUpdating WebsiteStatusResponseWebsiteStatusSiteStatus = "updating"

var enumValues_ActiveSymbolsRequestActiveSymbols = []interface{}{
	"brief",
	"full",
}
var enumValues_ActiveSymbolsRequestLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_ActiveSymbolsRequestLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_ActiveSymbolsRequestProductType = []interface{}{
	"basic",
}
var enumValues_ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting = []interface{}{
	0,
	1,
}
var enumValues_ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen = []interface{}{
	0,
	1,
}
var enumValues_ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended = []interface{}{
	0,
	1,
}
var enumValues_ActiveSymbolsResponseMsgType = []interface{}{
	"active_symbols",
}
var enumValues_ApiTokenRequestApiToken = []interface{}{
	1,
}
var enumValues_ApiTokenRequestNewTokenScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}
var enumValues_ApiTokenRequestValidForCurrentIpOnly = []interface{}{
	0,
	1,
}
var enumValues_ApiTokenResponseApiTokenDeleteToken = []interface{}{
	1,
}
var enumValues_ApiTokenResponseApiTokenNewToken = []interface{}{
	1,
}
var enumValues_ApiTokenResponseApiTokenTokensElemScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}
var enumValues_ApiTokenResponseMsgType = []interface{}{
	"api_token",
}
var enumValues_AppDeleteResponseMsgType = []interface{}{
	"app_delete",
}
var enumValues_AppGetResponseMsgType = []interface{}{
	"app_get",
}
var enumValues_AppListRequestAppList = []interface{}{
	1,
}
var enumValues_AppListResponseMsgType = []interface{}{
	"app_list",
}
var enumValues_AppMarkupDetailsRequestAppMarkupDetails = []interface{}{
	1,
}
var enumValues_AppMarkupDetailsRequestDescription = []interface{}{
	0,
	1,
}
var enumValues_AppMarkupDetailsRequestSort = []interface{}{
	"ASC",
	"DESC",
}
var enumValues_AppMarkupDetailsRequestSortFieldsElem = []interface{}{
	"app_id",
	"client_loginid",
	"transaction_time",
}
var enumValues_AppMarkupDetailsResponseMsgType = []interface{}{
	"app_markup_details",
}
var enumValues_AppMarkupStatisticsRequestAppMarkupStatistics = []interface{}{
	1,
}
var enumValues_AppMarkupStatisticsResponseMsgType = []interface{}{
	"app_markup_statistics",
}
var enumValues_AppRegisterRequestAppRegister = []interface{}{
	1,
}
var enumValues_AppRegisterRequestScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}
var enumValues_AppRegisterResponseMsgType = []interface{}{
	"app_register",
}
var enumValues_AppUpdateRequestScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}
var enumValues_AppUpdateResponseMsgType = []interface{}{
	"app_update",
}
var enumValues_AssetIndexRequestAssetIndex = []interface{}{
	1,
}
var enumValues_AssetIndexRequestLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_AssetIndexRequestLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_AssetIndexResponseMsgType = []interface{}{
	"asset_index",
}
var enumValues_AuthorizeRequestAddToLoginHistory = []interface{}{
	1,
	0,
}
var enumValues_AuthorizeResponseAuthorizeAccountListElemAccountType = []interface{}{
	"trading",
	"wallet",
}
var enumValues_AuthorizeResponseAuthorizeAccountListElemIsDisabled = []interface{}{
	1,
	0,
}
var enumValues_AuthorizeResponseAuthorizeAccountListElemIsVirtual = []interface{}{
	1,
	0,
}
var enumValues_AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform = []interface{}{
	"deriv",
	"dxtrade",
	"mt5",
}
var enumValues_AuthorizeResponseAuthorizeIsVirtual = []interface{}{
	0,
	1,
}
var enumValues_AuthorizeResponseAuthorizeWalletLinkedToElemPlatform = []interface{}{
	"deriv",
	"dxtrade",
	"mt5",
}
var enumValues_AuthorizeResponseMsgType = []interface{}{
	"authorize",
}
var enumValues_BalanceRequestBalance = []interface{}{
	1,
}
var enumValues_BalanceRequestSubscribe = []interface{}{
	0,
	1,
}
var enumValues_BalanceResponseMsgType = []interface{}{
	"balance",
}
var enumValues_BuyContractForMultipleAccountsRequestParametersBasis = []interface{}{
	"payout",
	"stake",
}
var enumValues_BuyContractForMultipleAccountsRequestParametersContractType = []interface{}{
	"MULTUP",
	"MULTDOWN",
	"UPORDOWN",
	"EXPIRYRANGE",
	"ONETOUCH",
	"CALLE",
	"LBHIGHLOW",
	"ASIAND",
	"EXPIRYRANGEE",
	"DIGITDIFF",
	"DIGITMATCH",
	"DIGITOVER",
	"PUTE",
	"DIGITUNDER",
	"NOTOUCH",
	"CALL",
	"RANGE",
	"LBFLOATPUT",
	"DIGITODD",
	"PUT",
	"ASIANU",
	"LBFLOATCALL",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"DIGITEVEN",
	"TICKHIGH",
	"TICKLOW",
	"RESETCALL",
	"RESETPUT",
	"CALLSPREAD",
	"PUTSPREAD",
	"RUNHIGH",
	"RUNLOW",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}
var enumValues_BuyContractForMultipleAccountsRequestParametersDurationUnit = []interface{}{
	"d",
	"m",
	"s",
	"h",
	"t",
}
var enumValues_BuyContractForMultipleAccountsResponseMsgType = []interface{}{
	"buy_contract_for_multiple_accounts",
}
var enumValues_BuyRequestParametersBarrierRange = []interface{}{
	"tight",
	"middle",
	"wide",
}
var enumValues_BuyRequestParametersBasis = []interface{}{
	"payout",
	"stake",
}
var enumValues_BuyRequestParametersContractType = []interface{}{
	"MULTUP",
	"MULTDOWN",
	"UPORDOWN",
	"EXPIRYRANGE",
	"ONETOUCH",
	"CALLE",
	"LBHIGHLOW",
	"ASIAND",
	"EXPIRYRANGEE",
	"DIGITDIFF",
	"DIGITMATCH",
	"DIGITOVER",
	"PUTE",
	"DIGITUNDER",
	"NOTOUCH",
	"CALL",
	"RANGE",
	"LBFLOATPUT",
	"DIGITODD",
	"PUT",
	"ASIANU",
	"LBFLOATCALL",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"DIGITEVEN",
	"TICKHIGH",
	"TICKLOW",
	"RESETCALL",
	"RESETPUT",
	"CALLSPREAD",
	"PUTSPREAD",
	"RUNHIGH",
	"RUNLOW",
	"ACCU",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}
var enumValues_BuyRequestParametersDurationUnit = []interface{}{
	"d",
	"m",
	"s",
	"h",
	"t",
}
var enumValues_BuyRequestParametersProductType = []interface{}{
	"basic",
}
var enumValues_BuyRequestSubscribe = []interface{}{
	1,
}
var enumValues_BuyResponseMsgType = []interface{}{
	"buy",
}
var enumValues_CancelResponseMsgType = []interface{}{
	"cancel",
}
var enumValues_CashierRequestCashier = []interface{}{
	"deposit",
	"withdraw",
}
var enumValues_CashierRequestDryRun = []interface{}{
	0,
	1,
}
var enumValues_CashierRequestProvider = []interface{}{
	"doughflow",
	"crypto",
}
var enumValues_CashierRequestType = []interface{}{
	"url",
	"api",
}
var enumValues_CashierResponseMsgType = []interface{}{
	"cashier",
}
var enumValues_ContractUpdateHistoryRequestContractUpdateHistory = []interface{}{
	1,
}
var enumValues_ContractUpdateHistoryResponseMsgType = []interface{}{
	"contract_update_history",
}
var enumValues_ContractUpdateRequestContractUpdate = []interface{}{
	1,
}
var enumValues_ContractUpdateResponseMsgType = []interface{}{
	"contract_update",
}
var enumValues_ContractsForRequestLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_ContractsForRequestLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}
var enumValues_ContractsForRequestProductType = []interface{}{
	"basic",
}
var enumValues_ContractsForResponseMsgType = []interface{}{
	"contracts_for",
}
var enumValues_CopyStartResponseMsgType = []interface{}{
	"copy_start",
}
var enumValues_CopyStopResponseMsgType = []interface{}{
	"copy_stop",
}
var enumValues_CopytradingListRequestCopytradingList = []interface{}{
	1,
}
var enumValues_CopytradingListResponseMsgType = []interface{}{
	"copytrading_list",
}
var enumValues_CopytradingStatisticsRequestCopytradingStatistics = []interface{}{
	1,
}
var enumValues_CopytradingStatisticsResponseMsgType = []interface{}{
	"copytrading_statistics",
}
var enumValues_CryptoConfigRequestCryptoConfig = []interface{}{
	1,
}
var enumValues_CryptoConfigResponseMsgType = []interface{}{
	"crypto_config",
}
var enumValues_DocumentUploadRequestDocumentFormat = []interface{}{
	"PNG",
	"JPG",
	"JPEG",
	"GIF",
	"PDF",
}
var enumValues_DocumentUploadRequestDocumentType = []interface{}{
	"passport",
	"national_identity_card",
	"driving_licence",
	"utility_bill",
	"bankstatement",
	"power_of_attorney",
	"amlglobalcheck",
	"docverification",
	"proofid",
	"driverslicense",
	"proofaddress",
	"other",
	"voter_card",
	"student_card",
	"nimc_slip",
	"birth_certificate",
	"pan_card",
	"tax_photo_id",
	"selfie_with_id",
	"poi_others",
	"insurance_bill",
	"tax_receipt",
	"phone_bill",
	"poa_others",
	"proof_of_ownership",
	"tax_return",
	"employment_contract",
	"brokerage statement",
	"payslip",
	"edd_others",
	"coi",
	"business_poa",
	"article_of_association",
	"memorandum",
	"authorisation_letter",
	"declarations",
	"business_documents_others",
}
var enumValues_DocumentUploadRequestDocumentUpload = []interface{}{
	1,
}
var enumValues_DocumentUploadRequestLifetimeValid = []interface{}{
	0,
	1,
}
var enumValues_DocumentUploadRequestPageType = []interface{}{
	"front",
	"back",
	"photo",
}
var enumValues_DocumentUploadResponseMsgType = []interface{}{
	"document_upload",
}
var enumValues_EconomicCalendarRequestEconomicCalendar = []interface{}{
	1,
}
var enumValues_EconomicCalendarResponseMsgType = []interface{}{
	"economic_calendar",
}
var enumValues_ExchangeRatesRequestExchangeRates = []interface{}{
	1,
}
var enumValues_ExchangeRatesRequestSubscribe = []interface{}{
	1,
}
var enumValues_ExchangeRatesResponseMsgType = []interface{}{
	"exchange_rates",
}
var enumValues_ForgetAllResponseMsgType = []interface{}{
	"forget_all",
}
var enumValues_ForgetResponseForget = []interface{}{
	0,
	1,
}
var enumValues_ForgetResponseMsgType = []interface{}{
	"forget",
}
var enumValues_GetAccountStatusRequestGetAccountStatus = []interface{}{
	1,
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus = []interface{}{
	"verified",
	"rejected",
	"pending",
	"expired",
	"none",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"expired",
	"suspected",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"expired",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"expired",
	"suspected",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported = []interface{}{
	1,
	0,
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"expired",
	"suspected",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"expired",
	"suspected",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
	"locked",
}
var enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus = []interface{}{
	"none",
	"pending",
	"rejected",
	"verified",
}
var enumValues_GetAccountStatusResponseGetAccountStatusP2PStatus = []interface{}{
	"none",
	"active",
	"temp_ban",
	"perm_ban",
}
var enumValues_GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate = []interface{}{
	1,
	0,
}
var enumValues_GetAccountStatusResponseGetAccountStatusSocialIdentityProvider = []interface{}{
	"google",
	"facebook",
	"apple",
}
var enumValues_GetAccountStatusResponseMsgType = []interface{}{
	"get_account_status",
}
var enumValues_GetFinancialAssessmentRequestGetFinancialAssessment = []interface{}{
	1,
}
var enumValues_GetFinancialAssessmentResponseMsgType = []interface{}{
	"get_financial_assessment",
}
var enumValues_GetLimitsRequestGetLimits = []interface{}{
	1,
}
var enumValues_GetLimitsResponseMsgType = []interface{}{
	"get_limits",
}
var enumValues_GetSelfExclusionRequestGetSelfExclusion = []interface{}{
	1,
}
var enumValues_GetSelfExclusionResponseMsgType = []interface{}{
	"get_self_exclusion",
}
var enumValues_GetSettingsRequestGetSettings = []interface{}{
	1,
}
var enumValues_GetSettingsResponseGetSettingsAllowCopiers = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsDxtradeUserException = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsEmailConsent = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}
var enumValues_GetSettingsResponseGetSettingsFeatureFlagWallet = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsHasSecretAnswer = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsNonPepDeclaration = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseGetSettingsRequestProfessionalStatus = []interface{}{
	0,
	1,
}
var enumValues_GetSettingsResponseMsgType = []interface{}{
	"get_settings",
}
var enumValues_IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd = []interface{}{
	1,
}
var enumValues_IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd = []interface{}{
	1,
}
var enumValues_IdentityVerificationDocumentAddResponseMsgType = []interface{}{
	"identity_verification_document_add",
}
var enumValues_LandingCompanyDetailsRequestLandingCompanyDetails = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
	"samoa",
	"samoa-virtual",
	"dsl",
}
var enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyDetailsResponseMsgType = []interface{}{
	"landing_company_details",
}
var enumValues_LandingCompanyResponseLandingCompanyAddressParseable = []interface{}{
	1,
	0,
}
var enumValues_LandingCompanyResponseLandingCompanyAllCompany = []interface{}{
	"svg",
	"none",
}
var enumValues_LandingCompanyResponseLandingCompanyCtraderAllStandard = []interface{}{
	"svg",
	"none",
}
var enumValues_LandingCompanyResponseLandingCompanyDerivezAllStandard = []interface{}{
	"svg",
	"none",
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyIsIdvSupported = []interface{}{
	1,
	0,
}
var enumValues_LandingCompanyResponseLandingCompanyMt5AgeVerification = []interface{}{
	1,
	0,
}
var enumValues_LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyNoProvince = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyRequireAddressPostcode = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyRequirePoi = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanySkipDepositVerification = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseLandingCompanyUkgcFundsProtection = []interface{}{
	0,
	1,
}
var enumValues_LandingCompanyResponseMsgType = []interface{}{
	"landing_company",
}
var enumValues_LoginHistoryRequestLoginHistory = []interface{}{
	1,
}
var enumValues_LoginHistoryResponseLoginHistoryElemStatus = []interface{}{
	0,
	1,
}
var enumValues_LoginHistoryResponseMsgType = []interface{}{
	"login_history",
}
var enumValues_LogoutRequestLogout = []interface{}{
	1,
}
var enumValues_LogoutResponseLogout = []interface{}{
	1,
}
var enumValues_LogoutResponseMsgType = []interface{}{
	"logout",
}
var enumValues_Mt5DepositRequestMt5Deposit = []interface{}{
	1,
}
var enumValues_Mt5DepositResponseMsgType = []interface{}{
	"mt5_deposit",
}
var enumValues_Mt5GetSettingsRequestMt5GetSettings = []interface{}{
	1,
}
var enumValues_Mt5GetSettingsResponseMsgType = []interface{}{
	"mt5_get_settings",
}
var enumValues_Mt5GetSettingsResponseMt5GetSettingsAccountType = []interface{}{
	"demo",
	"real",
}
var enumValues_Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort = []interface{}{
	"bvi",
	"labuan",
	"malta",
	"maltainvest",
	"svg",
	"vanuatu",
}
var enumValues_Mt5GetSettingsResponseMt5GetSettingsMarketType = []interface{}{
	"financial",
	"synthetic",
}
var enumValues_Mt5GetSettingsResponseMt5GetSettingsSubAccountType = []interface{}{
	"financial",
	"financial_stp",
}
var enumValues_Mt5LoginListRequestMt5LoginList = []interface{}{
	1,
}
var enumValues_Mt5LoginListResponseMsgType = []interface{}{
	"mt5_login_list",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemAccountType = []interface{}{
	"demo",
	"real",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment = []interface{}{
	"Deriv-Demo",
	"Deriv-Server",
	"Deriv-Server-02",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemLandingCompanyShort = []interface{}{
	"bvi",
	"labuan",
	"malta",
	"maltainvest",
	"svg",
	"vanuatu",
	"seychelles",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemMarketType = []interface{}{
	"financial",
	"synthetic",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment = []interface{}{
	"Deriv-Demo",
	"Deriv-Server",
	"Deriv-Server-02",
}
var enumValues_Mt5LoginListResponseMt5LoginListElemSubAccountType = []interface{}{
	"financial",
	"financial_stp",
}
var enumValues_Mt5NewAccountRequestAccountType = []interface{}{
	"demo",
	"gaming",
	"financial",
}
var enumValues_Mt5NewAccountRequestDryRun = []interface{}{
	0,
	1,
}
var enumValues_Mt5NewAccountRequestMt5AccountCategory = []interface{}{
	"conventional",
}
var enumValues_Mt5NewAccountRequestMt5AccountType = []interface{}{
	"financial",
	"financial_stp",
}
var enumValues_Mt5NewAccountRequestMt5NewAccount = []interface{}{
	1,
}
var enumValues_Mt5NewAccountRequestServer = []interface{}{
	"p01_ts01",
	"p01_ts02",
	"p01_ts03",
	"p01_ts04",
	"p02_ts02",
}
var enumValues_Mt5NewAccountResponseMsgType = []interface{}{
	"mt5_new_account",
}
var enumValues_Mt5NewAccountResponseMt5NewAccountAccountType = []interface{}{
	"demo",
	"gaming",
	"financial",
}
var enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountCategory = []interface{}{
	"conventional",
}
var enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountType = []interface{}{
	"financial",
	"financial_stp",
}
var enumValues_Mt5PasswordChangeRequestMt5PasswordChange = []interface{}{
	1,
}
var enumValues_Mt5PasswordChangeRequestPasswordType = []interface{}{
	"main",
	"investor",
}
var enumValues_Mt5PasswordChangeResponseMsgType = []interface{}{
	"mt5_password_change",
}
var enumValues_Mt5PasswordCheckRequestMt5PasswordCheck = []interface{}{
	1,
}
var enumValues_Mt5PasswordCheckRequestPasswordType = []interface{}{
	"main",
	"investor",
}
var enumValues_Mt5PasswordCheckResponseMsgType = []interface{}{
	"mt5_password_check",
}
var enumValues_Mt5PasswordResetRequestMt5PasswordReset = []interface{}{
	1,
}
var enumValues_Mt5PasswordResetRequestPasswordType = []interface{}{
	"main",
	"investor",
}
var enumValues_Mt5PasswordResetResponseMsgType = []interface{}{
	"mt5_password_reset",
}
var enumValues_Mt5WithdrawalRequestMt5Withdrawal = []interface{}{
	1,
}
var enumValues_Mt5WithdrawalResponseMsgType = []interface{}{
	"mt5_withdrawal",
}
var enumValues_NewAccountMaltainvestRequestAcceptRisk = []interface{}{
	0,
	1,
}
var enumValues_NewAccountMaltainvestRequestAccountOpeningReason = []interface{}{
	"Speculative",
	"Income Earning",
	"Hedging",
}
var enumValues_NewAccountMaltainvestRequestAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_NewAccountMaltainvestRequestCfdExperience = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}
var enumValues_NewAccountMaltainvestRequestCfdFrequency = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_NewAccountMaltainvestRequestCfdTradingDefinition = []interface{}{
	"Purchase shares of a company or physical commodities.",
	"Place a bet on the price movement.",
	"Speculate on the price movement.",
	"Make a long-term investment.",
}
var enumValues_NewAccountMaltainvestRequestClientType = []interface{}{
	"professional",
	"retail",
}
var enumValues_NewAccountMaltainvestRequestEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}
var enumValues_NewAccountMaltainvestRequestEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}
var enumValues_NewAccountMaltainvestRequestEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}
var enumValues_NewAccountMaltainvestRequestEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}
var enumValues_NewAccountMaltainvestRequestIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}
var enumValues_NewAccountMaltainvestRequestLeverageImpactTrading = []interface{}{
	"Leverage is a risk mitigation technique.",
	"Leverage prevents you from opening large positions.",
	"Leverage guarantees profits.",
	"Leverage lets you open larger positions for a fraction of the trade's value.",
}
var enumValues_NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss = []interface{}{
	"Cancel your trade at any time within a chosen timeframe.",
	"Close your trade automatically when the loss is more than or equal to a specific amount.",
	"Close your trade automatically when the profit is more than or equal to a specific amount.",
	"Make a guaranteed profit on your trade.",
}
var enumValues_NewAccountMaltainvestRequestNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_NewAccountMaltainvestRequestNewAccountMaltainvest = []interface{}{
	1,
}
var enumValues_NewAccountMaltainvestRequestOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}
var enumValues_NewAccountMaltainvestRequestRequiredInitialMargin = []interface{}{
	"When opening a Leveraged CFD trade.",
	"When trading Multipliers.",
	"When buying shares of a company.",
	"All of the above.",
}
var enumValues_NewAccountMaltainvestRequestRiskTolerance = []interface{}{
	"Yes",
	"No",
}
var enumValues_NewAccountMaltainvestRequestSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}
var enumValues_NewAccountMaltainvestRequestSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}
var enumValues_NewAccountMaltainvestRequestSourceOfExperience = []interface{}{
	"I have an academic degree, professional certification, and/or work experience.",
	"I trade forex CFDs and other complex financial instruments.",
	"I have attended seminars, training, and/or workshops.",
	"I have little experience.",
	"I have no knowledge.",
}
var enumValues_NewAccountMaltainvestRequestSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}
var enumValues_NewAccountMaltainvestRequestTradingExperienceFinancialInstruments = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}
var enumValues_NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_NewAccountMaltainvestResponseMsgType = []interface{}{
	"new_account_maltainvest",
}
var enumValues_NewAccountRealRequestAccountOpeningReason = []interface{}{
	"Speculative",
	"Income Earning",
	"Hedging",
	"Peer-to-peer exchange",
}
var enumValues_NewAccountRealRequestAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_NewAccountRealRequestClientType = []interface{}{
	"professional",
	"retail",
}
var enumValues_NewAccountRealRequestNewAccountReal = []interface{}{
	1,
}
var enumValues_NewAccountRealRequestSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}
var enumValues_NewAccountRealRequestSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}
var enumValues_NewAccountRealResponseMsgType = []interface{}{
	"new_account_real",
}
var enumValues_NewAccountVirtualRequestEmailConsent = []interface{}{
	1,
	0,
}
var enumValues_NewAccountVirtualRequestNewAccountVirtual = []interface{}{
	1,
}
var enumValues_NewAccountVirtualRequestSignupDevice = []interface{}{
	"desktop",
	"mobile",
}
var enumValues_NewAccountVirtualRequestType = []interface{}{
	"trading",
	"wallet",
}
var enumValues_NewAccountVirtualResponseMsgType = []interface{}{
	"new_account_virtual",
}
var enumValues_NewAccountVirtualResponseNewAccountVirtualType = []interface{}{
	"trading",
	"wallet",
}
var enumValues_OauthAppsRequestOauthApps = []interface{}{
	1,
}
var enumValues_OauthAppsResponseMsgType = []interface{}{
	"oauth_apps",
}
var enumValues_P2PAdvertCreateRequestP2PAdvertCreate = []interface{}{
	1,
}
var enumValues_P2PAdvertCreateRequestRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertCreateRequestType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertCreateResponseMsgType = []interface{}{
	"p2p_advert_create",
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsVisible = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem = []interface{}{
	"advert_inactive",
	"advert_max_limit",
	"advert_min_limit",
	"advert_remaining",
	"advertiser_ads_paused",
	"advertiser_approval",
	"advertiser_balance",
	"advertiser_daily_limit",
	"advertiser_temp_ban",
}
var enumValues_P2PAdvertInfoRequestP2PAdvertInfo = []interface{}{
	1,
}
var enumValues_P2PAdvertInfoRequestSubscribe = []interface{}{
	1,
}
var enumValues_P2PAdvertInfoRequestUseClientLimits = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseMsgType = []interface{}{
	"p2p_advert_info",
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoDeleted = []interface{}{
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsVisible = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem = []interface{}{
	"advert_inactive",
	"advert_max_limit",
	"advert_min_limit",
	"advert_remaining",
	"advertiser_ads_paused",
	"advertiser_approval",
	"advertiser_balance",
	"advertiser_daily_limit",
	"advertiser_temp_ban",
}
var enumValues_P2PAdvertListRequestCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertListRequestFavouritesOnly = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListRequestP2PAdvertList = []interface{}{
	1,
}
var enumValues_P2PAdvertListRequestSortBy = []interface{}{
	"completion",
	"rate",
	"rating",
	"recommended",
}
var enumValues_P2PAdvertListRequestUseClientLimits = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListResponseMsgType = []interface{}{
	"p2p_advert_list",
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked = []interface{}{
	0,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemIsVisible = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem = []interface{}{
	"advert_inactive",
	"advert_max_limit",
	"advert_min_limit",
	"advert_remaining",
	"advertiser_ads_paused",
	"advertiser_approval",
	"advertiser_balance",
	"advertiser_daily_limit",
	"advertiser_temp_ban",
}
var enumValues_P2PAdvertUpdateRequestDelete = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateRequestIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateRequestP2PAdvertUpdate = []interface{}{
	1,
}
var enumValues_P2PAdvertUpdateRequestRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertUpdateResponseMsgType = []interface{}{
	"p2p_advert_update",
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateDeleted = []interface{}{
	1,
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem = []interface{}{
	"advert_inactive",
	"advert_max_limit",
	"advert_min_limit",
	"advert_remaining",
	"advertiser_ads_paused",
	"advertiser_approval",
	"advertiser_balance",
	"advertiser_daily_limit",
	"advertiser_temp_ban",
}
var enumValues_P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts = []interface{}{
	1,
}
var enumValues_P2PAdvertiserAdvertsResponseMsgType = []interface{}{
	"p2p_advertiser_adverts",
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType = []interface{}{
	"fixed",
	"float",
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem = []interface{}{
	"advert_inactive",
	"advert_max_limit",
	"advert_min_limit",
	"advert_remaining",
	"advertiser_ads_paused",
	"advertiser_approval",
	"advertiser_balance",
	"advertiser_daily_limit",
	"advertiser_temp_ban",
}
var enumValues_P2PAdvertiserCreateRequestP2PAdvertiserCreate = []interface{}{
	1,
}
var enumValues_P2PAdvertiserCreateRequestSubscribe = []interface{}{
	1,
}
var enumValues_P2PAdvertiserCreateResponseMsgType = []interface{}{
	"p2p_advertiser_create",
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification = []interface{}{
	1,
	0,
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification = []interface{}{
	1,
	0,
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableRequestContractTypeElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableRequestContractTypeElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableRequestContractTypeElem, v)
	}
	*j = ProfitTableRequestContractTypeElem(v)
	return nil
}

var enumValues_ProfitTableRequestContractTypeElem = []interface{}{
	"ACCU",
	"ASIAND",
	"ASIANU",
	"CALL",
	"CALLE",
	"CALLSPREAD",
	"DIGITDIFF",
	"DIGITEVEN",
	"DIGITMATCH",
	"DIGITODD",
	"DIGITOVER",
	"DIGITUNDER",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"EXPIRYRANGE",
	"EXPIRYRANGEE",
	"LBFLOATCALL",
	"LBFLOATPUT",
	"LBHIGHLOW",
	"MULTDOWN",
	"MULTUP",
	"NOTOUCH",
	"ONETOUCH",
	"PUT",
	"PUTE",
	"PUTSPREAD",
	"RANGE",
	"RESETCALL",
	"RESETPUT",
	"RUNHIGH",
	"RUNLOW",
	"TICKHIGH",
	"TICKLOW",
	"UPORDOWN",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PortfolioResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PortfolioResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioResponsePortfolio) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contracts"]; !ok || v == nil {
		return fmt.Errorf("field contracts: required")
	}
	type Plain PortfolioResponsePortfolio
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PortfolioResponsePortfolio(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PortfolioResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PortfolioResponseMsgType, v)
	}
	*j = PortfolioResponseMsgType(v)
	return nil
}

var enumValues_PortfolioResponseMsgType = []interface{}{
	"portfolio",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["portfolio"]; !ok || v == nil {
		return fmt.Errorf("field portfolio: required")
	}
	type Plain PortfolioRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PortfolioRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioRequestPortfolio) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PortfolioRequestPortfolio {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PortfolioRequestPortfolio, v)
	}
	*j = PortfolioRequestPortfolio(v)
	return nil
}

var enumValues_PortfolioRequestPortfolio = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioRequestContractTypeElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PortfolioRequestContractTypeElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PortfolioRequestContractTypeElem, v)
	}
	*j = PortfolioRequestContractTypeElem(v)
	return nil
}

var enumValues_PortfolioRequestContractTypeElem = []interface{}{
	"ASIAND",
	"ASIANU",
	"CALL",
	"CALLE",
	"CALLSPREAD",
	"DIGITDIFF",
	"DIGITEVEN",
	"DIGITMATCH",
	"DIGITODD",
	"DIGITOVER",
	"DIGITUNDER",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"EXPIRYRANGE",
	"EXPIRYRANGEE",
	"LBFLOATCALL",
	"LBFLOATPUT",
	"LBHIGHLOW",
	"MULTDOWN",
	"MULTUP",
	"NOTOUCH",
	"ONETOUCH",
	"PUT",
	"PUTE",
	"PUTSPREAD",
	"RANGE",
	"RESETCALL",
	"RESETPUT",
	"RUNHIGH",
	"RUNLOW",
	"TICKHIGH",
	"TICKLOW",
	"UPORDOWN",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PingResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PingResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingResponsePing) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PingResponsePing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PingResponsePing, v)
	}
	*j = PingResponsePing(v)
	return nil
}

var enumValues_PingResponsePing = []interface{}{
	"pong",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PingResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PingResponseMsgType, v)
	}
	*j = PingResponseMsgType(v)
	return nil
}

var enumValues_PingResponseMsgType = []interface{}{
	"ping",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ping"]; !ok || v == nil {
		return fmt.Errorf("field ping: required")
	}
	type Plain PingRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PingRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingRequestPing) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PingRequestPing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PingRequestPing, v)
	}
	*j = PingRequestPing(v)
	return nil
}

var enumValues_PingRequestPing = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PayoutCurrenciesResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PayoutCurrenciesResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PayoutCurrenciesResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PayoutCurrenciesResponseMsgType, v)
	}
	*j = PayoutCurrenciesResponseMsgType(v)
	return nil
}

var enumValues_PayoutCurrenciesResponseMsgType = []interface{}{
	"payout_currencies",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["payout_currencies"]; !ok || v == nil {
		return fmt.Errorf("field payout_currencies: required")
	}
	type Plain PayoutCurrenciesRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PayoutCurrenciesRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesRequestPayoutCurrencies) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PayoutCurrenciesRequestPayoutCurrencies {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PayoutCurrenciesRequestPayoutCurrencies, v)
	}
	*j = PayoutCurrenciesRequestPayoutCurrencies(v)
	return nil
}

var enumValues_PayoutCurrenciesRequestPayoutCurrencies = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentWithdrawResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawResponsePaymentagentWithdraw) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawResponsePaymentagentWithdraw {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawResponsePaymentagentWithdraw, v)
	}
	*j = PaymentagentWithdrawResponsePaymentagentWithdraw(v)
	return nil
}

var enumValues_PaymentagentWithdrawResponsePaymentagentWithdraw = []interface{}{
	1,
	2,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawResponseMsgType, v)
	}
	*j = PaymentagentWithdrawResponseMsgType(v)
	return nil
}

var enumValues_PaymentagentWithdrawResponseMsgType = []interface{}{
	"paymentagent_withdraw",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["paymentagent_loginid"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_loginid: required")
	}
	if v, ok := raw["paymentagent_withdraw"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_withdraw: required")
	}
	if v, ok := raw["verification_code"]; !ok || v == nil {
		return fmt.Errorf("field verification_code: required")
	}
	type Plain PaymentagentWithdrawRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawRequestPaymentagentWithdraw) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawRequestPaymentagentWithdraw {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawRequestPaymentagentWithdraw, v)
	}
	*j = PaymentagentWithdrawRequestPaymentagentWithdraw(v)
	return nil
}

var enumValues_PaymentagentWithdrawRequestPaymentagentWithdraw = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawRequestDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawRequestDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawRequestDryRun, v)
	}
	*j = PaymentagentWithdrawRequestDryRun(v)
	return nil
}

var enumValues_PaymentagentWithdrawRequestDryRun = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentWithdrawJustificationResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawJustificationResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawJustificationResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawJustificationResponseMsgType, v)
	}
	*j = PaymentagentWithdrawJustificationResponseMsgType(v)
	return nil
}

var enumValues_PaymentagentWithdrawJustificationResponseMsgType = []interface{}{
	"paymentagent_withdraw_justification",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["paymentagent_withdraw_justification"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_withdraw_justification: required")
	}
	type Plain PaymentagentWithdrawJustificationRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawJustificationRequest(plain)
	return nil
}

var enumValues_ProfitTableRequestDescription = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableRequestDescription) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableRequestDescription {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableRequestDescription, v)
	}
	*j = ProfitTableRequestDescription(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification, v)
	}
	*j = PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification(v)
	return nil
}

var enumValues_PaymentagentWithdrawJustificationRequestPaymentagentWithdrawJustification = []interface{}{
	1,
}
var enumValues_ProfitTableRequestProfitTable = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableRequestProfitTable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableRequestProfitTable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableRequestProfitTable, v)
	}
	*j = ProfitTableRequestProfitTable(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentTransferResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentTransferResponse(plain)
	return nil
}

var enumValues_ProfitTableRequestSort = []interface{}{
	"ASC",
	"DESC",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableRequestSort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableRequestSort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableRequestSort, v)
	}
	*j = ProfitTableRequestSort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferResponsePaymentagentTransfer) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferResponsePaymentagentTransfer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferResponsePaymentagentTransfer, v)
	}
	*j = PaymentagentTransferResponsePaymentagentTransfer(v)
	return nil
}

var enumValues_PaymentagentTransferResponsePaymentagentTransfer = []interface{}{
	1,
	2,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferResponseMsgType, v)
	}
	*j = PaymentagentTransferResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["profit_table"]; !ok || v == nil {
		return fmt.Errorf("field profit_table: required")
	}
	type Plain ProfitTableRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50
	}
	if v, ok := raw["sort"]; !ok || v == nil {
		plain.Sort = "DESC"
	}
	*j = ProfitTableRequest(plain)
	return nil
}

var enumValues_PaymentagentTransferResponseMsgType = []interface{}{
	"paymentagent_transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["paymentagent_transfer"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_transfer: required")
	}
	if v, ok := raw["transfer_to"]; !ok || v == nil {
		return fmt.Errorf("field transfer_to: required")
	}
	type Plain PaymentagentTransferRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentTransferRequest(plain)
	return nil
}

var enumValues_ProfitTableResponseMsgType = []interface{}{
	"profit_table",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableResponseMsgType, v)
	}
	*j = ProfitTableResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferRequestPaymentagentTransfer) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferRequestPaymentagentTransfer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferRequestPaymentagentTransfer, v)
	}
	*j = PaymentagentTransferRequestPaymentagentTransfer(v)
	return nil
}

var enumValues_PaymentagentTransferRequestPaymentagentTransfer = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferRequestDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferRequestDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferRequestDryRun, v)
	}
	*j = PaymentagentTransferRequestDryRun(v)
	return nil
}

var enumValues_PaymentagentTransferRequestDryRun = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ProfitTableResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProfitTableResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListResponsePaymentagentList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain PaymentagentListResponsePaymentagentList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListResponsePaymentagentList(plain)
	return nil
}

var enumValues_ProposalOpenContractRequestProposalOpenContract = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractRequestProposalOpenContract) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractRequestProposalOpenContract {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractRequestProposalOpenContract, v)
	}
	*j = ProposalOpenContractRequestProposalOpenContract(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListResponsePaymentagentListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["currencies"]; !ok || v == nil {
		return fmt.Errorf("field currencies: required")
	}
	if v, ok := raw["deposit_commission"]; !ok || v == nil {
		return fmt.Errorf("field deposit_commission: required")
	}
	if v, ok := raw["email"]; !ok || v == nil {
		return fmt.Errorf("field email: required")
	}
	if v, ok := raw["further_information"]; !ok || v == nil {
		return fmt.Errorf("field further_information: required")
	}
	if v, ok := raw["max_withdrawal"]; !ok || v == nil {
		return fmt.Errorf("field max_withdrawal: required")
	}
	if v, ok := raw["min_withdrawal"]; !ok || v == nil {
		return fmt.Errorf("field min_withdrawal: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["paymentagent_loginid"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_loginid: required")
	}
	if v, ok := raw["phone_numbers"]; !ok || v == nil {
		return fmt.Errorf("field phone_numbers: required")
	}
	if v, ok := raw["summary"]; !ok || v == nil {
		return fmt.Errorf("field summary: required")
	}
	if v, ok := raw["supported_payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field supported_payment_methods: required")
	}
	if v, ok := raw["urls"]; !ok || v == nil {
		return fmt.Errorf("field urls: required")
	}
	if v, ok := raw["withdrawal_commission"]; !ok || v == nil {
		return fmt.Errorf("field withdrawal_commission: required")
	}
	type Plain PaymentagentListResponsePaymentagentListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListResponsePaymentagentListListElem(plain)
	return nil
}

var enumValues_ProposalOpenContractRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractRequestSubscribe, v)
	}
	*j = ProposalOpenContractRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentListResponseMsgType, v)
	}
	*j = PaymentagentListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["proposal_open_contract"]; !ok || v == nil {
		return fmt.Errorf("field proposal_open_contract: required")
	}
	type Plain ProposalOpenContractRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalOpenContractRequest(plain)
	return nil
}

var enumValues_PaymentagentListResponseMsgType = []interface{}{
	"paymentagent_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["paymentagent_list"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_list: required")
	}
	type Plain PaymentagentListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListRequest(plain)
	return nil
}

var enumValues_ProposalOpenContractResponseMsgType = []interface{}{
	"proposal_open_contract",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseMsgType, v)
	}
	*j = ProposalOpenContractResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentDetailsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentDetailsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponsePaymentagentDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["can_apply"]; !ok || v == nil {
		return fmt.Errorf("field can_apply: required")
	}
	type Plain PaymentagentDetailsResponsePaymentagentDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentDetailsResponsePaymentagentDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized, v)
	}
	*j = PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized(v)
	return nil
}

var enumValues_ProposalOpenContractResponseProposalOpenContractIsExpired = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsExpired) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsExpired {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsExpired, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsExpired(v)
	return nil
}

var enumValues_PaymentagentDetailsResponsePaymentagentDetailsNewlyAuthorized = []interface{}{
	0,
	1,
}
var enumValues_ProposalOpenContractResponseProposalOpenContractIsForwardStarting = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsForwardStarting) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsForwardStarting {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsForwardStarting, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsForwardStarting(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval, v)
	}
	*j = PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval(v)
	return nil
}

var enumValues_ProposalOpenContractResponseProposalOpenContractIsIntraday = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsIntraday) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsIntraday {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsIntraday, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsIntraday(v)
	return nil
}

var enumValues_PaymentagentDetailsResponsePaymentagentDetailsCodeOfConductApproval = []interface{}{
	0,
	1,
}
var enumValues_ProposalOpenContractResponseProposalOpenContractIsPathDependent = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsPathDependent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsPathDependent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsPathDependent, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsPathDependent(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponsePaymentagentDetailsCanApply) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsResponsePaymentagentDetailsCanApply {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsResponsePaymentagentDetailsCanApply, v)
	}
	*j = PaymentagentDetailsResponsePaymentagentDetailsCanApply(v)
	return nil
}

var enumValues_ProposalOpenContractResponseProposalOpenContractIsSettleable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsSettleable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsSettleable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsSettleable, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsSettleable(v)
	return nil
}

var enumValues_PaymentagentDetailsResponsePaymentagentDetailsCanApply = []interface{}{
	0,
	1,
}
var enumValues_ProposalOpenContractResponseProposalOpenContractIsSold = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsSold) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsSold {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsSold, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsSold(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsResponseMsgType, v)
	}
	*j = PaymentagentDetailsResponseMsgType(v)
	return nil
}

var enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToCancel = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsValidToCancel) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToCancel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToCancel, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsValidToCancel(v)
	return nil
}

var enumValues_PaymentagentDetailsResponseMsgType = []interface{}{
	"paymentagent_details",
}
var enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToSell = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractIsValidToSell) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToSell {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractIsValidToSell, v)
	}
	*j = ProposalOpenContractResponseProposalOpenContractIsValidToSell(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["paymentagent_details"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_details: required")
	}
	type Plain PaymentagentDetailsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentDetailsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRequestPaymentagentDetails) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsRequestPaymentagentDetails {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsRequestPaymentagentDetails, v)
	}
	*j = PaymentagentDetailsRequestPaymentagentDetails(v)
	return nil
}

var enumValues_PaymentagentDetailsRequestPaymentagentDetails = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentCreateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentCreateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentCreateResponseMsgType, v)
	}
	*j = PaymentagentCreateResponseMsgType(v)
	return nil
}

var enumValues_ProposalOpenContractResponseProposalOpenContractStatus = []interface{}{
	"open",
	"sold",
	"won",
	"lost",
	"cancelled",
	nil,
}

// MarshalJSON implements json.Marshaler.
func (j *ProposalOpenContractResponseProposalOpenContractStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseProposalOpenContractStatus) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractResponseProposalOpenContractStatus {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractResponseProposalOpenContractStatus, v.Value)
	}
	*j = ProposalOpenContractResponseProposalOpenContractStatus(v)
	return nil
}

var enumValues_PaymentagentCreateResponseMsgType = []interface{}{
	"paymentagent_create",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["code_of_conduct_approval"]; !ok || v == nil {
		return fmt.Errorf("field code_of_conduct_approval: required")
	}
	if v, ok := raw["commission_deposit"]; !ok || v == nil {
		return fmt.Errorf("field commission_deposit: required")
	}
	if v, ok := raw["commission_withdrawal"]; !ok || v == nil {
		return fmt.Errorf("field commission_withdrawal: required")
	}
	if v, ok := raw["email"]; !ok || v == nil {
		return fmt.Errorf("field email: required")
	}
	if v, ok := raw["information"]; !ok || v == nil {
		return fmt.Errorf("field information: required")
	}
	if v, ok := raw["payment_agent_name"]; !ok || v == nil {
		return fmt.Errorf("field payment_agent_name: required")
	}
	if v, ok := raw["paymentagent_create"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_create: required")
	}
	if v, ok := raw["supported_payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field supported_payment_methods: required")
	}
	if v, ok := raw["urls"]; !ok || v == nil {
		return fmt.Errorf("field urls: required")
	}
	type Plain PaymentagentCreateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequestUrlsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["url"]; !ok || v == nil {
		return fmt.Errorf("field url: required")
	}
	type Plain PaymentagentCreateRequestUrlsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateRequestUrlsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequestSupportedPaymentMethodsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	type Plain PaymentagentCreateRequestSupportedPaymentMethodsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateRequestSupportedPaymentMethodsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain ProposalOpenContractResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalOpenContractResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequestPhoneNumbersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["phone_number"]; !ok || v == nil {
		return fmt.Errorf("field phone_number: required")
	}
	type Plain PaymentagentCreateRequestPhoneNumbersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateRequestPhoneNumbersElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	type Plain ProposalOpenContractResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalOpenContractResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequestPaymentagentCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentCreateRequestPaymentagentCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentCreateRequestPaymentagentCreate, v)
	}
	*j = PaymentagentCreateRequestPaymentagentCreate(v)
	return nil
}

var enumValues_ProposalRequestBarrierRange = []interface{}{
	"tight",
	"middle",
	"wide",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestBarrierRange) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestBarrierRange {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestBarrierRange, v)
	}
	*j = ProposalRequestBarrierRange(v)
	return nil
}

var enumValues_PaymentagentCreateRequestPaymentagentCreate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateRequestCodeOfConductApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentCreateRequestCodeOfConductApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentCreateRequestCodeOfConductApproval, v)
	}
	*j = PaymentagentCreateRequestCodeOfConductApproval(v)
	return nil
}

var enumValues_PaymentagentCreateRequestCodeOfConductApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentMethodsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentMethodsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentMethodsResponse(plain)
	return nil
}

var enumValues_ProposalRequestBasis = []interface{}{
	"payout",
	"stake",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestBasis) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestBasis {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestBasis, v)
	}
	*j = ProposalRequestBasis(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentMethodsResponsePaymentMethodsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["deposit_limits"]; !ok || v == nil {
		return fmt.Errorf("field deposit_limits: required")
	}
	if v, ok := raw["deposit_time"]; !ok || v == nil {
		return fmt.Errorf("field deposit_time: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["display_name"]; !ok || v == nil {
		return fmt.Errorf("field display_name: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_processor"]; !ok || v == nil {
		return fmt.Errorf("field payment_processor: required")
	}
	if v, ok := raw["predefined_amounts"]; !ok || v == nil {
		return fmt.Errorf("field predefined_amounts: required")
	}
	if v, ok := raw["signup_link"]; !ok || v == nil {
		return fmt.Errorf("field signup_link: required")
	}
	if v, ok := raw["supported_currencies"]; !ok || v == nil {
		return fmt.Errorf("field supported_currencies: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["type_display_name"]; !ok || v == nil {
		return fmt.Errorf("field type_display_name: required")
	}
	if v, ok := raw["withdraw_limits"]; !ok || v == nil {
		return fmt.Errorf("field withdraw_limits: required")
	}
	if v, ok := raw["withdrawal_time"]; !ok || v == nil {
		return fmt.Errorf("field withdrawal_time: required")
	}
	type Plain PaymentMethodsResponsePaymentMethodsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentMethodsResponsePaymentMethodsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentMethodsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentMethodsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentMethodsResponseMsgType, v)
	}
	*j = PaymentMethodsResponseMsgType(v)
	return nil
}

var enumValues_PaymentMethodsResponseMsgType = []interface{}{
	"payment_methods",
}
var enumValues_ProposalRequestContractType = []interface{}{
	"MULTUP",
	"MULTDOWN",
	"UPORDOWN",
	"EXPIRYRANGE",
	"ONETOUCH",
	"CALLE",
	"LBHIGHLOW",
	"ASIAND",
	"EXPIRYRANGEE",
	"DIGITDIFF",
	"DIGITMATCH",
	"DIGITOVER",
	"PUTE",
	"DIGITUNDER",
	"NOTOUCH",
	"CALL",
	"RANGE",
	"LBFLOATPUT",
	"DIGITODD",
	"PUT",
	"ASIANU",
	"LBFLOATCALL",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"DIGITEVEN",
	"TICKHIGH",
	"TICKLOW",
	"RESETCALL",
	"RESETPUT",
	"CALLSPREAD",
	"PUTSPREAD",
	"RUNHIGH",
	"RUNLOW",
	"ACCU",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestContractType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestContractType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestContractType, v)
	}
	*j = ProposalRequestContractType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentMethodsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field payment_methods: required")
	}
	type Plain PaymentMethodsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentMethodsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentMethodsRequestPaymentMethods) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentMethodsRequestPaymentMethods {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentMethodsRequestPaymentMethods, v)
	}
	*j = PaymentMethodsRequestPaymentMethods(v)
	return nil
}

var enumValues_PaymentMethodsRequestPaymentMethods = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPingResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PPingResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PPingResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPingResponseP2PPing) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PPingResponseP2PPing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PPingResponseP2PPing, v)
	}
	*j = P2PPingResponseP2PPing(v)
	return nil
}

var enumValues_P2PPingResponseP2PPing = []interface{}{
	"pong",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPingResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PPingResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PPingResponseMsgType, v)
	}
	*j = P2PPingResponseMsgType(v)
	return nil
}

var enumValues_P2PPingResponseMsgType = []interface{}{
	"p2p_ping",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPingRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_ping"]; !ok || v == nil {
		return fmt.Errorf("field p2p_ping: required")
	}
	type Plain P2PPingRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PPingRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPingRequestP2PPing) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PPingRequestP2PPing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PPingRequestP2PPing, v)
	}
	*j = P2PPingRequestP2PPing(v)
	return nil
}

var enumValues_P2PPingRequestP2PPing = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPaymentMethodsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PPaymentMethodsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PPaymentMethodsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPaymentMethodsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PPaymentMethodsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PPaymentMethodsResponseMsgType, v)
	}
	*j = P2PPaymentMethodsResponseMsgType(v)
	return nil
}

var enumValues_P2PPaymentMethodsResponseMsgType = []interface{}{
	"p2p_payment_methods",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPaymentMethodsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field p2p_payment_methods: required")
	}
	type Plain P2PPaymentMethodsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PPaymentMethodsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PPaymentMethodsRequestP2PPaymentMethods) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PPaymentMethodsRequestP2PPaymentMethods {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PPaymentMethodsRequestP2PPaymentMethods, v)
	}
	*j = P2PPaymentMethodsRequestP2PPaymentMethods(v)
	return nil
}

var enumValues_P2PPaymentMethodsRequestP2PPaymentMethods = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderReviewResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderReviewResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewResponseP2POrderReview) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advertiser_id"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_id: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["order_id"]; !ok || v == nil {
		return fmt.Errorf("field order_id: required")
	}
	if v, ok := raw["rating"]; !ok || v == nil {
		return fmt.Errorf("field rating: required")
	}
	if v, ok := raw["recommended"]; !ok || v == nil {
		return fmt.Errorf("field recommended: required")
	}
	type Plain P2POrderReviewResponseP2POrderReview
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderReviewResponseP2POrderReview(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewResponseP2POrderReviewRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewResponseP2POrderReviewRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewResponseP2POrderReviewRecommended, v.Value)
	}
	*j = P2POrderReviewResponseP2POrderReviewRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderReviewResponseP2POrderReviewRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderReviewResponseP2POrderReviewRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewResponseMsgType, v)
	}
	*j = P2POrderReviewResponseMsgType(v)
	return nil
}

var enumValues_P2POrderReviewResponseMsgType = []interface{}{
	"p2p_order_review",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["order_id"]; !ok || v == nil {
		return fmt.Errorf("field order_id: required")
	}
	if v, ok := raw["p2p_order_review"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_review: required")
	}
	if v, ok := raw["rating"]; !ok || v == nil {
		return fmt.Errorf("field rating: required")
	}
	type Plain P2POrderReviewRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderReviewRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewRequestRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewRequestRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewRequestRecommended, v.Value)
	}
	*j = P2POrderReviewRequestRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderReviewRequestRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderReviewRequestRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewRequestP2POrderReview) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewRequestP2POrderReview {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewRequestP2POrderReview, v)
	}
	*j = P2POrderReviewRequestP2POrderReview(v)
	return nil
}

var enumValues_P2POrderReviewRequestP2POrderReview = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2POrderListResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain P2POrderListResponseP2POrderList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderList(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderListResponseP2POrderListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemVerificationPending) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemVerificationPending {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemVerificationPending, v)
	}
	*j = P2POrderListResponseP2POrderListListElemVerificationPending(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemVerificationPending = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemType, v)
	}
	*j = P2POrderListResponseP2POrderListListElemType(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemStatus, v)
	}
	*j = P2POrderListResponseP2POrderListListElemStatus(v)
	return nil
}

var enumValues_ProposalRequestDurationUnit = []interface{}{
	"d",
	"m",
	"s",
	"h",
	"t",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestDurationUnit) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestDurationUnit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestDurationUnit, v)
	}
	*j = ProposalRequestDurationUnit(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemStatus = []interface{}{
	"pending",
	"buyer-confirmed",
	"cancelled",
	"timed-out",
	"blocked",
	"refunded",
	"completed",
	"disputed",
	"dispute-refunded",
	"dispute-completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemReviewDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["rating"]; !ok || v == nil {
		return fmt.Errorf("field rating: required")
	}
	if v, ok := raw["recommended"]; !ok || v == nil {
		return fmt.Errorf("field recommended: required")
	}
	type Plain P2POrderListResponseP2POrderListListElemReviewDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElemReviewDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemReviewDetailsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemReviewDetailsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemReviewDetailsRecommended, v.Value)
	}
	*j = P2POrderListResponseP2POrderListListElemReviewDetailsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListResponseP2POrderListListElemReviewDetailsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderListResponseP2POrderListListElemReviewDetailsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemIsSeen, v)
	}
	*j = P2POrderListResponseP2POrderListListElemIsSeen(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemIsReviewable, v)
	}
	*j = P2POrderListResponseP2POrderListListElemIsReviewable(v)
	return nil
}

var enumValues_ProposalRequestProductType = []interface{}{
	"basic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestProductType, v)
	}
	*j = ProposalRequestProductType(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemIsReviewable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemIsIncoming, v)
	}
	*j = P2POrderListResponseP2POrderListListElemIsIncoming(v)
	return nil
}

var enumValues_ProposalRequestProposal = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestProposal) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestProposal {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestProposal, v)
	}
	*j = ProposalRequestProposal(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemIsIncoming = []interface{}{
	0,
	1,
}
var enumValues_ProposalRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalRequestSubscribe, v)
	}
	*j = ProposalRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderListResponseP2POrderListListElemDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElemDisputeDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_type"]; !ok || v == nil {
		return fmt.Errorf("field contract_type: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["proposal"]; !ok || v == nil {
		return fmt.Errorf("field proposal: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain ProposalRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["duration_unit"]; !ok || v == nil {
		plain.DurationUnit = "s"
	}
	if v, ok := raw["product_type"]; !ok || v == nil {
		plain.ProductType = "basic"
	}
	*j = ProposalRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderListResponseP2POrderListListElemClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElemClientDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended, v.Value)
	}
	*j = P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended(v)
	return nil
}

var enumValues_ProposalResponseMsgType = []interface{}{
	"proposal",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalResponseMsgType, v)
	}
	*j = ProposalResponseMsgType(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsOnline, v)
	}
	*j = P2POrderListResponseP2POrderListListElemClientDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemClientDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderListResponseP2POrderListListElemAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElemAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended, v.Value)
	}
	*j = P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalResponseProposal) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ask_price"]; !ok || v == nil {
		return fmt.Errorf("field ask_price: required")
	}
	if v, ok := raw["date_start"]; !ok || v == nil {
		return fmt.Errorf("field date_start: required")
	}
	if v, ok := raw["display_value"]; !ok || v == nil {
		return fmt.Errorf("field display_value: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["longcode"]; !ok || v == nil {
		return fmt.Errorf("field longcode: required")
	}
	if v, ok := raw["payout"]; !ok || v == nil {
		return fmt.Errorf("field payout: required")
	}
	if v, ok := raw["spot"]; !ok || v == nil {
		return fmt.Errorf("field spot: required")
	}
	if v, ok := raw["spot_time"]; !ok || v == nil {
		return fmt.Errorf("field spot_time: required")
	}
	type Plain ProposalResponseProposal
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalResponseProposal(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain ProposalResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalResponseSubscription(plain)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ProposalResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderListResponseP2POrderListListElemAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResponseP2POrderListListElemAdvertDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseP2POrderListListElemAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseP2POrderListListElemAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseP2POrderListListElemAdvertDetailsType, v)
	}
	*j = P2POrderListResponseP2POrderListListElemAdvertDetailsType(v)
	return nil
}

var enumValues_RealityCheckRequestRealityCheck = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckRequestRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RealityCheckRequestRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RealityCheckRequestRealityCheck, v)
	}
	*j = RealityCheckRequestRealityCheck(v)
	return nil
}

var enumValues_P2POrderListResponseP2POrderListListElemAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["reality_check"]; !ok || v == nil {
		return fmt.Errorf("field reality_check: required")
	}
	type Plain RealityCheckRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RealityCheckRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListResponseMsgType, v)
	}
	*j = P2POrderListResponseMsgType(v)
	return nil
}

var enumValues_P2POrderListResponseMsgType = []interface{}{
	"p2p_order_list",
}
var enumValues_RealityCheckResponseMsgType = []interface{}{
	"reality_check",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RealityCheckResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RealityCheckResponseMsgType, v)
	}
	*j = RealityCheckResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_order_list"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_list: required")
	}
	type Plain P2POrderListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0
	}
	*j = P2POrderListRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRequestSubscribe, v)
	}
	*j = P2POrderListRequestSubscribe(v)
	return nil
}

var enumValues_P2POrderListRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain RealityCheckResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RealityCheckResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRequestP2POrderList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRequestP2POrderList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRequestP2POrderList, v)
	}
	*j = P2POrderListRequestP2POrderList(v)
	return nil
}

var enumValues_P2POrderListRequestP2POrderList = []interface{}{
	1,
}
var enumValues_ResidenceListRequestResidenceList = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListRequestResidenceList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ResidenceListRequestResidenceList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ResidenceListRequestResidenceList, v)
	}
	*j = ResidenceListRequestResidenceList(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRequestActive) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRequestActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRequestActive, v)
	}
	*j = P2POrderListRequestActive(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["residence_list"]; !ok || v == nil {
		return fmt.Errorf("field residence_list: required")
	}
	type Plain ResidenceListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ResidenceListRequest(plain)
	return nil
}

var enumValues_P2POrderListRequestActive = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderInfoResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponse(plain)
	return nil
}

var enumValues_ResidenceListResponseMsgType = []interface{}{
	"residence_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ResidenceListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ResidenceListResponseMsgType, v)
	}
	*j = ResidenceListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2POrderInfoResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["client_details"]; !ok || v == nil {
		return fmt.Errorf("field client_details: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfo(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoVerificationPending) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoVerificationPending {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoVerificationPending, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoVerificationPending(v)
	return nil
}

var enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample, v)
	}
	*j = ResidenceListResponseResidenceListElemIdentityServicesIdvHasVisualSample(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoVerificationPending = []interface{}{
	0,
	1,
}
var enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported, v)
	}
	*j = ResidenceListResponseResidenceListElemIdentityServicesIdvIsCountrySupported(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoType, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoType(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoStatus, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoStatus(v)
	return nil
}

var enumValues_ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported, v)
	}
	*j = ResidenceListResponseResidenceListElemIdentityServicesOnfidoIsCountrySupported(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoStatus = []interface{}{
	"pending",
	"buyer-confirmed",
	"cancelled",
	"timed-out",
	"blocked",
	"refunded",
	"completed",
	"disputed",
	"dispute-refunded",
	"dispute-completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoReviewDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["rating"]; !ok || v == nil {
		return fmt.Errorf("field rating: required")
	}
	if v, ok := raw["recommended"]; !ok || v == nil {
		return fmt.Errorf("field recommended: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfoReviewDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfoReviewDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended, v.Value)
	}
	*j = P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderInfoResponseP2POrderInfoReviewDetailsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ResidenceListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ResidenceListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ResidenceListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoIsSeen, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoIsSeen(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RevokeOauthAppRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["revoke_oauth_app"]; !ok || v == nil {
		return fmt.Errorf("field revoke_oauth_app: required")
	}
	type Plain RevokeOauthAppRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RevokeOauthAppRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoIsReviewable, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoIsReviewable(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoIsReviewable = []interface{}{
	0,
	1,
}
var enumValues_RevokeOauthAppResponseMsgType = []interface{}{
	"revoke_oauth_app",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RevokeOauthAppResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RevokeOauthAppResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RevokeOauthAppResponseMsgType, v)
	}
	*j = RevokeOauthAppResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoIsIncoming, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoIsIncoming(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoIsIncoming = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RevokeOauthAppResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain RevokeOauthAppResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RevokeOauthAppResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfoDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfoDisputeDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfoClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfoClientDetails(plain)
	return nil
}

var enumValues_SellContractForMultipleAccountsRequestSellContractForMultipleAccounts = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccountsRequestSellContractForMultipleAccounts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellContractForMultipleAccountsRequestSellContractForMultipleAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellContractForMultipleAccountsRequestSellContractForMultipleAccounts, v)
	}
	*j = SellContractForMultipleAccountsRequestSellContractForMultipleAccounts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended, v.Value)
	}
	*j = P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccountsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["sell_contract_for_multiple_accounts"]; !ok || v == nil {
		return fmt.Errorf("field sell_contract_for_multiple_accounts: required")
	}
	if v, ok := raw["shortcode"]; !ok || v == nil {
		return fmt.Errorf("field shortcode: required")
	}
	if v, ok := raw["tokens"]; !ok || v == nil {
		return fmt.Errorf("field tokens: required")
	}
	type Plain SellContractForMultipleAccountsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellContractForMultipleAccountsRequest(plain)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}
var enumValues_SellContractForMultipleAccountsResponseMsgType = []interface{}{
	"sell_contract_for_multiple_accounts",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccountsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellContractForMultipleAccountsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellContractForMultipleAccountsResponseMsgType, v)
	}
	*j = SellContractForMultipleAccountsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoClientDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfoAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfoAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccountsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SellContractForMultipleAccountsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellContractForMultipleAccountsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended, v.Value)
	}
	*j = P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_SellExpiredRequestSellExpired = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredRequestSellExpired) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellExpiredRequestSellExpired {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellExpiredRequestSellExpired, v)
	}
	*j = SellExpiredRequestSellExpired(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["sell_expired"]; !ok || v == nil {
		return fmt.Errorf("field sell_expired: required")
	}
	type Plain SellExpiredRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellExpiredRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_SellExpiredResponseMsgType = []interface{}{
	"sell_expired",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellExpiredResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellExpiredResponseMsgType, v)
	}
	*j = SellExpiredResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderInfoResponseP2POrderInfoAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoResponseP2POrderInfoAdvertDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseP2POrderInfoAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseP2POrderInfoAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseP2POrderInfoAdvertDetailsType, v)
	}
	*j = P2POrderInfoResponseP2POrderInfoAdvertDetailsType(v)
	return nil
}

var enumValues_P2POrderInfoResponseP2POrderInfoAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SellExpiredResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellExpiredResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoResponseMsgType, v)
	}
	*j = P2POrderInfoResponseMsgType(v)
	return nil
}

var enumValues_P2POrderInfoResponseMsgType = []interface{}{
	"p2p_order_info",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["sell"]; !ok || v == nil {
		return fmt.Errorf("field sell: required")
	}
	type Plain SellRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["p2p_order_info"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_info: required")
	}
	type Plain P2POrderInfoRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderInfoRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoRequestSubscribe, v)
	}
	*j = P2POrderInfoRequestSubscribe(v)
	return nil
}

var enumValues_SellResponseMsgType = []interface{}{
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellResponseMsgType, v)
	}
	*j = SellResponseMsgType(v)
	return nil
}

var enumValues_P2POrderInfoRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderInfoRequestP2POrderInfo) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderInfoRequestP2POrderInfo {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderInfoRequestP2POrderInfo, v)
	}
	*j = P2POrderInfoRequestP2POrderInfo(v)
	return nil
}

var enumValues_P2POrderInfoRequestP2POrderInfo = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SellResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderDisputeResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDispute) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["client_details"]; !ok || v == nil {
		return fmt.Errorf("field client_details: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["is_seen"]; !ok || v == nil {
		return fmt.Errorf("field is_seen: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderDisputeResponseP2POrderDispute
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponseP2POrderDispute(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetAccountCurrencyRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["set_account_currency"]; !ok || v == nil {
		return fmt.Errorf("field set_account_currency: required")
	}
	type Plain SetAccountCurrencyRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetAccountCurrencyRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeVerificationPending) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeVerificationPending {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeVerificationPending, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeVerificationPending(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeVerificationPending = []interface{}{
	0,
	1,
}
var enumValues_SetAccountCurrencyResponseMsgType = []interface{}{
	"set_account_currency",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetAccountCurrencyResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetAccountCurrencyResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetAccountCurrencyResponseMsgType, v)
	}
	*j = SetAccountCurrencyResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeType, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeType(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeType = []interface{}{
	"buy",
	"sell",
}
var enumValues_SetAccountCurrencyResponseSetAccountCurrency = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetAccountCurrencyResponseSetAccountCurrency) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetAccountCurrencyResponseSetAccountCurrency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetAccountCurrencyResponseSetAccountCurrency, v)
	}
	*j = SetAccountCurrencyResponseSetAccountCurrency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeStatus, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetAccountCurrencyResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SetAccountCurrencyResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetAccountCurrencyResponse(plain)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeStatus = []interface{}{
	"pending",
	"buyer-confirmed",
	"cancelled",
	"timed-out",
	"blocked",
	"refunded",
	"completed",
	"disputed",
	"dispute-refunded",
	"dispute-completed",
}
var enumValues_SetFinancialAssessmentRequestAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestAccountTurnover, v)
	}
	*j = SetFinancialAssessmentRequestAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeIsSeen, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeIsSeen(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeIsReviewable, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeIsReviewable(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeIsReviewable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeIsIncoming, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeIsIncoming(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeIsIncoming = []interface{}{
	0,
	1,
}
var enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestBinaryOptionsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestBinaryOptionsTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderDisputeResponseP2POrderDisputeDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponseP2POrderDisputeDisputeDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderDisputeResponseP2POrderDisputeClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponseP2POrderDisputeClientDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeClientDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestBinaryOptionsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestBinaryOptionsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestBinaryOptionsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderDisputeResponseP2POrderDisputeAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponseP2POrderDisputeAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderDisputeResponseP2POrderDisputeAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResponseP2POrderDisputeAdvertDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType, v)
	}
	*j = P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestCfdTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestCfdTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestCfdTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestCfdTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestCfdTradingExperience(v)
	return nil
}

var enumValues_P2POrderDisputeResponseP2POrderDisputeAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeResponseMsgType, v)
	}
	*j = P2POrderDisputeResponseMsgType(v)
	return nil
}

var enumValues_P2POrderDisputeResponseMsgType = []interface{}{
	"p2p_order_dispute",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["p2p_order_dispute"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_dispute: required")
	}
	type Plain P2POrderDisputeRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRequest(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestCfdTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestCfdTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestCfdTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestCfdTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestCfdTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRequestP2POrderDispute) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRequestP2POrderDispute {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRequestP2POrderDispute, v)
	}
	*j = P2POrderDisputeRequestP2POrderDispute(v)
	return nil
}

var enumValues_P2POrderDisputeRequestP2POrderDispute = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRequestDisputeReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRequestDisputeReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRequestDisputeReason, v)
	}
	*j = P2POrderDisputeRequestDisputeReason(v)
	return nil
}

var enumValues_P2POrderDisputeRequestDisputeReason = []interface{}{
	"seller_not_released",
	"buyer_underpaid",
	"buyer_overpaid",
	"buyer_not_paid",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderCreateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponse(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestEducationLevel, v)
	}
	*j = SetFinancialAssessmentRequestEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2POrderCreateResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["client_details"]; !ok || v == nil {
		return fmt.Errorf("field client_details: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["is_seen"]; !ok || v == nil {
		return fmt.Errorf("field is_seen: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderCreateResponseP2POrderCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseP2POrderCreate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateType, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateType(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateType = []interface{}{
	"buy",
	"sell",
}
var enumValues_SetFinancialAssessmentRequestEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestEmploymentIndustry, v)
	}
	*j = SetFinancialAssessmentRequestEmploymentIndustry(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateStatus, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateStatus(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateStatus = []interface{}{
	"pending",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateIsSeen, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateIsSeen(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateIsReviewable, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateIsReviewable(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateIsReviewable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateIsIncoming, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateIsIncoming(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateIsIncoming = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderCreateResponseP2POrderCreateDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseP2POrderCreateDisputeDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderCreateResponseP2POrderCreateClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseP2POrderCreateClientDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateClientDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderCreateResponseP2POrderCreateAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseP2POrderCreateAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_SetFinancialAssessmentRequestEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestEmploymentStatus, v)
	}
	*j = SetFinancialAssessmentRequestEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderCreateResponseP2POrderCreateAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateResponseP2POrderCreateAdvertDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseP2POrderCreateAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseP2POrderCreateAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseP2POrderCreateAdvertDetailsType, v)
	}
	*j = P2POrderCreateResponseP2POrderCreateAdvertDetailsType(v)
	return nil
}

var enumValues_P2POrderCreateResponseP2POrderCreateAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateResponseMsgType, v)
	}
	*j = P2POrderCreateResponseMsgType(v)
	return nil
}

var enumValues_P2POrderCreateResponseMsgType = []interface{}{
	"p2p_order_create",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_id"]; !ok || v == nil {
		return fmt.Errorf("field advert_id: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["p2p_order_create"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_create: required")
	}
	type Plain P2POrderCreateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCreateRequest(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestEstimatedWorth, v)
	}
	*j = SetFinancialAssessmentRequestEstimatedWorth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateRequestSubscribe, v)
	}
	*j = P2POrderCreateRequestSubscribe(v)
	return nil
}

var enumValues_P2POrderCreateRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCreateRequestP2POrderCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCreateRequestP2POrderCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCreateRequestP2POrderCreate, v)
	}
	*j = P2POrderCreateRequestP2POrderCreate(v)
	return nil
}

var enumValues_P2POrderCreateRequestP2POrderCreate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderConfirmResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderConfirmResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResponseP2POrderConfirm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2POrderConfirmResponseP2POrderConfirm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderConfirmResponseP2POrderConfirm(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationAccountTurnover, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResponseP2POrderConfirmStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmResponseP2POrderConfirmStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmResponseP2POrderConfirmStatus, v)
	}
	*j = P2POrderConfirmResponseP2POrderConfirmStatus(v)
	return nil
}

var enumValues_P2POrderConfirmResponseP2POrderConfirmStatus = []interface{}{
	"buyer-confirmed",
	"completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResponseP2POrderConfirmDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmResponseP2POrderConfirmDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmResponseP2POrderConfirmDryRun, v)
	}
	*j = P2POrderConfirmResponseP2POrderConfirmDryRun(v)
	return nil
}

var enumValues_P2POrderConfirmResponseP2POrderConfirmDryRun = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmResponseMsgType, v)
	}
	*j = P2POrderConfirmResponseMsgType(v)
	return nil
}

var enumValues_P2POrderConfirmResponseMsgType = []interface{}{
	"p2p_order_confirm",
}
var enumValues_SetFinancialAssessmentRequestFinancialInformationEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationEducationLevel, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["p2p_order_confirm"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_confirm: required")
	}
	type Plain P2POrderConfirmRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["dry_run"]; !ok || v == nil {
		plain.DryRun = 0
	}
	*j = P2POrderConfirmRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRequestP2POrderConfirm) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmRequestP2POrderConfirm {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmRequestP2POrderConfirm, v)
	}
	*j = P2POrderConfirmRequestP2POrderConfirm(v)
	return nil
}

var enumValues_P2POrderConfirmRequestP2POrderConfirm = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRequestDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmRequestDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmRequestDryRun, v)
	}
	*j = P2POrderConfirmRequestDryRun(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationEmploymentIndustry(v)
	return nil
}

var enumValues_P2POrderConfirmRequestDryRun = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderCancelResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCancelResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelResponseP2POrderCancel) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	type Plain P2POrderCancelResponseP2POrderCancel
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCancelResponseP2POrderCancel(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelResponseP2POrderCancelStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCancelResponseP2POrderCancelStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCancelResponseP2POrderCancelStatus, v)
	}
	*j = P2POrderCancelResponseP2POrderCancelStatus(v)
	return nil
}

var enumValues_P2POrderCancelResponseP2POrderCancelStatus = []interface{}{
	"cancelled",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCancelResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCancelResponseMsgType, v)
	}
	*j = P2POrderCancelResponseMsgType(v)
	return nil
}

var enumValues_P2POrderCancelResponseMsgType = []interface{}{
	"p2p_order_cancel",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["p2p_order_cancel"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_cancel: required")
	}
	type Plain P2POrderCancelRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCancelRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelRequestP2POrderCancel) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCancelRequestP2POrderCancel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCancelRequestP2POrderCancel, v)
	}
	*j = P2POrderCancelRequestP2POrderCancel(v)
	return nil
}

var enumValues_P2POrderCancelRequestP2POrderCancel = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PChatCreateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PChatCreateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateResponseP2PChatCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["channel_url"]; !ok || v == nil {
		return fmt.Errorf("field channel_url: required")
	}
	if v, ok := raw["order_id"]; !ok || v == nil {
		return fmt.Errorf("field order_id: required")
	}
	type Plain P2PChatCreateResponseP2PChatCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PChatCreateResponseP2PChatCreate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PChatCreateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PChatCreateResponseMsgType, v)
	}
	*j = P2PChatCreateResponseMsgType(v)
	return nil
}

var enumValues_P2PChatCreateResponseMsgType = []interface{}{
	"p2p_chat_create",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["order_id"]; !ok || v == nil {
		return fmt.Errorf("field order_id: required")
	}
	if v, ok := raw["p2p_chat_create"]; !ok || v == nil {
		return fmt.Errorf("field p2p_chat_create: required")
	}
	type Plain P2PChatCreateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PChatCreateRequest(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationEmploymentStatus, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateRequestP2PChatCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PChatCreateRequestP2PChatCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PChatCreateRequestP2PChatCreate, v)
	}
	*j = P2PChatCreateRequestP2PChatCreate(v)
	return nil
}

var enumValues_P2PChatCreateRequestP2PChatCreate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserUpdateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates: required")
	}
	if v, ok := raw["balance_available"]; !ok || v == nil {
		return fmt.Errorf("field balance_available: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification: required")
	}
	if v, ok := raw["blocked_by_count"]; !ok || v == nil {
		return fmt.Errorf("field blocked_by_count: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg: required")
	}
	if v, ok := raw["cancels_remaining"]; !ok || v == nil {
		return fmt.Errorf("field cancels_remaining: required")
	}
	if v, ok := raw["chat_token"]; !ok || v == nil {
		return fmt.Errorf("field chat_token: required")
	}
	if v, ok := raw["chat_user_id"]; !ok || v == nil {
		return fmt.Errorf("field chat_user_id: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count: required")
	}
	if v, ok := raw["show_name"]; !ok || v == nil {
		return fmt.Errorf("field show_name: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover: required")
	}
	type Plain P2PAdvertiserUpdateResponseP2PAdvertiserUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateUpgradableDailyLimits) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_daily_buy"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_buy: required")
	}
	if v, ok := raw["max_daily_sell"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_sell: required")
	}
	type Plain P2PAdvertiserUpdateResponseP2PAdvertiserUpdateUpgradableDailyLimits
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateUpgradableDailyLimits(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationEstimatedWorth, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationEstimatedWorth(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationIncomeSource, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationIncomeSource(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateIsApproved = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateFullVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification, v)
	}
	*j = P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseP2PAdvertiserUpdateBasicVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateResponseMsgType, v)
	}
	*j = P2PAdvertiserUpdateResponseMsgType(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateResponseMsgType = []interface{}{
	"p2p_advertiser_update",
}
var enumValues_SetFinancialAssessmentRequestFinancialInformationNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationNetIncome, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationNetIncome(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_update"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_update: required")
	}
	type Plain P2PAdvertiserUpdateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRequestUpgradeLimits) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRequestUpgradeLimits {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRequestUpgradeLimits, v)
	}
	*j = P2PAdvertiserUpdateRequestUpgradeLimits(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateRequestUpgradeLimits = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRequestShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRequestShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRequestShowName, v)
	}
	*j = P2PAdvertiserUpdateRequestShowName(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateRequestShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRequestP2PAdvertiserUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRequestP2PAdvertiserUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRequestP2PAdvertiserUpdate, v)
	}
	*j = P2PAdvertiserUpdateRequestP2PAdvertiserUpdate(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationOccupation, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationOccupation(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateRequestP2PAdvertiserUpdate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRequestIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRequestIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRequestIsListed, v)
	}
	*j = P2PAdvertiserUpdateRequestIsListed(v)
	return nil
}

var enumValues_P2PAdvertiserUpdateRequestIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserRelationsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserRelationsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsResponseP2PAdvertiserRelations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["blocked_advertisers"]; !ok || v == nil {
		return fmt.Errorf("field blocked_advertisers: required")
	}
	if v, ok := raw["favourite_advertisers"]; !ok || v == nil {
		return fmt.Errorf("field favourite_advertisers: required")
	}
	type Plain P2PAdvertiserRelationsResponseP2PAdvertiserRelations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserRelationsResponseP2PAdvertiserRelations(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserRelationsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserRelationsResponseMsgType, v)
	}
	*j = P2PAdvertiserRelationsResponseMsgType(v)
	return nil
}

var enumValues_P2PAdvertiserRelationsResponseMsgType = []interface{}{
	"p2p_advertiser_relations",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_relations"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_relations: required")
	}
	type Plain P2PAdvertiserRelationsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserRelationsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsRequestP2PAdvertiserRelations) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserRelationsRequestP2PAdvertiserRelations {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserRelationsRequestP2PAdvertiserRelations, v)
	}
	*j = P2PAdvertiserRelationsRequestP2PAdvertiserRelations(v)
	return nil
}

var enumValues_P2PAdvertiserRelationsRequestP2PAdvertiserRelations = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserPaymentMethodsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserPaymentMethodsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserPaymentMethodsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserPaymentMethodsResponseMsgType, v)
	}
	*j = P2PAdvertiserPaymentMethodsResponseMsgType(v)
	return nil
}

var enumValues_P2PAdvertiserPaymentMethodsResponseMsgType = []interface{}{
	"p2p_advertiser_payment_methods",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_payment_methods: required")
	}
	type Plain P2PAdvertiserPaymentMethodsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserPaymentMethodsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods, v)
	}
	*j = P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestFinancialInformationSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformationSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestFinancialInformationSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestFinancialInformationSourceOfWealth, v)
	}
	*j = SetFinancialAssessmentRequestFinancialInformationSourceOfWealth(v)
	return nil
}

var enumValues_P2PAdvertiserPaymentMethodsRequestP2PAdvertiserPaymentMethods = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsRequestCreateElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["method"]; !ok || v == nil {
		return fmt.Errorf("field method: required")
	}
	type Plain P2PAdvertiserPaymentMethodsRequestCreateElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserPaymentMethodsRequestCreateElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain P2PAdvertiserListResponseP2PAdvertiserList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserList(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved: required")
	}
	if v, ok := raw["is_blocked"]; !ok || v == nil {
		return fmt.Errorf("field is_blocked: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover: required")
	}
	type Plain P2PAdvertiserListResponseP2PAdvertiserListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsRecommended = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestFinancialInformation) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["education_level"]; !ok || v == nil {
		return fmt.Errorf("field education_level: required")
	}
	if v, ok := raw["employment_industry"]; !ok || v == nil {
		return fmt.Errorf("field employment_industry: required")
	}
	if v, ok := raw["estimated_worth"]; !ok || v == nil {
		return fmt.Errorf("field estimated_worth: required")
	}
	if v, ok := raw["income_source"]; !ok || v == nil {
		return fmt.Errorf("field income_source: required")
	}
	if v, ok := raw["net_income"]; !ok || v == nil {
		return fmt.Errorf("field net_income: required")
	}
	if v, ok := raw["occupation"]; !ok || v == nil {
		return fmt.Errorf("field occupation: required")
	}
	type Plain SetFinancialAssessmentRequestFinancialInformation
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentRequestFinancialInformation(plain)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsOnline = []interface{}{
	0,
	1,
}
var enumValues_SetFinancialAssessmentRequestForexTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestForexTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestForexTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestForexTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestForexTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsFavourite = []interface{}{
	0,
	1,
}
var enumValues_SetFinancialAssessmentRequestForexTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestForexTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestForexTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestForexTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestForexTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsBlocked = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemIsApproved = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestIncomeSource, v)
	}
	*j = SetFinancialAssessmentRequestIncomeSource(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemFullVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification, v)
	}
	*j = P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseP2PAdvertiserListListElemBasicVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListResponseMsgType, v)
	}
	*j = P2PAdvertiserListResponseMsgType(v)
	return nil
}

var enumValues_P2PAdvertiserListResponseMsgType = []interface{}{
	"p2p_advertiser_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_list"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_list: required")
	}
	type Plain P2PAdvertiserListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0
	}
	if v, ok := raw["sort_by"]; !ok || v == nil {
		plain.SortBy = "created_time"
	}
	*j = P2PAdvertiserListRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListRequestTradePartners) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListRequestTradePartners {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListRequestTradePartners, v)
	}
	*j = P2PAdvertiserListRequestTradePartners(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestNetIncome, v)
	}
	*j = SetFinancialAssessmentRequestNetIncome(v)
	return nil
}

var enumValues_P2PAdvertiserListRequestTradePartners = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListRequestSortBy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListRequestSortBy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListRequestSortBy, v)
	}
	*j = P2PAdvertiserListRequestSortBy(v)
	return nil
}

var enumValues_P2PAdvertiserListRequestSortBy = []interface{}{
	"name",
	"id",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListRequestP2PAdvertiserList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListRequestP2PAdvertiserList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListRequestP2PAdvertiserList, v)
	}
	*j = P2PAdvertiserListRequestP2PAdvertiserList(v)
	return nil
}

var enumValues_P2PAdvertiserListRequestP2PAdvertiserList = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListRequestIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListRequestIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListRequestIsBlocked, v)
	}
	*j = P2PAdvertiserListRequestIsBlocked(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestOccupation, v)
	}
	*j = SetFinancialAssessmentRequestOccupation(v)
	return nil
}

var enumValues_P2PAdvertiserListRequestIsBlocked = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserInfoResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2PAdvertiserInfoResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover: required")
	}
	type Plain P2PAdvertiserInfoResponseP2PAdvertiserInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfo(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoUpgradableDailyLimits) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_daily_buy"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_buy: required")
	}
	if v, ok := raw["max_daily_sell"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_sell: required")
	}
	type Plain P2PAdvertiserInfoResponseP2PAdvertiserInfoUpgradableDailyLimits
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoUpgradableDailyLimits(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended, v.Value)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsRecommended = []interface{}{
	nil,
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestOtherInstrumentsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestOtherInstrumentsTradingExperience(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsFavourite = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsBlocked = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestOtherInstrumentsTradingFrequency(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoIsApproved = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoFullVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification, v)
	}
	*j = P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseP2PAdvertiserInfoBasicVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoResponseMsgType, v)
	}
	*j = P2PAdvertiserInfoResponseMsgType(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestSetFinancialAssessment = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestSetFinancialAssessment) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestSetFinancialAssessment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestSetFinancialAssessment, v)
	}
	*j = SetFinancialAssessmentRequestSetFinancialAssessment(v)
	return nil
}

var enumValues_P2PAdvertiserInfoResponseMsgType = []interface{}{
	"p2p_advertiser_info",
}
var enumValues_SetFinancialAssessmentRequestSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestSourceOfWealth, v)
	}
	*j = SetFinancialAssessmentRequestSourceOfWealth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_info"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_info: required")
	}
	type Plain P2PAdvertiserInfoRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRequestSubscribe, v)
	}
	*j = P2PAdvertiserInfoRequestSubscribe(v)
	return nil
}

var enumValues_P2PAdvertiserInfoRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRequestP2PAdvertiserInfo) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRequestP2PAdvertiserInfo {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRequestP2PAdvertiserInfo, v)
	}
	*j = P2PAdvertiserInfoRequestP2PAdvertiserInfo(v)
	return nil
}

var enumValues_P2PAdvertiserInfoRequestP2PAdvertiserInfo = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserCreateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserCreateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2PAdvertiserCreateResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserCreateResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates: required")
	}
	if v, ok := raw["balance_available"]; !ok || v == nil {
		return fmt.Errorf("field balance_available: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification: required")
	}
	if v, ok := raw["blocked_by_count"]; !ok || v == nil {
		return fmt.Errorf("field blocked_by_count: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg: required")
	}
	if v, ok := raw["cancels_remaining"]; !ok || v == nil {
		return fmt.Errorf("field cancels_remaining: required")
	}
	if v, ok := raw["chat_token"]; !ok || v == nil {
		return fmt.Errorf("field chat_token: required")
	}
	if v, ok := raw["chat_user_id"]; !ok || v == nil {
		return fmt.Errorf("field chat_user_id: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count: required")
	}
	if v, ok := raw["show_name"]; !ok || v == nil {
		return fmt.Errorf("field show_name: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover: required")
	}
	type Plain P2PAdvertiserCreateResponseP2PAdvertiserCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreate(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateShowName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateIsListed(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateIsApproved(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceBinaryOptionsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateFullVerification(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification, v)
	}
	*j = P2PAdvertiserCreateResponseP2PAdvertiserCreateBasicVerification(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateResponseMsgType, v)
	}
	*j = P2PAdvertiserCreateResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["p2p_advertiser_create"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_create: required")
	}
	type Plain P2PAdvertiserCreateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserCreateRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateRequestSubscribe, v)
	}
	*j = P2PAdvertiserCreateRequestSubscribe(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceCfdTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserCreateRequestP2PAdvertiserCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserCreateRequestP2PAdvertiserCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserCreateRequestP2PAdvertiserCreate, v)
	}
	*j = P2PAdvertiserCreateRequestP2PAdvertiserCreate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertiserAdvertsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserAdvertsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdverts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain P2PAdvertiserAdvertsResponseP2PAdvertiserAdverts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdverts(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["active_orders"]; !ok || v == nil {
		return fmt.Errorf("field active_orders: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["counterparty_type"]; !ok || v == nil {
		return fmt.Errorf("field counterparty_type: required")
	}
	if v, ok := raw["country"]; !ok || v == nil {
		return fmt.Errorf("field country: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["effective_rate"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate: required")
	}
	if v, ok := raw["effective_rate_display"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate_display: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_active"]; !ok || v == nil {
		return fmt.Errorf("field is_active: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["max_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount: required")
	}
	if v, ok := raw["max_order_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_display: required")
	}
	if v, ok := raw["max_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit: required")
	}
	if v, ok := raw["max_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit_display: required")
	}
	if v, ok := raw["min_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount: required")
	}
	if v, ok := raw["min_order_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_display: required")
	}
	if v, ok := raw["min_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit: required")
	}
	if v, ok := raw["min_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit_display: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["rate_type"]; !ok || v == nil {
		return fmt.Errorf("field rate_type: required")
	}
	if v, ok := raw["remaining_amount"]; !ok || v == nil {
		return fmt.Errorf("field remaining_amount: required")
	}
	if v, ok := raw["remaining_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field remaining_amount_display: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["is_visible"]; !ok || v == nil {
		plain.IsVisible = 0
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElem(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceCfdTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemVisibilityStatusElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsVisible(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemIsActive(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceForexTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceForexTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemCounterpartyType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["completed_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field completed_orders_count: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	type Plain P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline, v)
	}
	*j = P2PAdvertiserAdvertsResponseP2PAdvertiserAdvertsListElemAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsResponseMsgType, v)
	}
	*j = P2PAdvertiserAdvertsResponseMsgType(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceForexTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_adverts"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_adverts: required")
	}
	type Plain P2PAdvertiserAdvertsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0
	}
	*j = P2PAdvertiserAdvertsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts, v)
	}
	*j = P2PAdvertiserAdvertsRequestP2PAdvertiserAdverts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertUpdateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertUpdateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2PAdvertUpdateResponseP2PAdvertUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["is_visible"]; !ok || v == nil {
		plain.IsVisible = 0
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateVisibilityStatusElem(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateType, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateRateType, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateIsVisible(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateIsActive, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateIsActive(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceOtherInstrumentsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateDeleted) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateDeleted {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateDeleted, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateDeleted(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateCounterpartyType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["completed_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field completed_orders_count: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	type Plain P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline, v)
	}
	*j = P2PAdvertUpdateResponseP2PAdvertUpdateAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateResponseMsgType, v)
	}
	*j = P2PAdvertUpdateResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["p2p_advert_update"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advert_update: required")
	}
	type Plain P2PAdvertUpdateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertUpdateRequest(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedCfdExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRequestRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateRequestRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateRequestRateType, v)
	}
	*j = P2PAdvertUpdateRequestRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRequestP2PAdvertUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateRequestP2PAdvertUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateRequestP2PAdvertUpdate, v)
	}
	*j = P2PAdvertUpdateRequestP2PAdvertUpdate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRequestIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateRequestIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateRequestIsActive, v)
	}
	*j = P2PAdvertUpdateRequestIsActive(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRequestDelete) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateRequestDelete {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateRequestDelete, v)
	}
	*j = P2PAdvertUpdateRequestDelete(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertListResponse(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedCfdFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain P2PAdvertListResponseP2PAdvertList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertListResponseP2PAdvertList(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["counterparty_type"]; !ok || v == nil {
		return fmt.Errorf("field counterparty_type: required")
	}
	if v, ok := raw["country"]; !ok || v == nil {
		return fmt.Errorf("field country: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["effective_rate"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate: required")
	}
	if v, ok := raw["effective_rate_display"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate_display: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_active"]; !ok || v == nil {
		return fmt.Errorf("field is_active: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["max_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit: required")
	}
	if v, ok := raw["max_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit_display: required")
	}
	if v, ok := raw["min_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit: required")
	}
	if v, ok := raw["min_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit_display: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["rate_type"]; !ok || v == nil {
		return fmt.Errorf("field rate_type: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2PAdvertListResponseP2PAdvertListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["is_visible"]; !ok || v == nil {
		plain.IsVisible = 0
	}
	*j = P2PAdvertListResponseP2PAdvertListListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemVisibilityStatusElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemType, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemRateType, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemIsVisible) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemIsVisible {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemIsVisible, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemIsVisible(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition = []interface{}{
	"Purchase shares of a company or physical commodities.",
	"Place a bet on the price movement.",
	"Speculate on the price movement.",
	"Make a long-term investment.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedCfdTradingDefinition(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemIsActive, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemIsActive(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemCounterpartyType, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemCounterpartyType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["completed_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field completed_orders_count: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	type Plain P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended, v.Value)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading = []interface{}{
	"Leverage is a risk mitigation technique.",
	"Leverage prevents you from opening large positions.",
	"Leverage guarantees profits.",
	"Leverage lets you open larger positions for a fraction of the trade's value.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageImpactTrading(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsFavourite(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked, v)
	}
	*j = P2PAdvertListResponseP2PAdvertListListElemAdvertiserDetailsIsBlocked(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListResponseMsgType, v)
	}
	*j = P2PAdvertListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advert_list"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advert_list: required")
	}
	type Plain P2PAdvertListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0
	}
	if v, ok := raw["sort_by"]; !ok || v == nil {
		plain.SortBy = "rate"
	}
	if v, ok := raw["use_client_limits"]; !ok || v == nil {
		plain.UseClientLimits = 0
	}
	*j = P2PAdvertListRequest(plain)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = []interface{}{
	"Cancel your trade at any time within a chosen timeframe.",
	"Close your trade automatically when the loss is more than or equal to a specific amount.",
	"Close your trade automatically when the profit is more than or equal to a specific amount.",
	"Make a guaranteed profit on your trade.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedLeverageTradingHighRiskStopLoss(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequestUseClientLimits) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListRequestUseClientLimits {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListRequestUseClientLimits, v)
	}
	*j = P2PAdvertListRequestUseClientLimits(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequestSortBy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListRequestSortBy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListRequestSortBy, v)
	}
	*j = P2PAdvertListRequestSortBy(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequestP2PAdvertList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListRequestP2PAdvertList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListRequestP2PAdvertList, v)
	}
	*j = P2PAdvertListRequestP2PAdvertList(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequestFavouritesOnly) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListRequestFavouritesOnly {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListRequestFavouritesOnly, v)
	}
	*j = P2PAdvertListRequestFavouritesOnly(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertListRequestCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertListRequestCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertListRequestCounterpartyType, v)
	}
	*j = P2PAdvertListRequestCounterpartyType(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin = []interface{}{
	"When opening a Leveraged CFD trade.",
	"When trading Multipliers.",
	"When buying shares of a company.",
	"All of the above.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedRequiredInitialMargin(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertInfoResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertInfoResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2PAdvertInfoResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertInfoResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain P2PAdvertInfoResponseP2PAdvertInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["is_visible"]; !ok || v == nil {
		plain.IsVisible = 0
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfo(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoVisibilityStatusElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoType, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoType(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance = []interface{}{
	"Yes",
	"No",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedRiskTolerance(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoRateType, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoIsVisible) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsVisible {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsVisible, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoIsVisible(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoIsActive, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoIsActive(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience = []interface{}{
	"I have an academic degree, professional certification, and/or work experience.",
	"I trade forex CFDs and other complex financial instruments.",
	"I have attended seminars, training, and/or workshops.",
	"I have little experience.",
	"I have no knowledge.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedSourceOfExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoDeleted) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoDeleted {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoDeleted, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoDeleted(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoCounterpartyType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["completed_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field completed_orders_count: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	type Plain P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended, v.Value)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsOnline(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedTradingExperienceFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsFavourite(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked, v)
	}
	*j = P2PAdvertInfoResponseP2PAdvertInfoAdvertiserDetailsIsBlocked(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoResponseMsgType, v)
	}
	*j = P2PAdvertInfoResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advert_info"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advert_info: required")
	}
	type Plain P2PAdvertInfoRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["use_client_limits"]; !ok || v == nil {
		plain.UseClientLimits = 0
	}
	*j = P2PAdvertInfoRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoRequestUseClientLimits) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoRequestUseClientLimits {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoRequestUseClientLimits, v)
	}
	*j = P2PAdvertInfoRequestUseClientLimits(v)
	return nil
}

var enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments, v)
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulatedTradingFrequencyFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoRequestSubscribe, v)
	}
	*j = P2PAdvertInfoRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertInfoRequestP2PAdvertInfo) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertInfoRequestP2PAdvertInfo {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertInfoRequestP2PAdvertInfo, v)
	}
	*j = P2PAdvertInfoRequestP2PAdvertInfo(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2PAdvertCreateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertCreateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["active_orders"]; !ok || v == nil {
		return fmt.Errorf("field active_orders: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["counterparty_type"]; !ok || v == nil {
		return fmt.Errorf("field counterparty_type: required")
	}
	if v, ok := raw["country"]; !ok || v == nil {
		return fmt.Errorf("field country: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["effective_rate"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate: required")
	}
	if v, ok := raw["effective_rate_display"]; !ok || v == nil {
		return fmt.Errorf("field effective_rate_display: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_active"]; !ok || v == nil {
		return fmt.Errorf("field is_active: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["max_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount: required")
	}
	if v, ok := raw["max_order_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_display: required")
	}
	if v, ok := raw["max_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit: required")
	}
	if v, ok := raw["max_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount_limit_display: required")
	}
	if v, ok := raw["min_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount: required")
	}
	if v, ok := raw["min_order_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_display: required")
	}
	if v, ok := raw["min_order_amount_limit"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit: required")
	}
	if v, ok := raw["min_order_amount_limit_display"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount_limit_display: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["rate_type"]; !ok || v == nil {
		return fmt.Errorf("field rate_type: required")
	}
	if v, ok := raw["remaining_amount"]; !ok || v == nil {
		return fmt.Errorf("field remaining_amount: required")
	}
	if v, ok := raw["remaining_amount_display"]; !ok || v == nil {
		return fmt.Errorf("field remaining_amount_display: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2PAdvertCreateResponseP2PAdvertCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["is_visible"]; !ok || v == nil {
		plain.IsVisible = 0
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateVisibilityStatusElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateType, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequestTradingExperienceRegulated) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["cfd_experience"]; !ok || v == nil {
		return fmt.Errorf("field cfd_experience: required")
	}
	if v, ok := raw["cfd_frequency"]; !ok || v == nil {
		return fmt.Errorf("field cfd_frequency: required")
	}
	if v, ok := raw["cfd_trading_definition"]; !ok || v == nil {
		return fmt.Errorf("field cfd_trading_definition: required")
	}
	if v, ok := raw["leverage_impact_trading"]; !ok || v == nil {
		return fmt.Errorf("field leverage_impact_trading: required")
	}
	if v, ok := raw["leverage_trading_high_risk_stop_loss"]; !ok || v == nil {
		return fmt.Errorf("field leverage_trading_high_risk_stop_loss: required")
	}
	if v, ok := raw["required_initial_margin"]; !ok || v == nil {
		return fmt.Errorf("field required_initial_margin: required")
	}
	if v, ok := raw["risk_tolerance"]; !ok || v == nil {
		return fmt.Errorf("field risk_tolerance: required")
	}
	if v, ok := raw["source_of_experience"]; !ok || v == nil {
		return fmt.Errorf("field source_of_experience: required")
	}
	if v, ok := raw["trading_experience_financial_instruments"]; !ok || v == nil {
		return fmt.Errorf("field trading_experience_financial_instruments: required")
	}
	if v, ok := raw["trading_frequency_financial_instruments"]; !ok || v == nil {
		return fmt.Errorf("field trading_frequency_financial_instruments: required")
	}
	type Plain SetFinancialAssessmentRequestTradingExperienceRegulated
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentRequestTradingExperienceRegulated(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateRateType, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["set_financial_assessment"]; !ok || v == nil {
		return fmt.Errorf("field set_financial_assessment: required")
	}
	type Plain SetFinancialAssessmentRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateIsVisible) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsVisible {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsVisible, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateIsVisible(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateIsActive, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateIsActive(v)
	return nil
}

var enumValues_SetFinancialAssessmentResponseMsgType = []interface{}{
	"set_financial_assessment",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentResponseMsgType, v)
	}
	*j = SetFinancialAssessmentResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateCounterpartyType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["completed_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field completed_orders_count: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate: required")
	}
	type Plain P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline, v)
	}
	*j = P2PAdvertCreateResponseP2PAdvertCreateAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SetFinancialAssessmentResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateResponseMsgType, v)
	}
	*j = P2PAdvertCreateResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["max_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount: required")
	}
	if v, ok := raw["min_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount: required")
	}
	if v, ok := raw["p2p_advert_create"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advert_create: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2PAdvertCreateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["rate_type"]; !ok || v == nil {
		plain.RateType = "fixed"
	}
	*j = P2PAdvertCreateRequest(plain)
	return nil
}

var enumValues_SetSelfExclusionRequestSetSelfExclusion = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionRequestSetSelfExclusion) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSelfExclusionRequestSetSelfExclusion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSelfExclusionRequestSetSelfExclusion, v)
	}
	*j = SetSelfExclusionRequestSetSelfExclusion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateRequestType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateRequestType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateRequestType, v)
	}
	*j = P2PAdvertCreateRequestType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["set_self_exclusion"]; !ok || v == nil {
		return fmt.Errorf("field set_self_exclusion: required")
	}
	type Plain SetSelfExclusionRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSelfExclusionRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateRequestRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateRequestRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateRequestRateType, v)
	}
	*j = P2PAdvertCreateRequestRateType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertCreateRequestP2PAdvertCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertCreateRequestP2PAdvertCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertCreateRequestP2PAdvertCreate, v)
	}
	*j = P2PAdvertCreateRequestP2PAdvertCreate(v)
	return nil
}

var enumValues_SetSelfExclusionResponseMsgType = []interface{}{
	"set_self_exclusion",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSelfExclusionResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSelfExclusionResponseMsgType, v)
	}
	*j = SetSelfExclusionResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain OauthAppsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthAppsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsResponseOauthAppsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage: required")
	}
	if v, ok := raw["last_used"]; !ok || v == nil {
		return fmt.Errorf("field last_used: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["scopes"]; !ok || v == nil {
		return fmt.Errorf("field scopes: required")
	}
	type Plain OauthAppsResponseOauthAppsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthAppsResponseOauthAppsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SetSelfExclusionResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSelfExclusionResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_OauthAppsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_OauthAppsResponseMsgType, v)
	}
	*j = OauthAppsResponseMsgType(v)
	return nil
}

var enumValues_SetSettingsRequestAccountOpeningReason = []interface{}{
	"Speculative",
	"Income Earning",
	"Hedging",
	"Peer-to-peer exchange",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestAccountOpeningReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestAccountOpeningReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestAccountOpeningReason, v)
	}
	*j = SetSettingsRequestAccountOpeningReason(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["oauth_apps"]; !ok || v == nil {
		return fmt.Errorf("field oauth_apps: required")
	}
	type Plain OauthAppsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthAppsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsRequestOauthApps) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_OauthAppsRequestOauthApps {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_OauthAppsRequestOauthApps, v)
	}
	*j = OauthAppsRequestOauthApps(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain NewAccountVirtualResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountVirtualResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualResponseNewAccountVirtual) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance"]; !ok || v == nil {
		return fmt.Errorf("field balance: required")
	}
	if v, ok := raw["client_id"]; !ok || v == nil {
		return fmt.Errorf("field client_id: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["email"]; !ok || v == nil {
		return fmt.Errorf("field email: required")
	}
	if v, ok := raw["oauth_token"]; !ok || v == nil {
		return fmt.Errorf("field oauth_token: required")
	}
	type Plain NewAccountVirtualResponseNewAccountVirtual
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountVirtualResponseNewAccountVirtual(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualResponseNewAccountVirtualType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualResponseNewAccountVirtualType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualResponseNewAccountVirtualType, v)
	}
	*j = NewAccountVirtualResponseNewAccountVirtualType(v)
	return nil
}

var enumValues_SetSettingsRequestAllowCopiers = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestAllowCopiers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestAllowCopiers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestAllowCopiers, v)
	}
	*j = SetSettingsRequestAllowCopiers(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualResponseMsgType, v)
	}
	*j = NewAccountVirtualResponseMsgType(v)
	return nil
}

var enumValues_SetSettingsRequestDxtradeUserException = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestDxtradeUserException) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestDxtradeUserException {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestDxtradeUserException, v)
	}
	*j = SetSettingsRequestDxtradeUserException(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["new_account_virtual"]; !ok || v == nil {
		return fmt.Errorf("field new_account_virtual: required")
	}
	type Plain NewAccountVirtualRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "trading"
	}
	*j = NewAccountVirtualRequest(plain)
	return nil
}

var enumValues_SetSettingsRequestEmailConsent = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestEmailConsent, v)
	}
	*j = SetSettingsRequestEmailConsent(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRequestType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRequestType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRequestType, v)
	}
	*j = NewAccountVirtualRequestType(v)
	return nil
}

var enumValues_SetSettingsRequestEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestEmploymentStatus, v)
	}
	*j = SetSettingsRequestEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRequestSignupDevice) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRequestSignupDevice {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRequestSignupDevice, v)
	}
	*j = NewAccountVirtualRequestSignupDevice(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRequestNewAccountVirtual) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRequestNewAccountVirtual {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRequestNewAccountVirtual, v)
	}
	*j = NewAccountVirtualRequestNewAccountVirtual(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRequestEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRequestEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRequestEmailConsent, v)
	}
	*j = NewAccountVirtualRequestEmailConsent(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain NewAccountRealResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountRealResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealResponseNewAccountReal) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["client_id"]; !ok || v == nil {
		return fmt.Errorf("field client_id: required")
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		return fmt.Errorf("field landing_company: required")
	}
	if v, ok := raw["oauth_token"]; !ok || v == nil {
		return fmt.Errorf("field oauth_token: required")
	}
	type Plain NewAccountRealResponseNewAccountReal
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountRealResponseNewAccountReal(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealResponseMsgType, v)
	}
	*j = NewAccountRealResponseMsgType(v)
	return nil
}

var enumValues_SetSettingsRequestFeatureFlagWallet = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestFeatureFlagWallet) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestFeatureFlagWallet {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestFeatureFlagWallet, v)
	}
	*j = SetSettingsRequestFeatureFlagWallet(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["new_account_real"]; !ok || v == nil {
		return fmt.Errorf("field new_account_real: required")
	}
	type Plain NewAccountRealRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["client_type"]; !ok || v == nil {
		plain.ClientType = "retail"
	}
	*j = NewAccountRealRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestSecretQuestion, v)
	}
	*j = NewAccountRealRequestSecretQuestion(v)
	return nil
}

var enumValues_SetSettingsRequestNonPepDeclaration = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestNonPepDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestNonPepDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestNonPepDeclaration, v)
	}
	*j = SetSettingsRequestNonPepDeclaration(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestSalutation, v)
	}
	*j = NewAccountRealRequestSalutation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestNewAccountReal) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestNewAccountReal {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestNewAccountReal, v)
	}
	*j = NewAccountRealRequestNewAccountReal(v)
	return nil
}

var enumValues_SetSettingsRequestRequestProfessionalStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestRequestProfessionalStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestRequestProfessionalStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestRequestProfessionalStatus, v)
	}
	*j = SetSettingsRequestRequestProfessionalStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestClientType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestClientType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestClientType, v)
	}
	*j = NewAccountRealRequestClientType(v)
	return nil
}

var enumValues_SetSettingsRequestSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestSalutation, v)
	}
	*j = SetSettingsRequestSalutation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestAccountTurnover, v)
	}
	*j = NewAccountRealRequestAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountRealRequestAccountOpeningReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountRealRequestAccountOpeningReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountRealRequestAccountOpeningReason, v)
	}
	*j = NewAccountRealRequestAccountOpeningReason(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain NewAccountMaltainvestResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountMaltainvestResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestResponseNewAccountMaltainvest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["client_id"]; !ok || v == nil {
		return fmt.Errorf("field client_id: required")
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		return fmt.Errorf("field landing_company: required")
	}
	if v, ok := raw["oauth_token"]; !ok || v == nil {
		return fmt.Errorf("field oauth_token: required")
	}
	type Plain NewAccountMaltainvestResponseNewAccountMaltainvest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountMaltainvestResponseNewAccountMaltainvest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestResponseMsgType, v)
	}
	*j = NewAccountMaltainvestResponseMsgType(v)
	return nil
}

var enumValues_SetSettingsRequestSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestSecretQuestion, v)
	}
	*j = SetSettingsRequestSecretQuestion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["address_city"]; !ok || v == nil {
		return fmt.Errorf("field address_city: required")
	}
	if v, ok := raw["address_line_1"]; !ok || v == nil {
		return fmt.Errorf("field address_line_1: required")
	}
	if v, ok := raw["date_of_birth"]; !ok || v == nil {
		return fmt.Errorf("field date_of_birth: required")
	}
	if v, ok := raw["employment_status"]; !ok || v == nil {
		return fmt.Errorf("field employment_status: required")
	}
	if v, ok := raw["first_name"]; !ok || v == nil {
		return fmt.Errorf("field first_name: required")
	}
	if v, ok := raw["last_name"]; !ok || v == nil {
		return fmt.Errorf("field last_name: required")
	}
	if v, ok := raw["new_account_maltainvest"]; !ok || v == nil {
		return fmt.Errorf("field new_account_maltainvest: required")
	}
	if v, ok := raw["residence"]; !ok || v == nil {
		return fmt.Errorf("field residence: required")
	}
	if v, ok := raw["salutation"]; !ok || v == nil {
		return fmt.Errorf("field salutation: required")
	}
	if v, ok := raw["tax_identification_number"]; !ok || v == nil {
		return fmt.Errorf("field tax_identification_number: required")
	}
	if v, ok := raw["tax_residence"]; !ok || v == nil {
		return fmt.Errorf("field tax_residence: required")
	}
	type Plain NewAccountMaltainvestRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["client_type"]; !ok || v == nil {
		plain.ClientType = "retail"
	}
	*j = NewAccountMaltainvestRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments, v)
	}
	*j = NewAccountMaltainvestRequestTradingFrequencyFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestTradingExperienceFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestTradingExperienceFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestTradingExperienceFinancialInstruments, v)
	}
	*j = NewAccountMaltainvestRequestTradingExperienceFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestSourceOfWealth, v)
	}
	*j = NewAccountMaltainvestRequestSourceOfWealth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestSourceOfExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestSourceOfExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestSourceOfExperience, v)
	}
	*j = NewAccountMaltainvestRequestSourceOfExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestSecretQuestion, v)
	}
	*j = NewAccountMaltainvestRequestSecretQuestion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestSalutation, v)
	}
	*j = NewAccountMaltainvestRequestSalutation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestRiskTolerance) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestRiskTolerance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestRiskTolerance, v)
	}
	*j = NewAccountMaltainvestRequestRiskTolerance(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestRequiredInitialMargin) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestRequiredInitialMargin {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestRequiredInitialMargin, v)
	}
	*j = NewAccountMaltainvestRequestRequiredInitialMargin(v)
	return nil
}

var enumValues_SetSettingsRequestSetSettings = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestSetSettings) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestSetSettings {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestSetSettings, v)
	}
	*j = SetSettingsRequestSetSettings(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestOccupation, v)
	}
	*j = NewAccountMaltainvestRequestOccupation(v)
	return nil
}

var enumValues_SetSettingsRequestTradingHub = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestTradingHub) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestTradingHub {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestTradingHub, v)
	}
	*j = SetSettingsRequestTradingHub(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestNewAccountMaltainvest) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestNewAccountMaltainvest {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestNewAccountMaltainvest, v)
	}
	*j = NewAccountMaltainvestRequestNewAccountMaltainvest(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["set_settings"]; !ok || v == nil {
		return fmt.Errorf("field set_settings: required")
	}
	type Plain SetSettingsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSettingsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestNetIncome, v)
	}
	*j = NewAccountMaltainvestRequestNetIncome(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss, v)
	}
	*j = NewAccountMaltainvestRequestLeverageTradingHighRiskStopLoss(v)
	return nil
}

var enumValues_SetSettingsResponseMsgType = []interface{}{
	"set_settings",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsResponseMsgType, v)
	}
	*j = SetSettingsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestLeverageImpactTrading) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestLeverageImpactTrading {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestLeverageImpactTrading, v)
	}
	*j = NewAccountMaltainvestRequestLeverageImpactTrading(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestIncomeSource, v)
	}
	*j = NewAccountMaltainvestRequestIncomeSource(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SetSettingsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSettingsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestEstimatedWorth, v)
	}
	*j = NewAccountMaltainvestRequestEstimatedWorth(v)
	return nil
}

var enumValues_StatementRequestActionType = []interface{}{
	"buy",
	"sell",
	"deposit",
	"withdrawal",
	"escrow",
	"adjustment",
	"virtual_credit",
	"transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRequestActionType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementRequestActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementRequestActionType, v)
	}
	*j = StatementRequestActionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestEmploymentStatus, v)
	}
	*j = NewAccountMaltainvestRequestEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestEmploymentIndustry, v)
	}
	*j = NewAccountMaltainvestRequestEmploymentIndustry(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestEducationLevel, v)
	}
	*j = NewAccountMaltainvestRequestEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestClientType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestClientType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestClientType, v)
	}
	*j = NewAccountMaltainvestRequestClientType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestCfdTradingDefinition) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestCfdTradingDefinition {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestCfdTradingDefinition, v)
	}
	*j = NewAccountMaltainvestRequestCfdTradingDefinition(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestCfdFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestCfdFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestCfdFrequency, v)
	}
	*j = NewAccountMaltainvestRequestCfdFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestCfdExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestCfdExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestCfdExperience, v)
	}
	*j = NewAccountMaltainvestRequestCfdExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestAccountTurnover, v)
	}
	*j = NewAccountMaltainvestRequestAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestAccountOpeningReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestAccountOpeningReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestAccountOpeningReason, v)
	}
	*j = NewAccountMaltainvestRequestAccountOpeningReason(v)
	return nil
}

var enumValues_StatementRequestDescription = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRequestDescription) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementRequestDescription {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementRequestDescription, v)
	}
	*j = StatementRequestDescription(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequestAcceptRisk) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequestAcceptRisk {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequestAcceptRisk, v)
	}
	*j = NewAccountMaltainvestRequestAcceptRisk(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5WithdrawalResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5WithdrawalResponse(plain)
	return nil
}

var enumValues_StatementRequestStatement = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRequestStatement) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementRequestStatement {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementRequestStatement, v)
	}
	*j = StatementRequestStatement(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5WithdrawalResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5WithdrawalResponseMsgType, v)
	}
	*j = Mt5WithdrawalResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["statement"]; !ok || v == nil {
		return fmt.Errorf("field statement: required")
	}
	type Plain StatementRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 100
	}
	*j = StatementRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["from_mt5"]; !ok || v == nil {
		return fmt.Errorf("field from_mt5: required")
	}
	if v, ok := raw["mt5_withdrawal"]; !ok || v == nil {
		return fmt.Errorf("field mt5_withdrawal: required")
	}
	if v, ok := raw["to_binary"]; !ok || v == nil {
		return fmt.Errorf("field to_binary: required")
	}
	type Plain Mt5WithdrawalRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5WithdrawalRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalRequestMt5Withdrawal) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5WithdrawalRequestMt5Withdrawal {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5WithdrawalRequestMt5Withdrawal, v)
	}
	*j = Mt5WithdrawalRequestMt5Withdrawal(v)
	return nil
}

var enumValues_StatementResponseMsgType = []interface{}{
	"statement",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementResponseMsgType, v)
	}
	*j = StatementResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordResetResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5PasswordResetResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5PasswordResetResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordResetResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordResetResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordResetResponseMsgType, v)
	}
	*j = Mt5PasswordResetResponseMsgType(v)
	return nil
}

var enumValues_StatementResponseStatementTransactionsElemActionType = []interface{}{
	"buy",
	"sell",
	"deposit",
	"withdrawal",
	"hold",
	"release",
	"adjustment",
	"virtual_credit",
	"transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementResponseStatementTransactionsElemActionType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementResponseStatementTransactionsElemActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementResponseStatementTransactionsElemActionType, v)
	}
	*j = StatementResponseStatementTransactionsElemActionType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordResetRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login: required")
	}
	if v, ok := raw["mt5_password_reset"]; !ok || v == nil {
		return fmt.Errorf("field mt5_password_reset: required")
	}
	if v, ok := raw["new_password"]; !ok || v == nil {
		return fmt.Errorf("field new_password: required")
	}
	if v, ok := raw["verification_code"]; !ok || v == nil {
		return fmt.Errorf("field verification_code: required")
	}
	type Plain Mt5PasswordResetRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["password_type"]; !ok || v == nil {
		plain.PasswordType = "main"
	}
	*j = Mt5PasswordResetRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordResetRequestPasswordType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordResetRequestPasswordType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordResetRequestPasswordType, v)
	}
	*j = Mt5PasswordResetRequestPasswordType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordResetRequestMt5PasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordResetRequestMt5PasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordResetRequestMt5PasswordReset, v)
	}
	*j = Mt5PasswordResetRequestMt5PasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5PasswordCheckResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5PasswordCheckResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordCheckResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordCheckResponseMsgType, v)
	}
	*j = Mt5PasswordCheckResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login: required")
	}
	if v, ok := raw["mt5_password_check"]; !ok || v == nil {
		return fmt.Errorf("field mt5_password_check: required")
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password: required")
	}
	type Plain Mt5PasswordCheckRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["password_type"]; !ok || v == nil {
		plain.PasswordType = "main"
	}
	*j = Mt5PasswordCheckRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckRequestPasswordType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordCheckRequestPasswordType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordCheckRequestPasswordType, v)
	}
	*j = Mt5PasswordCheckRequestPasswordType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckRequestMt5PasswordCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordCheckRequestMt5PasswordCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordCheckRequestMt5PasswordCheck, v)
	}
	*j = Mt5PasswordCheckRequestMt5PasswordCheck(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5PasswordChangeResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5PasswordChangeResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordChangeResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordChangeResponseMsgType, v)
	}
	*j = Mt5PasswordChangeResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login: required")
	}
	if v, ok := raw["mt5_password_change"]; !ok || v == nil {
		return fmt.Errorf("field mt5_password_change: required")
	}
	if v, ok := raw["new_password"]; !ok || v == nil {
		return fmt.Errorf("field new_password: required")
	}
	if v, ok := raw["old_password"]; !ok || v == nil {
		return fmt.Errorf("field old_password: required")
	}
	type Plain Mt5PasswordChangeRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["password_type"]; !ok || v == nil {
		plain.PasswordType = "main"
	}
	*j = Mt5PasswordChangeRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeRequestPasswordType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordChangeRequestPasswordType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordChangeRequestPasswordType, v)
	}
	*j = Mt5PasswordChangeRequestPasswordType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeRequestMt5PasswordChange) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordChangeRequestMt5PasswordChange {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordChangeRequestMt5PasswordChange, v)
	}
	*j = Mt5PasswordChangeRequestMt5PasswordChange(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5NewAccountResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5NewAccountResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountResponseMt5NewAccountMt5AccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountType, v)
	}
	*j = Mt5NewAccountResponseMt5NewAccountMt5AccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain StatementResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatementResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountResponseMt5NewAccountMt5AccountCategory) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountCategory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountResponseMt5NewAccountMt5AccountCategory, v)
	}
	*j = Mt5NewAccountResponseMt5NewAccountMt5AccountCategory(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountResponseMt5NewAccountAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountResponseMt5NewAccountAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountResponseMt5NewAccountAccountType, v)
	}
	*j = Mt5NewAccountResponseMt5NewAccountAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatesListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["states_list"]; !ok || v == nil {
		return fmt.Errorf("field states_list: required")
	}
	type Plain StatesListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatesListRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountResponseMsgType, v)
	}
	*j = Mt5NewAccountResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_type"]; !ok || v == nil {
		return fmt.Errorf("field account_type: required")
	}
	if v, ok := raw["email"]; !ok || v == nil {
		return fmt.Errorf("field email: required")
	}
	if v, ok := raw["leverage"]; !ok || v == nil {
		return fmt.Errorf("field leverage: required")
	}
	if v, ok := raw["mainPassword"]; !ok || v == nil {
		return fmt.Errorf("field mainPassword: required")
	}
	if v, ok := raw["mt5_new_account"]; !ok || v == nil {
		return fmt.Errorf("field mt5_new_account: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain Mt5NewAccountRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["dry_run"]; !ok || v == nil {
		plain.DryRun = 0
	}
	*j = Mt5NewAccountRequest(plain)
	return nil
}

var enumValues_StatesListResponseMsgType = []interface{}{
	"states_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatesListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatesListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatesListResponseMsgType, v)
	}
	*j = StatesListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestServer) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestServer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestServer, v)
	}
	*j = Mt5NewAccountRequestServer(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestMt5NewAccount) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestMt5NewAccount {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestMt5NewAccount, v)
	}
	*j = Mt5NewAccountRequestMt5NewAccount(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestMt5AccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestMt5AccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestMt5AccountType, v)
	}
	*j = Mt5NewAccountRequestMt5AccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatesListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain StatesListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatesListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestMt5AccountCategory) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestMt5AccountCategory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestMt5AccountCategory, v)
	}
	*j = Mt5NewAccountRequestMt5AccountCategory(v)
	return nil
}

var enumValues_TicksHistoryRequestAdjustStartTime = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRequestAdjustStartTime) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryRequestAdjustStartTime {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryRequestAdjustStartTime, v)
	}
	*j = TicksHistoryRequestAdjustStartTime(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestDryRun, v)
	}
	*j = Mt5NewAccountRequestDryRun(v)
	return nil
}

var enumValues_TicksHistoryRequestGranularity = []interface{}{
	60,
	120,
	180,
	300,
	600,
	900,
	1800,
	3600,
	7200,
	14400,
	28800,
	86400,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRequestGranularity) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryRequestGranularity {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryRequestGranularity, v)
	}
	*j = TicksHistoryRequestGranularity(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5NewAccountRequestAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5NewAccountRequestAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5NewAccountRequestAccountType, v)
	}
	*j = Mt5NewAccountRequestAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5LoginListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5LoginListResponse(plain)
	return nil
}

var enumValues_TicksHistoryRequestStyle = []interface{}{
	"candles",
	"ticks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRequestStyle) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryRequestStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryRequestStyle, v)
	}
	*j = TicksHistoryRequestStyle(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemSubAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemSubAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemSubAccountType, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemSubAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemServerInfoEnvironment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemMarketType, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemMarketType(v)
	return nil
}

var enumValues_TicksHistoryRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryRequestSubscribe, v)
	}
	*j = TicksHistoryRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemLandingCompanyShort, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["end"]; !ok || v == nil {
		return fmt.Errorf("field end: required")
	}
	if v, ok := raw["ticks_history"]; !ok || v == nil {
		return fmt.Errorf("field ticks_history: required")
	}
	type Plain TicksHistoryRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["count"]; !ok || v == nil {
		plain.Count = 5000
	}
	if v, ok := raw["style"]; !ok || v == nil {
		plain.Style = "ticks"
	}
	*j = TicksHistoryRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemErrorDetailsServerInfoEnvironment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMt5LoginListElemAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMt5LoginListElemAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMt5LoginListElemAccountType, v)
	}
	*j = Mt5LoginListResponseMt5LoginListElemAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListResponseMsgType, v)
	}
	*j = Mt5LoginListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["mt5_login_list"]; !ok || v == nil {
		return fmt.Errorf("field mt5_login_list: required")
	}
	type Plain Mt5LoginListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5LoginListRequest(plain)
	return nil
}

var enumValues_TicksHistoryResponseMsgType = []interface{}{
	"history",
	"tick",
	"candles",
	"ohlc",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryResponseMsgType, v)
	}
	*j = TicksHistoryResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5LoginListRequestMt5LoginList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5LoginListRequestMt5LoginList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5LoginListRequestMt5LoginList, v)
	}
	*j = Mt5LoginListRequestMt5LoginList(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5GetSettingsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5GetSettingsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponseMt5GetSettingsSubAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsResponseMt5GetSettingsSubAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsResponseMt5GetSettingsSubAccountType, v)
	}
	*j = Mt5GetSettingsResponseMt5GetSettingsSubAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponseMt5GetSettingsMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsResponseMt5GetSettingsMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsResponseMt5GetSettingsMarketType, v)
	}
	*j = Mt5GetSettingsResponseMt5GetSettingsMarketType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort, v)
	}
	*j = Mt5GetSettingsResponseMt5GetSettingsLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain TicksHistoryResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksHistoryResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponseMt5GetSettingsAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsResponseMt5GetSettingsAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsResponseMt5GetSettingsAccountType, v)
	}
	*j = Mt5GetSettingsResponseMt5GetSettingsAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TicksHistoryResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksHistoryResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsResponseMsgType, v)
	}
	*j = Mt5GetSettingsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login: required")
	}
	if v, ok := raw["mt5_get_settings"]; !ok || v == nil {
		return fmt.Errorf("field mt5_get_settings: required")
	}
	type Plain Mt5GetSettingsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5GetSettingsRequest(plain)
	return nil
}

var enumValues_TicksRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksRequestSubscribe, v)
	}
	*j = TicksRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRequestMt5GetSettings) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRequestMt5GetSettings {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRequestMt5GetSettings, v)
	}
	*j = Mt5GetSettingsRequestMt5GetSettings(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ticks"]; !ok || v == nil {
		return fmt.Errorf("field ticks: required")
	}
	type Plain TicksRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5DepositResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5DepositResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5DepositResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5DepositResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5DepositResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5DepositResponseMsgType, v)
	}
	*j = Mt5DepositResponseMsgType(v)
	return nil
}

var enumValues_TicksResponseMsgType = []interface{}{
	"tick",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksResponseMsgType, v)
	}
	*j = TicksResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5DepositRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["mt5_deposit"]; !ok || v == nil {
		return fmt.Errorf("field mt5_deposit: required")
	}
	if v, ok := raw["to_mt5"]; !ok || v == nil {
		return fmt.Errorf("field to_mt5: required")
	}
	type Plain Mt5DepositRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5DepositRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5DepositRequestMt5Deposit) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5DepositRequestMt5Deposit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5DepositRequestMt5Deposit, v)
	}
	*j = Mt5DepositRequestMt5Deposit(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain TicksResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain LogoutResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LogoutResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksResponseTick) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["pip_size"]; !ok || v == nil {
		return fmt.Errorf("field pip_size: required")
	}
	type Plain TicksResponseTick
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksResponseTick(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogoutResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogoutResponseMsgType, v)
	}
	*j = LogoutResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TicksResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutResponseLogout) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogoutResponseLogout {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogoutResponseLogout, v)
	}
	*j = LogoutResponseLogout(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["logout"]; !ok || v == nil {
		return fmt.Errorf("field logout: required")
	}
	type Plain LogoutRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LogoutRequest(plain)
	return nil
}

var enumValues_TimeRequestTime = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimeRequestTime) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TimeRequestTime {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TimeRequestTime, v)
	}
	*j = TimeRequestTime(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutRequestLogout) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogoutRequestLogout {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogoutRequestLogout, v)
	}
	*j = LogoutRequestLogout(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimeRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["time"]; !ok || v == nil {
		return fmt.Errorf("field time: required")
	}
	type Plain TimeRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TimeRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain LoginHistoryResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LoginHistoryResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LoginHistoryResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LoginHistoryResponseMsgType, v)
	}
	*j = LoginHistoryResponseMsgType(v)
	return nil
}

var enumValues_TimeResponseMsgType = []interface{}{
	"time",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimeResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TimeResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TimeResponseMsgType, v)
	}
	*j = TimeResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryResponseLoginHistoryElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["action"]; !ok || v == nil {
		return fmt.Errorf("field action: required")
	}
	if v, ok := raw["environment"]; !ok || v == nil {
		return fmt.Errorf("field environment: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["time"]; !ok || v == nil {
		return fmt.Errorf("field time: required")
	}
	type Plain LoginHistoryResponseLoginHistoryElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LoginHistoryResponseLoginHistoryElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryResponseLoginHistoryElemStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LoginHistoryResponseLoginHistoryElemStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LoginHistoryResponseLoginHistoryElemStatus, v)
	}
	*j = LoginHistoryResponseLoginHistoryElemStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TimeResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TimeResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TimeResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login_history"]; !ok || v == nil {
		return fmt.Errorf("field login_history: required")
	}
	type Plain LoginHistoryRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 10
	}
	*j = LoginHistoryRequest(plain)
	return nil
}

var enumValues_TncApprovalRequestAffiliateCocAgreement = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRequestAffiliateCocAgreement) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalRequestAffiliateCocAgreement {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalRequestAffiliateCocAgreement, v)
	}
	*j = TncApprovalRequestAffiliateCocAgreement(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryRequestLoginHistory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LoginHistoryRequestLoginHistory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LoginHistoryRequestLoginHistory, v)
	}
	*j = LoginHistoryRequestLoginHistory(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain LandingCompanyResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyResponse(plain)
	return nil
}

var enumValues_TncApprovalRequestTncApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRequestTncApproval) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalRequestTncApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalRequestTncApproval, v)
	}
	*j = TncApprovalRequestTncApproval(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseMsgType, v)
	}
	*j = LandingCompanyResponseMsgType(v)
	return nil
}

var enumValues_TncApprovalRequestUkgcFundsProtection = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRequestUkgcFundsProtection) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalRequestUkgcFundsProtection {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalRequestUkgcFundsProtection, v)
	}
	*j = TncApprovalRequestUkgcFundsProtection(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyUkgcFundsProtection) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyUkgcFundsProtection {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyUkgcFundsProtection, v)
	}
	*j = LandingCompanyResponseLandingCompanyUkgcFundsProtection(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["tnc_approval"]; !ok || v == nil {
		return fmt.Errorf("field tnc_approval: required")
	}
	type Plain TncApprovalRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TncApprovalRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanySkipDepositVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanySkipDepositVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanySkipDepositVerification, v)
	}
	*j = LandingCompanyResponseLandingCompanySkipDepositVerification(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified, v)
	}
	*j = LandingCompanyResponseLandingCompanyRequireVerificationWhenNotAgeVerified(v)
	return nil
}

var enumValues_TncApprovalResponseMsgType = []interface{}{
	"tnc_approval",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalResponseMsgType, v)
	}
	*j = TncApprovalResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyRequirePoi) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyRequirePoi {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyRequirePoi, v)
	}
	*j = LandingCompanyResponseLandingCompanyRequirePoi(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic, v)
	}
	*j = LandingCompanyResponseLandingCompanyRequireAgeVerifiedForSynthetic(v)
	return nil
}

var enumValues_TncApprovalResponseTncApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalResponseTncApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalResponseTncApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalResponseTncApproval, v)
	}
	*j = TncApprovalResponseTncApproval(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyRequireAddressPostcode) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyRequireAddressPostcode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyRequireAddressPostcode, v)
	}
	*j = LandingCompanyResponseLandingCompanyRequireAddressPostcode(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TncApprovalResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TncApprovalResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyNoProvince) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyNoProvince {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyNoProvince, v)
	}
	*j = LandingCompanyResponseLandingCompanyNoProvince(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit, v)
	}
	*j = LandingCompanyResponseLandingCompanyNeedSetMaxTurnoverLimit(v)
	return nil
}

var enumValues_TopupVirtualRequestTopupVirtual = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TopupVirtualRequestTopupVirtual) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TopupVirtualRequestTopupVirtual {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TopupVirtualRequestTopupVirtual, v)
	}
	*j = TopupVirtualRequestTopupVirtual(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyMt5AgeVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyMt5AgeVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyMt5AgeVerification, v)
	}
	*j = LandingCompanyResponseLandingCompanyMt5AgeVerification(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TopupVirtualRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["topup_virtual"]; !ok || v == nil {
		return fmt.Errorf("field topup_virtual: required")
	}
	type Plain TopupVirtualRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TopupVirtualRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyIsIdvSupported) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyIsIdvSupported {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyIsIdvSupported, v)
	}
	*j = LandingCompanyResponseLandingCompanyIsIdvSupported(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient(v)
	return nil
}

var enumValues_TopupVirtualResponseMsgType = []interface{}{
	"topup_virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TopupVirtualResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TopupVirtualResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TopupVirtualResponseMsgType, v)
	}
	*j = TopupVirtualResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TopupVirtualResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TopupVirtualResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TopupVirtualResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient(v)
	return nil
}

var enumValues_TradingDurationsRequestLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsRequestLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsRequestLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsRequestLandingCompany, v)
	}
	*j = TradingDurationsRequestLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyResponseLandingCompanyDxtradeAllCompanyStandardHasRealityCheck(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyDerivezAllStandard) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyDerivezAllStandard {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyDerivezAllStandard, v)
	}
	*j = LandingCompanyResponseLandingCompanyDerivezAllStandard(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyCtraderAllStandard) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyCtraderAllStandard {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyCtraderAllStandard, v)
	}
	*j = LandingCompanyResponseLandingCompanyCtraderAllStandard(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyAllCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyAllCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyAllCompany, v)
	}
	*j = LandingCompanyResponseLandingCompanyAllCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResponseLandingCompanyAddressParseable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyResponseLandingCompanyAddressParseable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyResponseLandingCompanyAddressParseable, v)
	}
	*j = LandingCompanyResponseLandingCompanyAddressParseable(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		return fmt.Errorf("field landing_company: required")
	}
	type Plain LandingCompanyRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain LandingCompanyDetailsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyDetailsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyDetailsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyDetailsResponseMsgType, v)
	}
	*j = LandingCompanyDetailsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient, v)
	}
	*j = LandingCompanyDetailsResponseLandingCompanyDetailsSupportProfessionalClient(v)
	return nil
}

var enumValues_TradingDurationsRequestLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsRequestLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsRequestLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsRequestLandingCompanyShort, v)
	}
	*j = TradingDurationsRequestLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck, v)
	}
	*j = LandingCompanyDetailsResponseLandingCompanyDetailsHasRealityCheck(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["landing_company_details"]; !ok || v == nil {
		return fmt.Errorf("field landing_company_details: required")
	}
	type Plain LandingCompanyDetailsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyDetailsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsRequestLandingCompanyDetails) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyDetailsRequestLandingCompanyDetails {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyDetailsRequestLandingCompanyDetails, v)
	}
	*j = LandingCompanyDetailsRequestLandingCompanyDetails(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain IdentityVerificationDocumentAddResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = IdentityVerificationDocumentAddResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdentityVerificationDocumentAddResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdentityVerificationDocumentAddResponseMsgType, v)
	}
	*j = IdentityVerificationDocumentAddResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd, v)
	}
	*j = IdentityVerificationDocumentAddResponseIdentityVerificationDocumentAdd(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["document_number"]; !ok || v == nil {
		return fmt.Errorf("field document_number: required")
	}
	if v, ok := raw["document_type"]; !ok || v == nil {
		return fmt.Errorf("field document_type: required")
	}
	if v, ok := raw["identity_verification_document_add"]; !ok || v == nil {
		return fmt.Errorf("field identity_verification_document_add: required")
	}
	if v, ok := raw["issuing_country"]; !ok || v == nil {
		return fmt.Errorf("field issuing_country: required")
	}
	type Plain IdentityVerificationDocumentAddRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = IdentityVerificationDocumentAddRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd, v)
	}
	*j = IdentityVerificationDocumentAddRequestIdentityVerificationDocumentAdd(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain GetSettingsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSettingsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseMsgType, v)
	}
	*j = GetSettingsResponseMsgType(v)
	return nil
}

var enumValues_TradingDurationsRequestTradingDurations = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsRequestTradingDurations) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsRequestTradingDurations {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsRequestTradingDurations, v)
	}
	*j = TradingDurationsRequestTradingDurations(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsRequestProfessionalStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsRequestProfessionalStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsRequestProfessionalStatus, v)
	}
	*j = GetSettingsResponseGetSettingsRequestProfessionalStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["trading_durations"]; !ok || v == nil {
		return fmt.Errorf("field trading_durations: required")
	}
	type Plain TradingDurationsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingDurationsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsNonPepDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsNonPepDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsNonPepDeclaration, v)
	}
	*j = GetSettingsResponseGetSettingsNonPepDeclaration(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent, v)
	}
	*j = GetSettingsResponseGetSettingsIsAuthenticatedPaymentAgent(v)
	return nil
}

var enumValues_TradingDurationsResponseMsgType = []interface{}{
	"trading_durations",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsResponseMsgType, v)
	}
	*j = TradingDurationsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsHasSecretAnswer) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsHasSecretAnswer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsHasSecretAnswer, v)
	}
	*j = GetSettingsResponseGetSettingsHasSecretAnswer(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsFeatureFlagWallet) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsFeatureFlagWallet {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsFeatureFlagWallet, v)
	}
	*j = GetSettingsResponseGetSettingsFeatureFlagWallet(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsEmploymentStatus, v)
	}
	*j = GetSettingsResponseGetSettingsEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsEmailConsent, v)
	}
	*j = GetSettingsResponseGetSettingsEmailConsent(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsDxtradeUserException) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsDxtradeUserException {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsDxtradeUserException, v)
	}
	*j = GetSettingsResponseGetSettingsDxtradeUserException(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResponseGetSettingsAllowCopiers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsResponseGetSettingsAllowCopiers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsResponseGetSettingsAllowCopiers, v)
	}
	*j = GetSettingsResponseGetSettingsAllowCopiers(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["get_settings"]; !ok || v == nil {
		return fmt.Errorf("field get_settings: required")
	}
	type Plain GetSettingsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSettingsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRequestGetSettings) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRequestGetSettings {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRequestGetSettings, v)
	}
	*j = GetSettingsRequestGetSettings(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSelfExclusionResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain GetSelfExclusionResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSelfExclusionResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSelfExclusionResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSelfExclusionResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSelfExclusionResponseMsgType, v)
	}
	*j = GetSelfExclusionResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSelfExclusionRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["get_self_exclusion"]; !ok || v == nil {
		return fmt.Errorf("field get_self_exclusion: required")
	}
	type Plain GetSelfExclusionRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSelfExclusionRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSelfExclusionRequestGetSelfExclusion) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSelfExclusionRequestGetSelfExclusion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSelfExclusionRequestGetSelfExclusion, v)
	}
	*j = GetSelfExclusionRequestGetSelfExclusion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingDurationsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingDurationsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetLimitsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain GetLimitsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetLimitsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetLimitsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetLimitsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetLimitsResponseMsgType, v)
	}
	*j = GetLimitsResponseMsgType(v)
	return nil
}

var enumValues_TradingPlatformInvestorPasswordResetRequestPlatform = []interface{}{
	"mt5",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetRequestPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetRequestPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetRequestPlatform, v)
	}
	*j = TradingPlatformInvestorPasswordResetRequestPlatform(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetLimitsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["get_limits"]; !ok || v == nil {
		return fmt.Errorf("field get_limits: required")
	}
	type Plain GetLimitsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetLimitsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetLimitsRequestGetLimits) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetLimitsRequestGetLimits {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetLimitsRequestGetLimits, v)
	}
	*j = GetLimitsRequestGetLimits(v)
	return nil
}

var enumValues_TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset, v)
	}
	*j = TradingPlatformInvestorPasswordResetRequestTradingPlatformInvestorPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetFinancialAssessmentResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain GetFinancialAssessmentResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetFinancialAssessmentResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_id"]; !ok || v == nil {
		return fmt.Errorf("field account_id: required")
	}
	if v, ok := raw["new_password"]; !ok || v == nil {
		return fmt.Errorf("field new_password: required")
	}
	if v, ok := raw["platform"]; !ok || v == nil {
		return fmt.Errorf("field platform: required")
	}
	if v, ok := raw["trading_platform_investor_password_reset"]; !ok || v == nil {
		return fmt.Errorf("field trading_platform_investor_password_reset: required")
	}
	if v, ok := raw["verification_code"]; !ok || v == nil {
		return fmt.Errorf("field verification_code: required")
	}
	type Plain TradingPlatformInvestorPasswordResetRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformInvestorPasswordResetRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetFinancialAssessmentResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetFinancialAssessmentResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetFinancialAssessmentResponseMsgType, v)
	}
	*j = GetFinancialAssessmentResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetFinancialAssessmentRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["get_financial_assessment"]; !ok || v == nil {
		return fmt.Errorf("field get_financial_assessment: required")
	}
	type Plain GetFinancialAssessmentRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetFinancialAssessmentRequest(plain)
	return nil
}

var enumValues_TradingPlatformInvestorPasswordResetResponseMsgType = []interface{}{
	"trading_platform_investor_password_reset",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetResponseMsgType, v)
	}
	*j = TradingPlatformInvestorPasswordResetResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetFinancialAssessmentRequestGetFinancialAssessment) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetFinancialAssessmentRequestGetFinancialAssessment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetFinancialAssessmentRequestGetFinancialAssessment, v)
	}
	*j = GetFinancialAssessmentRequestGetFinancialAssessment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain GetAccountStatusResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetAccountStatusResponse(plain)
	return nil
}

var enumValues_TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset, v)
	}
	*j = TradingPlatformInvestorPasswordResetResponseTradingPlatformPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseMsgType, v)
	}
	*j = GetAccountStatusResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingPlatformInvestorPasswordResetResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformInvestorPasswordResetResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["currency_config"]; !ok || v == nil {
		return fmt.Errorf("field currency_config: required")
	}
	if v, ok := raw["p2p_status"]; !ok || v == nil {
		return fmt.Errorf("field p2p_status: required")
	}
	if v, ok := raw["prompt_client_to_authenticate"]; !ok || v == nil {
		return fmt.Errorf("field prompt_client_to_authenticate: required")
	}
	if v, ok := raw["risk_classification"]; !ok || v == nil {
		return fmt.Errorf("field risk_classification: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	type Plain GetAccountStatusResponseGetAccountStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetAccountStatusResponseGetAccountStatus(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusSocialIdentityProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusSocialIdentityProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusSocialIdentityProvider, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusSocialIdentityProvider(v)
	return nil
}

var enumValues_TradingPlatformPasswordResetRequestPlatform = []interface{}{
	"dxtrade",
	"mt5",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetRequestPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetRequestPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetRequestPlatform, v)
	}
	*j = TradingPlatformPasswordResetRequestPlatform(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusPromptClientToAuthenticate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusP2PStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusP2PStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusP2PStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusP2PStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthentication) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["needs_verification"]; !ok || v == nil {
		return fmt.Errorf("field needs_verification: required")
	}
	type Plain GetAccountStatusResponseGetAccountStatusAuthentication
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthentication(plain)
	return nil
}

var enumValues_TradingPlatformPasswordResetRequestTradingPlatformPasswordReset = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetRequestTradingPlatformPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetRequestTradingPlatformPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetRequestTradingPlatformPasswordReset, v)
	}
	*j = TradingPlatformPasswordResetRequestTradingPlatformPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationOwnershipStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["new_password"]; !ok || v == nil {
		return fmt.Errorf("field new_password: required")
	}
	if v, ok := raw["platform"]; !ok || v == nil {
		return fmt.Errorf("field platform: required")
	}
	if v, ok := raw["trading_platform_password_reset"]; !ok || v == nil {
		return fmt.Errorf("field trading_platform_password_reset: required")
	}
	if v, ok := raw["verification_code"]; !ok || v == nil {
		return fmt.Errorf("field verification_code: required")
	}
	type Plain TradingPlatformPasswordResetRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformPasswordResetRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIncomeStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIdentityStatus(v)
	return nil
}

var enumValues_TradingPlatformPasswordResetResponseMsgType = []interface{}{
	"trading_platform_password_reset",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetResponseMsgType, v)
	}
	*j = TradingPlatformPasswordResetResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesOnfidoIsCountrySupported(v)
	return nil
}

var enumValues_TradingPlatformPasswordResetResponseTradingPlatformPasswordReset = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetResponseTradingPlatformPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetResponseTradingPlatformPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetResponseTradingPlatformPasswordReset, v)
	}
	*j = TradingPlatformPasswordResetResponseTradingPlatformPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesManualStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingPlatformPasswordResetResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformPasswordResetResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationIdentityServicesIdvStatus(v)
	return nil
}

var enumValues_TradingServersRequestAccountType = []interface{}{
	"demo",
	"real",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequestAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersRequestAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersRequestAccountType, v)
	}
	*j = TradingServersRequestAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationDocumentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus, v)
	}
	*j = GetAccountStatusResponseGetAccountStatusAuthenticationAttemptsHistoryElemStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["get_account_status"]; !ok || v == nil {
		return fmt.Errorf("field get_account_status: required")
	}
	type Plain GetAccountStatusRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetAccountStatusRequest(plain)
	return nil
}

var enumValues_TradingServersRequestEnvironment = []interface{}{
	"all",
	"Deriv-Demo",
	"Deriv-Server",
	"Deriv-Server-02",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequestEnvironment) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersRequestEnvironment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersRequestEnvironment, v)
	}
	*j = TradingServersRequestEnvironment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusRequestGetAccountStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusRequestGetAccountStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusRequestGetAccountStatus, v)
	}
	*j = GetAccountStatusRequestGetAccountStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ForgetResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetResponseMsgType, v)
	}
	*j = ForgetResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetResponseForget) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetResponseForget {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetResponseForget, v)
	}
	*j = ForgetResponseForget(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["forget"]; !ok || v == nil {
		return fmt.Errorf("field forget: required")
	}
	type Plain ForgetRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetRequest(plain)
	return nil
}

var enumValues_TradingServersRequestMarketType = []interface{}{
	"financial",
	"synthetic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequestMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersRequestMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersRequestMarketType, v)
	}
	*j = TradingServersRequestMarketType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAllResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ForgetAllResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetAllResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAllResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetAllResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetAllResponseMsgType, v)
	}
	*j = ForgetAllResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAllRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["forget_all"]; !ok || v == nil {
		return fmt.Errorf("field forget_all: required")
	}
	type Plain ForgetAllRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetAllRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StreamTypes) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StreamTypes {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StreamTypes, v)
	}
	*j = StreamTypes(v)
	return nil
}

var enumValues_TradingServersRequestPlatform = []interface{}{
	"mt5",
	"dxtrade",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequestPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersRequestPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersRequestPlatform, v)
	}
	*j = TradingServersRequestPlatform(v)
	return nil
}

var enumValues_StreamTypes = []interface{}{
	"balance",
	"candles",
	"cashier_payments",
	"p2p_advert",
	"p2p_advertiser",
	"p2p_order",
	"proposal",
	"proposal_open_contract",
	"ticks",
	"transaction",
	"trading_platform_asset_listing",
	"website_status",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ExchangeRatesResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeRatesResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain ExchangeRatesResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeRatesResponseSubscription(plain)
	return nil
}

var enumValues_TradingServersRequestTradingServers = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequestTradingServers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersRequestTradingServers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersRequestTradingServers, v)
	}
	*j = TradingServersRequestTradingServers(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeRatesResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeRatesResponseMsgType, v)
	}
	*j = ExchangeRatesResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["trading_servers"]; !ok || v == nil {
		return fmt.Errorf("field trading_servers: required")
	}
	type Plain TradingServersRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["environment"]; !ok || v == nil {
		plain.Environment = "all"
	}
	if v, ok := raw["market_type"]; !ok || v == nil {
		plain.MarketType = "synthetic"
	}
	if v, ok := raw["platform"]; !ok || v == nil {
		plain.Platform = "mt5"
	}
	*j = TradingServersRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["base_currency"]; !ok || v == nil {
		return fmt.Errorf("field base_currency: required")
	}
	if v, ok := raw["exchange_rates"]; !ok || v == nil {
		return fmt.Errorf("field exchange_rates: required")
	}
	type Plain ExchangeRatesRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeRatesRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeRatesRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeRatesRequestSubscribe, v)
	}
	*j = ExchangeRatesRequestSubscribe(v)
	return nil
}

var enumValues_TradingServersResponseMsgType = []interface{}{
	"trading_servers",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseMsgType, v)
	}
	*j = TradingServersResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesRequestExchangeRates) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeRatesRequestExchangeRates {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeRatesRequestExchangeRates, v)
	}
	*j = ExchangeRatesRequestExchangeRates(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain EconomicCalendarResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EconomicCalendarResponse(plain)
	return nil
}

var enumValues_TradingServersResponseTradingServersElemAccountType = []interface{}{
	"demo",
	"real",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseTradingServersElemAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseTradingServersElemAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseTradingServersElemAccountType, v)
	}
	*j = TradingServersResponseTradingServersElemAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EconomicCalendarResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EconomicCalendarResponseMsgType, v)
	}
	*j = EconomicCalendarResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["economic_calendar"]; !ok || v == nil {
		return fmt.Errorf("field economic_calendar: required")
	}
	type Plain EconomicCalendarRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EconomicCalendarRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarRequestEconomicCalendar) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EconomicCalendarRequestEconomicCalendar {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EconomicCalendarRequestEconomicCalendar, v)
	}
	*j = EconomicCalendarRequestEconomicCalendar(v)
	return nil
}

var enumValues_TradingServersResponseTradingServersElemDisabled = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseTradingServersElemDisabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseTradingServersElemDisabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseTradingServersElemDisabled, v)
	}
	*j = TradingServersResponseTradingServersElemDisabled(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain DocumentUploadResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadResponse(plain)
	return nil
}

var enumValues_TradingServersResponseTradingServersElemEnvironment = []interface{}{
	"Deriv-Demo",
	"Deriv-Server",
	"Deriv-Server-02",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseTradingServersElemEnvironment) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseTradingServersElemEnvironment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseTradingServersElemEnvironment, v)
	}
	*j = TradingServersResponseTradingServersElemEnvironment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadResponseMsgType, v)
	}
	*j = DocumentUploadResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadResponseDocumentUpload) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["call_type"]; !ok || v == nil {
		return fmt.Errorf("field call_type: required")
	}
	if v, ok := raw["upload_id"]; !ok || v == nil {
		return fmt.Errorf("field upload_id: required")
	}
	type Plain DocumentUploadResponseDocumentUpload
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadResponseDocumentUpload(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["document_format"]; !ok || v == nil {
		return fmt.Errorf("field document_format: required")
	}
	if v, ok := raw["document_type"]; !ok || v == nil {
		return fmt.Errorf("field document_type: required")
	}
	if v, ok := raw["document_upload"]; !ok || v == nil {
		return fmt.Errorf("field document_upload: required")
	}
	if v, ok := raw["expected_checksum"]; !ok || v == nil {
		return fmt.Errorf("field expected_checksum: required")
	}
	if v, ok := raw["file_size"]; !ok || v == nil {
		return fmt.Errorf("field file_size: required")
	}
	type Plain DocumentUploadRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestProofOfOwnership) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["details"]; !ok || v == nil {
		return fmt.Errorf("field details: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain DocumentUploadRequestProofOfOwnership
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadRequestProofOfOwnership(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestPageType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRequestPageType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRequestPageType, v)
	}
	*j = DocumentUploadRequestPageType(v)
	return nil
}

var enumValues_TradingServersResponseTradingServersElemId = []interface{}{
	"p01_ts01",
	"p01_ts02",
	"p01_ts03",
	"p01_ts04",
	"p02_ts02",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseTradingServersElemId) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseTradingServersElemId {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseTradingServersElemId, v)
	}
	*j = TradingServersResponseTradingServersElemId(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestLifetimeValid) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRequestLifetimeValid {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRequestLifetimeValid, v)
	}
	*j = DocumentUploadRequestLifetimeValid(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestDocumentUpload) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRequestDocumentUpload {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRequestDocumentUpload, v)
	}
	*j = DocumentUploadRequestDocumentUpload(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestDocumentType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRequestDocumentType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRequestDocumentType, v)
	}
	*j = DocumentUploadRequestDocumentType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRequestDocumentFormat) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRequestDocumentFormat {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRequestDocumentFormat, v)
	}
	*j = DocumentUploadRequestDocumentFormat(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CryptoConfigResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoConfigResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoConfigResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoConfigResponseMsgType, v)
	}
	*j = CryptoConfigResponseMsgType(v)
	return nil
}

var enumValues_TradingServersResponseTradingServersElemRecommended = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponseTradingServersElemRecommended) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersResponseTradingServersElemRecommended {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersResponseTradingServersElemRecommended, v)
	}
	*j = TradingServersResponseTradingServersElemRecommended(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigResponseCryptoConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["currencies_config"]; !ok || v == nil {
		return fmt.Errorf("field currencies_config: required")
	}
	type Plain CryptoConfigResponseCryptoConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoConfigResponseCryptoConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["crypto_config"]; !ok || v == nil {
		return fmt.Errorf("field crypto_config: required")
	}
	type Plain CryptoConfigRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoConfigRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingServersResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingServersResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigRequestCryptoConfig) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoConfigRequestCryptoConfig {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoConfigRequestCryptoConfig, v)
	}
	*j = CryptoConfigRequestCryptoConfig(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CopytradingStatisticsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatisticsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["trading_times"]; !ok || v == nil {
		return fmt.Errorf("field trading_times: required")
	}
	type Plain TradingTimesRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingStatisticsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingStatisticsResponseMsgType, v)
	}
	*j = CopytradingStatisticsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsResponseCopytradingStatistics) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["active_since"]; !ok || v == nil {
		return fmt.Errorf("field active_since: required")
	}
	if v, ok := raw["avg_duration"]; !ok || v == nil {
		return fmt.Errorf("field avg_duration: required")
	}
	if v, ok := raw["avg_loss"]; !ok || v == nil {
		return fmt.Errorf("field avg_loss: required")
	}
	if v, ok := raw["avg_profit"]; !ok || v == nil {
		return fmt.Errorf("field avg_profit: required")
	}
	if v, ok := raw["copiers"]; !ok || v == nil {
		return fmt.Errorf("field copiers: required")
	}
	if v, ok := raw["last_12months_profitable_trades"]; !ok || v == nil {
		return fmt.Errorf("field last_12months_profitable_trades: required")
	}
	if v, ok := raw["monthly_profitable_trades"]; !ok || v == nil {
		return fmt.Errorf("field monthly_profitable_trades: required")
	}
	if v, ok := raw["performance_probability"]; !ok || v == nil {
		return fmt.Errorf("field performance_probability: required")
	}
	if v, ok := raw["total_trades"]; !ok || v == nil {
		return fmt.Errorf("field total_trades: required")
	}
	if v, ok := raw["trades_breakdown"]; !ok || v == nil {
		return fmt.Errorf("field trades_breakdown: required")
	}
	if v, ok := raw["trades_profitable"]; !ok || v == nil {
		return fmt.Errorf("field trades_profitable: required")
	}
	type Plain CopytradingStatisticsResponseCopytradingStatistics
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatisticsResponseCopytradingStatistics(plain)
	return nil
}

var enumValues_TradingTimesResponseMsgType = []interface{}{
	"trading_times",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingTimesResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingTimesResponseMsgType, v)
	}
	*j = TradingTimesResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copytrading_statistics"]; !ok || v == nil {
		return fmt.Errorf("field copytrading_statistics: required")
	}
	if v, ok := raw["trader_id"]; !ok || v == nil {
		return fmt.Errorf("field trader_id: required")
	}
	type Plain CopytradingStatisticsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatisticsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsRequestCopytradingStatistics) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingStatisticsRequestCopytradingStatistics {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingStatisticsRequestCopytradingStatistics, v)
	}
	*j = CopytradingStatisticsRequestCopytradingStatistics(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CopytradingListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListResponse(plain)
	return nil
}

var enumValues_TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = []interface{}{
	"Sun",
	"Mon",
	"Tue",
	"Wed",
	"Thu",
	"Fri",
	"Sat",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem, v)
	}
	*j = TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingListResponseMsgType, v)
	}
	*j = CopytradingListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListResponseCopytradingList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copiers"]; !ok || v == nil {
		return fmt.Errorf("field copiers: required")
	}
	if v, ok := raw["traders"]; !ok || v == nil {
		return fmt.Errorf("field traders: required")
	}
	type Plain CopytradingListResponseCopytradingList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListResponseCopytradingList(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListResponseCopytradingListCopiersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	type Plain CopytradingListResponseCopytradingListCopiersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListResponseCopytradingListCopiersElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copytrading_list"]; !ok || v == nil {
		return fmt.Errorf("field copytrading_list: required")
	}
	type Plain CopytradingListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListRequestCopytradingList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingListRequestCopytradingList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingListRequestCopytradingList, v)
	}
	*j = CopytradingListRequestCopytradingList(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStopResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CopyStopResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStopResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStopResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopyStopResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopyStopResponseMsgType, v)
	}
	*j = CopyStopResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStopRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copy_stop"]; !ok || v == nil {
		return fmt.Errorf("field copy_stop: required")
	}
	type Plain CopyStopRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStopRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResponseTradingTimesMarketsElemSubmarketsElemSymbolsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStartResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CopyStartResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStartResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseTradingTimesMarketsElemSubmarketsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain TradingTimesResponseTradingTimesMarketsElemSubmarketsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResponseTradingTimesMarketsElemSubmarketsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStartResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopyStartResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopyStartResponseMsgType, v)
	}
	*j = CopyStartResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseTradingTimesMarketsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain TradingTimesResponseTradingTimesMarketsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResponseTradingTimesMarketsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStartRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copy_start"]; !ok || v == nil {
		return fmt.Errorf("field copy_start: required")
	}
	type Plain CopyStartRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStartRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponseTradingTimes) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["markets"]; !ok || v == nil {
		return fmt.Errorf("field markets: required")
	}
	type Plain TradingTimesResponseTradingTimes
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResponseTradingTimes(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ContractsForResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractsForResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingTimesResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForResponseMsgType, v)
	}
	*j = ContractsForResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForResponseContractsFor) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["available"]; !ok || v == nil {
		return fmt.Errorf("field available: required")
	}
	type Plain ContractsForResponseContractsFor
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractsForResponseContractsFor(plain)
	return nil
}

var enumValues_TransactionRequestSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionRequestSubscribe, v)
	}
	*j = TransactionRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForResponseContractsForAvailableElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["barrier_category"]; !ok || v == nil {
		return fmt.Errorf("field barrier_category: required")
	}
	if v, ok := raw["barriers"]; !ok || v == nil {
		return fmt.Errorf("field barriers: required")
	}
	if v, ok := raw["contract_category"]; !ok || v == nil {
		return fmt.Errorf("field contract_category: required")
	}
	if v, ok := raw["contract_category_display"]; !ok || v == nil {
		return fmt.Errorf("field contract_category_display: required")
	}
	if v, ok := raw["contract_type"]; !ok || v == nil {
		return fmt.Errorf("field contract_type: required")
	}
	if v, ok := raw["exchange_name"]; !ok || v == nil {
		return fmt.Errorf("field exchange_name: required")
	}
	if v, ok := raw["expiry_type"]; !ok || v == nil {
		return fmt.Errorf("field expiry_type: required")
	}
	if v, ok := raw["market"]; !ok || v == nil {
		return fmt.Errorf("field market: required")
	}
	if v, ok := raw["max_contract_duration"]; !ok || v == nil {
		return fmt.Errorf("field max_contract_duration: required")
	}
	if v, ok := raw["min_contract_duration"]; !ok || v == nil {
		return fmt.Errorf("field min_contract_duration: required")
	}
	if v, ok := raw["sentiment"]; !ok || v == nil {
		return fmt.Errorf("field sentiment: required")
	}
	if v, ok := raw["start_type"]; !ok || v == nil {
		return fmt.Errorf("field start_type: required")
	}
	if v, ok := raw["submarket"]; !ok || v == nil {
		return fmt.Errorf("field submarket: required")
	}
	if v, ok := raw["underlying_symbol"]; !ok || v == nil {
		return fmt.Errorf("field underlying_symbol: required")
	}
	type Plain ContractsForResponseContractsForAvailableElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractsForResponseContractsForAvailableElem(plain)
	return nil
}

var enumValues_TransactionRequestTransaction = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRequestTransaction) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionRequestTransaction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionRequestTransaction, v)
	}
	*j = TransactionRequestTransaction(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contracts_for"]; !ok || v == nil {
		return fmt.Errorf("field contracts_for: required")
	}
	type Plain ContractsForRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		plain.Currency = "USD"
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		plain.LandingCompany = "virtual"
	}
	if v, ok := raw["landing_company_short"]; !ok || v == nil {
		plain.LandingCompanyShort = "virtual"
	}
	*j = ContractsForRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["subscribe"]; !ok || v == nil {
		return fmt.Errorf("field subscribe: required")
	}
	if v, ok := raw["transaction"]; !ok || v == nil {
		return fmt.Errorf("field transaction: required")
	}
	type Plain TransactionRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForRequestProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForRequestProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForRequestProductType, v)
	}
	*j = ContractsForRequestProductType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForRequestLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForRequestLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForRequestLandingCompanyShort, v)
	}
	*j = ContractsForRequestLandingCompanyShort(v)
	return nil
}

var enumValues_TransactionResponseMsgType = []interface{}{
	"transaction",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionResponseMsgType, v)
	}
	*j = TransactionResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForRequestLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForRequestLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForRequestLandingCompany, v)
	}
	*j = ContractsForRequestLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ContractUpdateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractUpdateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain TransactionResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateResponseMsgType, v)
	}
	*j = ContractUpdateResponseMsgType(v)
	return nil
}

var enumValues_TransactionResponseTransactionAction = []interface{}{
	"buy",
	"sell",
	"deposit",
	"withdrawal",
	"escrow",
	"adjustment",
	"virtual_credit",
	"transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionResponseTransactionAction) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionResponseTransactionAction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionResponseTransactionAction, v)
	}
	*j = TransactionResponseTransactionAction(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id: required")
	}
	if v, ok := raw["contract_update"]; !ok || v == nil {
		return fmt.Errorf("field contract_update: required")
	}
	if v, ok := raw["limit_order"]; !ok || v == nil {
		return fmt.Errorf("field limit_order: required")
	}
	type Plain ContractUpdateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractUpdateRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateRequestContractUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateRequestContractUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateRequestContractUpdate, v)
	}
	*j = ContractUpdateRequestContractUpdate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistoryResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ContractUpdateHistoryResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractUpdateHistoryResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistoryResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateHistoryResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateHistoryResponseMsgType, v)
	}
	*j = ContractUpdateHistoryResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistoryRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id: required")
	}
	if v, ok := raw["contract_update_history"]; !ok || v == nil {
		return fmt.Errorf("field contract_update_history: required")
	}
	type Plain ContractUpdateHistoryRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 500
	}
	*j = ContractUpdateHistoryRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistoryRequestContractUpdateHistory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateHistoryRequestContractUpdateHistory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateHistoryRequestContractUpdateHistory, v)
	}
	*j = ContractUpdateHistoryRequestContractUpdateHistory(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CashierResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CashierResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierResponseMsgType, v)
	}
	*j = CashierResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain CashierRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["cashier"]; !ok || v == nil {
		plain.Cashier = "deposit"
	}
	if v, ok := raw["dry_run"]; !ok || v == nil {
		plain.DryRun = 0
	}
	if v, ok := raw["provider"]; !ok || v == nil {
		plain.Provider = "doughflow"
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "url"
	}
	*j = CashierRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRequestType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierRequestType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierRequestType, v)
	}
	*j = CashierRequestType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TransactionResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRequestProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierRequestProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierRequestProvider, v)
	}
	*j = CashierRequestProvider(v)
	return nil
}

var enumValues_TransferBetweenAccountsRequestAccounts = []interface{}{
	"all",
	"brief",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsRequestAccounts) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsRequestAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsRequestAccounts, v)
	}
	*j = TransferBetweenAccountsRequestAccounts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRequestDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierRequestDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierRequestDryRun, v)
	}
	*j = CashierRequestDryRun(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRequestCashier) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierRequestCashier {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierRequestCashier, v)
	}
	*j = CashierRequestCashier(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CancelResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CancelResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CancelResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CancelResponseMsgType, v)
	}
	*j = CancelResponseMsgType(v)
	return nil
}

var enumValues_TransferBetweenAccountsRequestTransferBetweenAccounts = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsRequestTransferBetweenAccounts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsRequestTransferBetweenAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsRequestTransferBetweenAccounts, v)
	}
	*j = TransferBetweenAccountsRequestTransferBetweenAccounts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CancelRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["cancel"]; !ok || v == nil {
		return fmt.Errorf("field cancel: required")
	}
	type Plain CancelRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CancelRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["transfer_between_accounts"]; !ok || v == nil {
		return fmt.Errorf("field transfer_between_accounts: required")
	}
	type Plain TransferBetweenAccountsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["accounts"]; !ok || v == nil {
		plain.Accounts = "brief"
	}
	*j = TransferBetweenAccountsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain BuyResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyResponse(plain)
	return nil
}

var enumValues_TransferBetweenAccountsResponseAccountsElemAccountType = []interface{}{
	"trading",
	"mt5",
	"wallet",
	"dxtrade",
	"derivez",
	"binary",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponseAccountsElemAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsResponseAccountsElemAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsResponseAccountsElemAccountType, v)
	}
	*j = TransferBetweenAccountsResponseAccountsElemAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain BuyResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyResponseMsgType, v)
	}
	*j = BuyResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyResponseBuy) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance_after"]; !ok || v == nil {
		return fmt.Errorf("field balance_after: required")
	}
	if v, ok := raw["buy_price"]; !ok || v == nil {
		return fmt.Errorf("field buy_price: required")
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id: required")
	}
	if v, ok := raw["longcode"]; !ok || v == nil {
		return fmt.Errorf("field longcode: required")
	}
	if v, ok := raw["payout"]; !ok || v == nil {
		return fmt.Errorf("field payout: required")
	}
	if v, ok := raw["purchase_time"]; !ok || v == nil {
		return fmt.Errorf("field purchase_time: required")
	}
	if v, ok := raw["shortcode"]; !ok || v == nil {
		return fmt.Errorf("field shortcode: required")
	}
	if v, ok := raw["start_time"]; !ok || v == nil {
		return fmt.Errorf("field start_time: required")
	}
	if v, ok := raw["transaction_id"]; !ok || v == nil {
		return fmt.Errorf("field transaction_id: required")
	}
	type Plain BuyResponseBuy
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyResponseBuy(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["buy"]; !ok || v == nil {
		return fmt.Errorf("field buy: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	type Plain BuyRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestSubscribe, v)
	}
	*j = BuyRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParameters) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_type"]; !ok || v == nil {
		return fmt.Errorf("field contract_type: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain BuyRequestParameters
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["product_type"]; !ok || v == nil {
		plain.ProductType = "basic"
	}
	*j = BuyRequestParameters(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParametersProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestParametersProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestParametersProductType, v)
	}
	*j = BuyRequestParametersProductType(v)
	return nil
}

var enumValues_TransferBetweenAccountsResponseAccountsElemDemoAccount = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponseAccountsElemDemoAccount) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsResponseAccountsElemDemoAccount {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsResponseAccountsElemDemoAccount, v)
	}
	*j = TransferBetweenAccountsResponseAccountsElemDemoAccount(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParametersDurationUnit) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestParametersDurationUnit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestParametersDurationUnit, v)
	}
	*j = BuyRequestParametersDurationUnit(v)
	return nil
}

var enumValues_TransferBetweenAccountsResponseAccountsElemMarketType = []interface{}{
	"financial",
	"synthetic",
	"all",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponseAccountsElemMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsResponseAccountsElemMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsResponseAccountsElemMarketType, v)
	}
	*j = TransferBetweenAccountsResponseAccountsElemMarketType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParametersContractType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestParametersContractType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestParametersContractType, v)
	}
	*j = BuyRequestParametersContractType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParametersBasis) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestParametersBasis {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestParametersBasis, v)
	}
	*j = BuyRequestParametersBasis(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRequestParametersBarrierRange) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRequestParametersBarrierRange {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRequestParametersBarrierRange, v)
	}
	*j = BuyRequestParametersBarrierRange(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain BuyContractForMultipleAccountsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccountsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsResponseMsgType, v)
	}
	*j = BuyContractForMultipleAccountsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsResponseBuyContractForMultipleAccounts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["result"]; !ok || v == nil {
		return fmt.Errorf("field result: required")
	}
	type Plain BuyContractForMultipleAccountsResponseBuyContractForMultipleAccounts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccountsResponseBuyContractForMultipleAccounts(plain)
	return nil
}

var enumValues_TransferBetweenAccountsResponseMsgType = []interface{}{
	"transfer_between_accounts",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsResponseMsgType, v)
	}
	*j = TransferBetweenAccountsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["buy_contract_for_multiple_accounts"]; !ok || v == nil {
		return fmt.Errorf("field buy_contract_for_multiple_accounts: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["tokens"]; !ok || v == nil {
		return fmt.Errorf("field tokens: required")
	}
	type Plain BuyContractForMultipleAccountsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccountsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsRequestParameters) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_type"]; !ok || v == nil {
		return fmt.Errorf("field contract_type: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain BuyContractForMultipleAccountsRequestParameters
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccountsRequestParameters(plain)
	return nil
}

var enumValues_TransferBetweenAccountsResponseTransferBetweenAccounts = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponseTransferBetweenAccounts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsResponseTransferBetweenAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsResponseTransferBetweenAccounts, v)
	}
	*j = TransferBetweenAccountsResponseTransferBetweenAccounts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsRequestParametersDurationUnit) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsRequestParametersDurationUnit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsRequestParametersDurationUnit, v)
	}
	*j = BuyContractForMultipleAccountsRequestParametersDurationUnit(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TransferBetweenAccountsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransferBetweenAccountsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsRequestParametersContractType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsRequestParametersContractType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsRequestParametersContractType, v)
	}
	*j = BuyContractForMultipleAccountsRequestParametersContractType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsRequestParametersBasis) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsRequestParametersBasis {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsRequestParametersBasis, v)
	}
	*j = BuyContractForMultipleAccountsRequestParametersBasis(v)
	return nil
}

var enumValues_UnsubscribeEmailRequestUnsubscribeEmail = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsubscribeEmailRequestUnsubscribeEmail) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UnsubscribeEmailRequestUnsubscribeEmail {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UnsubscribeEmailRequestUnsubscribeEmail, v)
	}
	*j = UnsubscribeEmailRequestUnsubscribeEmail(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain BalanceResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsubscribeEmailRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["binary_user_id"]; !ok || v == nil {
		return fmt.Errorf("field binary_user_id: required")
	}
	if v, ok := raw["checksum"]; !ok || v == nil {
		return fmt.Errorf("field checksum: required")
	}
	if v, ok := raw["unsubscribe_email"]; !ok || v == nil {
		return fmt.Errorf("field unsubscribe_email: required")
	}
	type Plain UnsubscribeEmailRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = UnsubscribeEmailRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain BalanceResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BalanceResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BalanceResponseMsgType, v)
	}
	*j = BalanceResponseMsgType(v)
	return nil
}

var enumValues_UnsubscribeEmailResponseEmailUnsubscribeStatus = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsubscribeEmailResponseEmailUnsubscribeStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UnsubscribeEmailResponseEmailUnsubscribeStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UnsubscribeEmailResponseEmailUnsubscribeStatus, v)
	}
	*j = UnsubscribeEmailResponseEmailUnsubscribeStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseBalance) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance"]; !ok || v == nil {
		return fmt.Errorf("field balance: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	type Plain BalanceResponseBalance
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseBalance(plain)
	return nil
}

var enumValues_UnsubscribeEmailResponseMsgType = []interface{}{
	"unsubscribe_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsubscribeEmailResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UnsubscribeEmailResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UnsubscribeEmailResponseMsgType, v)
	}
	*j = UnsubscribeEmailResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseBalanceTotalMt5Demo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	type Plain BalanceResponseBalanceTotalMt5Demo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseBalanceTotalMt5Demo(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseBalanceTotalMt5) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	type Plain BalanceResponseBalanceTotalMt5
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseBalanceTotalMt5(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UnsubscribeEmailResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain UnsubscribeEmailResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = UnsubscribeEmailResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseBalanceTotalDerivDemo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	type Plain BalanceResponseBalanceTotalDerivDemo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseBalanceTotalDerivDemo(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceResponseBalanceTotalDeriv) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	type Plain BalanceResponseBalanceTotalDeriv
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BalanceResponseBalanceTotalDeriv(plain)
	return nil
}

var enumValues_VerifyEmailCellxpertRequestType = []interface{}{
	"partner_account_opening",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertRequestType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailCellxpertRequestType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailCellxpertRequestType, v)
	}
	*j = VerifyEmailCellxpertRequestType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance"]; !ok || v == nil {
		return fmt.Errorf("field balance: required")
	}
	type Plain BalanceRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["account"]; !ok || v == nil {
		plain.Account = "current"
	}
	*j = BalanceRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BalanceRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BalanceRequestSubscribe, v)
	}
	*j = BalanceRequestSubscribe(v)
	return nil
}

var enumValues_VerifyEmailCellxpertRequestUrlParametersSignupDevice = []interface{}{
	"desktop",
	"mobile",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertRequestUrlParametersSignupDevice) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailCellxpertRequestUrlParametersSignupDevice {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailCellxpertRequestUrlParametersSignupDevice, v)
	}
	*j = VerifyEmailCellxpertRequestUrlParametersSignupDevice(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceRequestBalance) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BalanceRequestBalance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BalanceRequestBalance, v)
	}
	*j = BalanceRequestBalance(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AuthorizeResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AuthorizeResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseMsgType, v)
	}
	*j = AuthorizeResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeWalletLinkedToElemPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeWalletLinkedToElemPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeWalletLinkedToElemPlatform, v)
	}
	*j = AuthorizeResponseAuthorizeWalletLinkedToElemPlatform(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["verify_email_cellxpert"]; !ok || v == nil {
		return fmt.Errorf("field verify_email_cellxpert: required")
	}
	type Plain VerifyEmailCellxpertRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmailCellxpertRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeIsVirtual) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeIsVirtual {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeIsVirtual, v)
	}
	*j = AuthorizeResponseAuthorizeIsVirtual(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform, v)
	}
	*j = AuthorizeResponseAuthorizeAccountListElemWalletLinkedToElemPlatform(v)
	return nil
}

var enumValues_VerifyEmailCellxpertResponseMsgType = []interface{}{
	"verify_email_cellxpert",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailCellxpertResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailCellxpertResponseMsgType, v)
	}
	*j = VerifyEmailCellxpertResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeAccountListElemIsVirtual) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeAccountListElemIsVirtual {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeAccountListElemIsVirtual, v)
	}
	*j = AuthorizeResponseAuthorizeAccountListElemIsVirtual(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeAccountListElemIsDisabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeAccountListElemIsDisabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeAccountListElemIsDisabled, v)
	}
	*j = AuthorizeResponseAuthorizeAccountListElemIsDisabled(v)
	return nil
}

var enumValues_VerifyEmailCellxpertResponseVerifyEmailCellxpert = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertResponseVerifyEmailCellxpert) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailCellxpertResponseVerifyEmailCellxpert {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailCellxpertResponseVerifyEmailCellxpert, v)
	}
	*j = VerifyEmailCellxpertResponseVerifyEmailCellxpert(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeResponseAuthorizeAccountListElemAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeResponseAuthorizeAccountListElemAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeResponseAuthorizeAccountListElemAccountType, v)
	}
	*j = AuthorizeResponseAuthorizeAccountListElemAccountType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailCellxpertResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain VerifyEmailCellxpertResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmailCellxpertResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["authorize"]; !ok || v == nil {
		return fmt.Errorf("field authorize: required")
	}
	type Plain AuthorizeRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["add_to_login_history"]; !ok || v == nil {
		plain.AddToLoginHistory = 0
	}
	*j = AuthorizeRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeRequestAddToLoginHistory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeRequestAddToLoginHistory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeRequestAddToLoginHistory, v)
	}
	*j = AuthorizeRequestAddToLoginHistory(v)
	return nil
}

var enumValues_VerifyEmailRequestType = []interface{}{
	"partner_account_opening",
	"account_opening",
	"reset_password",
	"paymentagent_withdraw",
	"payment_withdraw",
	"trading_platform_password_reset",
	"trading_platform_dxtrade_password_reset",
	"trading_platform_mt5_password_reset",
	"trading_platform_investor_password_reset",
	"request_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailRequestType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailRequestType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailRequestType, v)
	}
	*j = VerifyEmailRequestType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AssetIndexResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AssetIndexResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexResponseMsgType, v)
	}
	*j = AssetIndexResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["asset_index"]; !ok || v == nil {
		return fmt.Errorf("field asset_index: required")
	}
	type Plain AssetIndexRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AssetIndexRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexRequestLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexRequestLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexRequestLandingCompanyShort, v)
	}
	*j = AssetIndexRequestLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexRequestLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexRequestLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexRequestLandingCompany, v)
	}
	*j = AssetIndexRequestLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexRequestAssetIndex) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexRequestAssetIndex {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexRequestAssetIndex, v)
	}
	*j = AssetIndexRequestAssetIndex(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppUpdateResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppUpdateResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppUpdateResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppUpdateResponseMsgType, v)
	}
	*j = AppUpdateResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_update"]; !ok || v == nil {
		return fmt.Errorf("field app_update: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["scopes"]; !ok || v == nil {
		return fmt.Errorf("field scopes: required")
	}
	type Plain AppUpdateRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppUpdateRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateRequestScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppUpdateRequestScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppUpdateRequestScopesElem, v)
	}
	*j = AppUpdateRequestScopesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppRegisterResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppRegisterResponse(plain)
	return nil
}

var enumValues_VerifyEmailRequestUrlParametersSignupDevice = []interface{}{
	"desktop",
	"mobile",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailRequestUrlParametersSignupDevice) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailRequestUrlParametersSignupDevice {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailRequestUrlParametersSignupDevice, v)
	}
	*j = VerifyEmailRequestUrlParametersSignupDevice(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppRegisterResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppRegisterResponseMsgType, v)
	}
	*j = AppRegisterResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterResponseAppRegister) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage: required")
	}
	if v, ok := raw["appstore"]; !ok || v == nil {
		return fmt.Errorf("field appstore: required")
	}
	if v, ok := raw["github"]; !ok || v == nil {
		return fmt.Errorf("field github: required")
	}
	if v, ok := raw["googleplay"]; !ok || v == nil {
		return fmt.Errorf("field googleplay: required")
	}
	if v, ok := raw["homepage"]; !ok || v == nil {
		return fmt.Errorf("field homepage: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["redirect_uri"]; !ok || v == nil {
		return fmt.Errorf("field redirect_uri: required")
	}
	if v, ok := raw["verification_uri"]; !ok || v == nil {
		return fmt.Errorf("field verification_uri: required")
	}
	type Plain AppRegisterResponseAppRegister
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppRegisterResponseAppRegister(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_register"]; !ok || v == nil {
		return fmt.Errorf("field app_register: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["scopes"]; !ok || v == nil {
		return fmt.Errorf("field scopes: required")
	}
	type Plain AppRegisterRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppRegisterRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterRequestScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppRegisterRequestScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppRegisterRequestScopesElem, v)
	}
	*j = AppRegisterRequestScopesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	if v, ok := raw["verify_email"]; !ok || v == nil {
		return fmt.Errorf("field verify_email: required")
	}
	type Plain VerifyEmailRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmailRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterRequestAppRegister) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppRegisterRequestAppRegister {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppRegisterRequestAppRegister, v)
	}
	*j = AppRegisterRequestAppRegister(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatisticsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppMarkupStatisticsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppMarkupStatisticsResponse(plain)
	return nil
}

var enumValues_VerifyEmailResponseMsgType = []interface{}{
	"verify_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailResponseMsgType, v)
	}
	*j = VerifyEmailResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatisticsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupStatisticsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupStatisticsResponseMsgType, v)
	}
	*j = AppMarkupStatisticsResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatisticsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_markup_statistics"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_statistics: required")
	}
	if v, ok := raw["date_from"]; !ok || v == nil {
		return fmt.Errorf("field date_from: required")
	}
	if v, ok := raw["date_to"]; !ok || v == nil {
		return fmt.Errorf("field date_to: required")
	}
	type Plain AppMarkupStatisticsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppMarkupStatisticsRequest(plain)
	return nil
}

var enumValues_VerifyEmailResponseVerifyEmail = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailResponseVerifyEmail) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailResponseVerifyEmail {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailResponseVerifyEmail, v)
	}
	*j = VerifyEmailResponseVerifyEmail(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatisticsRequestAppMarkupStatistics) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupStatisticsRequestAppMarkupStatistics {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupStatisticsRequestAppMarkupStatistics, v)
	}
	*j = AppMarkupStatisticsRequestAppMarkupStatistics(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain VerifyEmailResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmailResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppMarkupDetailsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppMarkupDetailsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsResponseMsgType, v)
	}
	*j = AppMarkupDetailsResponseMsgType(v)
	return nil
}

var enumValues_WebsiteStatusRequestSubscribe = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusRequestSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusRequestSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusRequestSubscribe, v)
	}
	*j = WebsiteStatusRequestSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_markup_details"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_details: required")
	}
	if v, ok := raw["date_from"]; !ok || v == nil {
		return fmt.Errorf("field date_from: required")
	}
	if v, ok := raw["date_to"]; !ok || v == nil {
		return fmt.Errorf("field date_to: required")
	}
	type Plain AppMarkupDetailsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 1000
	}
	if v, ok := raw["sort"]; !ok || v == nil {
		plain.Sort = "DESC"
	}
	*j = AppMarkupDetailsRequest(plain)
	return nil
}

var enumValues_WebsiteStatusRequestWebsiteStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusRequestWebsiteStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusRequestWebsiteStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusRequestWebsiteStatus, v)
	}
	*j = WebsiteStatusRequestWebsiteStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRequestSortFieldsElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsRequestSortFieldsElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsRequestSortFieldsElem, v)
	}
	*j = AppMarkupDetailsRequestSortFieldsElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["website_status"]; !ok || v == nil {
		return fmt.Errorf("field website_status: required")
	}
	type Plain WebsiteStatusRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRequestSort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsRequestSort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsRequestSort, v)
	}
	*j = AppMarkupDetailsRequestSort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRequestDescription) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsRequestDescription {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsRequestDescription, v)
	}
	*j = AppMarkupDetailsRequestDescription(v)
	return nil
}

var enumValues_WebsiteStatusResponseMsgType = []interface{}{
	"website_status",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseMsgType, v)
	}
	*j = WebsiteStatusResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRequestAppMarkupDetails) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsRequestAppMarkupDetails {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsRequestAppMarkupDetails, v)
	}
	*j = AppMarkupDetailsRequestAppMarkupDetails(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppListResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppListResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain WebsiteStatusResponseSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppListResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppListResponseMsgType, v)
	}
	*j = AppListResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxProposalSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["applies_to"]; !ok || v == nil {
		return fmt.Errorf("field applies_to: required")
	}
	if v, ok := raw["max"]; !ok || v == nil {
		return fmt.Errorf("field max: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxProposalSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxProposalSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListResponseAppListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage: required")
	}
	if v, ok := raw["appstore"]; !ok || v == nil {
		return fmt.Errorf("field appstore: required")
	}
	if v, ok := raw["github"]; !ok || v == nil {
		return fmt.Errorf("field github: required")
	}
	if v, ok := raw["googleplay"]; !ok || v == nil {
		return fmt.Errorf("field googleplay: required")
	}
	if v, ok := raw["homepage"]; !ok || v == nil {
		return fmt.Errorf("field homepage: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["redirect_uri"]; !ok || v == nil {
		return fmt.Errorf("field redirect_uri: required")
	}
	if v, ok := raw["verification_uri"]; !ok || v == nil {
		return fmt.Errorf("field verification_uri: required")
	}
	type Plain AppListResponseAppListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppListResponseAppListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestesGeneral) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["applies_to"]; !ok || v == nil {
		return fmt.Errorf("field applies_to: required")
	}
	if v, ok := raw["hourly"]; !ok || v == nil {
		return fmt.Errorf("field hourly: required")
	}
	if v, ok := raw["minutely"]; !ok || v == nil {
		return fmt.Errorf("field minutely: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestesGeneral
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestesGeneral(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_list"]; !ok || v == nil {
		return fmt.Errorf("field app_list: required")
	}
	type Plain AppListRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppListRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsOutcome) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["applies_to"]; !ok || v == nil {
		return fmt.Errorf("field applies_to: required")
	}
	if v, ok := raw["hourly"]; !ok || v == nil {
		return fmt.Errorf("field hourly: required")
	}
	if v, ok := raw["minutely"]; !ok || v == nil {
		return fmt.Errorf("field minutely: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsOutcome
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsOutcome(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListRequestAppList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppListRequestAppList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppListRequestAppList, v)
	}
	*j = AppListRequestAppList(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsPricing) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["applies_to"]; !ok || v == nil {
		return fmt.Errorf("field applies_to: required")
	}
	if v, ok := raw["hourly"]; !ok || v == nil {
		return fmt.Errorf("field hourly: required")
	}
	if v, ok := raw["minutely"]; !ok || v == nil {
		return fmt.Errorf("field minutely: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsPricing
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusApiCallLimitsMaxRequestsPricing(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppGetResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppGetResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusApiCallLimits) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_proposal_subscription"]; !ok || v == nil {
		return fmt.Errorf("field max_proposal_subscription: required")
	}
	if v, ok := raw["max_requestes_general"]; !ok || v == nil {
		return fmt.Errorf("field max_requestes_general: required")
	}
	if v, ok := raw["max_requests_outcome"]; !ok || v == nil {
		return fmt.Errorf("field max_requests_outcome: required")
	}
	if v, ok := raw["max_requests_pricing"]; !ok || v == nil {
		return fmt.Errorf("field max_requests_pricing: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusApiCallLimits
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusApiCallLimits(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppGetResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppGetResponseMsgType, v)
	}
	*j = AppGetResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetResponseAppGet) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage: required")
	}
	if v, ok := raw["appstore"]; !ok || v == nil {
		return fmt.Errorf("field appstore: required")
	}
	if v, ok := raw["github"]; !ok || v == nil {
		return fmt.Errorf("field github: required")
	}
	if v, ok := raw["googleplay"]; !ok || v == nil {
		return fmt.Errorf("field googleplay: required")
	}
	if v, ok := raw["homepage"]; !ok || v == nil {
		return fmt.Errorf("field homepage: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["redirect_uri"]; !ok || v == nil {
		return fmt.Errorf("field redirect_uri: required")
	}
	if v, ok := raw["verification_uri"]; !ok || v == nil {
		return fmt.Errorf("field verification_uri: required")
	}
	type Plain AppGetResponseAppGet
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppGetResponseAppGet(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_get"]; !ok || v == nil {
		return fmt.Errorf("field app_get: required")
	}
	type Plain AppGetRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppGetRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppDeleteResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AppDeleteResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppDeleteResponse(plain)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigCrossBorderAdsEnabled(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppDeleteResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppDeleteResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppDeleteResponseMsgType, v)
	}
	*j = AppDeleteResponseMsgType(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigDisabled = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigDisabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigDisabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigDisabled, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigDisabled(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppDeleteRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_delete"]; !ok || v == nil {
		return fmt.Errorf("field app_delete: required")
	}
	type Plain AppDeleteRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppDeleteRequest(plain)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts = []interface{}{
	"disabled",
	"enabled",
	"list_only",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigFixedRateAdverts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ApiTokenResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiTokenResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenResponseMsgType, v)
	}
	*j = ApiTokenResponseMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResponseApiTokenTokensElemScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenResponseApiTokenTokensElemScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenResponseApiTokenTokensElemScopesElem, v)
	}
	*j = ApiTokenResponseApiTokenTokensElemScopesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResponseApiTokenNewToken) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenResponseApiTokenNewToken {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenResponseApiTokenNewToken, v)
	}
	*j = ApiTokenResponseApiTokenNewToken(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts = []interface{}{
	"disabled",
	"enabled",
	"list_only",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigFloatRateAdverts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResponseApiTokenDeleteToken) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenResponseApiTokenDeleteToken {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenResponseApiTokenDeleteToken, v)
	}
	*j = ApiTokenResponseApiTokenDeleteToken(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["api_token"]; !ok || v == nil {
		return fmt.Errorf("field api_token: required")
	}
	type Plain ApiTokenRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiTokenRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRequestValidForCurrentIpOnly) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRequestValidForCurrentIpOnly {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRequestValidForCurrentIpOnly, v)
	}
	*j = ApiTokenRequestValidForCurrentIpOnly(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRequestNewTokenScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRequestNewTokenScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRequestNewTokenScopesElem, v)
	}
	*j = ApiTokenRequestNewTokenScopesElem(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemHasAdverts(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRequestApiToken) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRequestApiToken {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRequestApiToken, v)
	}
	*j = ApiTokenRequestApiToken(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElemIsDefault(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ActiveSymbolsResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActiveSymbolsResponse(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["display_name"]; !ok || v == nil {
		return fmt.Errorf("field display_name: required")
	}
	if v, ok := raw["has_adverts"]; !ok || v == nil {
		return fmt.Errorf("field has_adverts: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigLocalCurrenciesElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponseMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsResponseMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsResponseMsgType, v)
	}
	*j = ActiveSymbolsResponseMsgType(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfigPaymentMethodsEnabled(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponseActiveSymbolsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["display_name"]; !ok || v == nil {
		return fmt.Errorf("field display_name: required")
	}
	if v, ok := raw["display_order"]; !ok || v == nil {
		return fmt.Errorf("field display_order: required")
	}
	if v, ok := raw["exchange_is_open"]; !ok || v == nil {
		return fmt.Errorf("field exchange_is_open: required")
	}
	if v, ok := raw["is_trading_suspended"]; !ok || v == nil {
		return fmt.Errorf("field is_trading_suspended: required")
	}
	if v, ok := raw["market"]; !ok || v == nil {
		return fmt.Errorf("field market: required")
	}
	if v, ok := raw["market_display_name"]; !ok || v == nil {
		return fmt.Errorf("field market_display_name: required")
	}
	if v, ok := raw["pip"]; !ok || v == nil {
		return fmt.Errorf("field pip: required")
	}
	if v, ok := raw["subgroup"]; !ok || v == nil {
		return fmt.Errorf("field subgroup: required")
	}
	if v, ok := raw["subgroup_display_name"]; !ok || v == nil {
		return fmt.Errorf("field subgroup_display_name: required")
	}
	if v, ok := raw["submarket"]; !ok || v == nil {
		return fmt.Errorf("field submarket: required")
	}
	if v, ok := raw["submarket_display_name"]; !ok || v == nil {
		return fmt.Errorf("field submarket_display_name: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	if v, ok := raw["symbol_type"]; !ok || v == nil {
		return fmt.Errorf("field symbol_type: required")
	}
	type Plain ActiveSymbolsResponseActiveSymbolsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActiveSymbolsResponseActiveSymbolsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusP2PConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["adverts_active_limit"]; !ok || v == nil {
		return fmt.Errorf("field adverts_active_limit: required")
	}
	if v, ok := raw["cancellation_block_duration"]; !ok || v == nil {
		return fmt.Errorf("field cancellation_block_duration: required")
	}
	if v, ok := raw["cancellation_count_period"]; !ok || v == nil {
		return fmt.Errorf("field cancellation_count_period: required")
	}
	if v, ok := raw["cancellation_grace_period"]; !ok || v == nil {
		return fmt.Errorf("field cancellation_grace_period: required")
	}
	if v, ok := raw["cancellation_limit"]; !ok || v == nil {
		return fmt.Errorf("field cancellation_limit: required")
	}
	if v, ok := raw["cross_border_ads_enabled"]; !ok || v == nil {
		return fmt.Errorf("field cross_border_ads_enabled: required")
	}
	if v, ok := raw["disabled"]; !ok || v == nil {
		return fmt.Errorf("field disabled: required")
	}
	if v, ok := raw["feature_level"]; !ok || v == nil {
		return fmt.Errorf("field feature_level: required")
	}
	if v, ok := raw["fixed_rate_adverts"]; !ok || v == nil {
		return fmt.Errorf("field fixed_rate_adverts: required")
	}
	if v, ok := raw["float_rate_adverts"]; !ok || v == nil {
		return fmt.Errorf("field float_rate_adverts: required")
	}
	if v, ok := raw["float_rate_offset_limit"]; !ok || v == nil {
		return fmt.Errorf("field float_rate_offset_limit: required")
	}
	if v, ok := raw["local_currencies"]; !ok || v == nil {
		return fmt.Errorf("field local_currencies: required")
	}
	if v, ok := raw["maximum_advert_amount"]; !ok || v == nil {
		return fmt.Errorf("field maximum_advert_amount: required")
	}
	if v, ok := raw["maximum_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field maximum_order_amount: required")
	}
	if v, ok := raw["order_daily_limit"]; !ok || v == nil {
		return fmt.Errorf("field order_daily_limit: required")
	}
	if v, ok := raw["order_payment_period"]; !ok || v == nil {
		return fmt.Errorf("field order_payment_period: required")
	}
	if v, ok := raw["payment_methods_enabled"]; !ok || v == nil {
		return fmt.Errorf("field payment_methods_enabled: required")
	}
	if v, ok := raw["review_period"]; !ok || v == nil {
		return fmt.Errorf("field review_period: required")
	}
	if v, ok := raw["supported_currencies"]; !ok || v == nil {
		return fmt.Errorf("field supported_currencies: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusP2PConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusP2PConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended, v)
	}
	*j = ActiveSymbolsResponseActiveSymbolsElemIsTradingSuspended(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen, v)
	}
	*j = ActiveSymbolsResponseActiveSymbolsElemExchangeIsOpen(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusPaymentAgents) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["initial_deposit_per_country"]; !ok || v == nil {
		return fmt.Errorf("field initial_deposit_per_country: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatusPaymentAgents
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatusPaymentAgents(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting, v)
	}
	*j = ActiveSymbolsResponseActiveSymbolsElemAllowForwardStarting(v)
	return nil
}

var enumValues_WebsiteStatusResponseWebsiteStatusSiteStatus = []interface{}{
	"up",
	"down",
	"updating",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatusSiteStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusResponseWebsiteStatusSiteStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusResponseWebsiteStatusSiteStatus, v)
	}
	*j = WebsiteStatusResponseWebsiteStatusSiteStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsRequest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["active_symbols"]; !ok || v == nil {
		return fmt.Errorf("field active_symbols: required")
	}
	type Plain ActiveSymbolsRequest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActiveSymbolsRequest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsRequestProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsRequestProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsRequestProductType, v)
	}
	*j = ActiveSymbolsRequestProductType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsRequestLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsRequestLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsRequestLandingCompanyShort, v)
	}
	*j = ActiveSymbolsRequestLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsRequestLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsRequestLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsRequestLandingCompany, v)
	}
	*j = ActiveSymbolsRequestLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponseWebsiteStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["api_call_limits"]; !ok || v == nil {
		return fmt.Errorf("field api_call_limits: required")
	}
	if v, ok := raw["currencies_config"]; !ok || v == nil {
		return fmt.Errorf("field currencies_config: required")
	}
	type Plain WebsiteStatusResponseWebsiteStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponseWebsiteStatus(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsRequestActiveSymbols) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsRequestActiveSymbols {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsRequestActiveSymbols, v)
	}
	*j = ActiveSymbolsRequestActiveSymbols(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusResponse) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain WebsiteStatusResponse
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatusResponse(plain)
	return nil
}
