// Code generated by bin/generate_call.go, DO NOT EDIT.

package deriv

// SubscribeBalance Get user account balance
func (a *DerivAPI) SubscribeBalance(r Balance) (s *Subsciption[BalanceResp], err error) {
	id := a.getNextRequestID()
	var f BalanceSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[BalanceResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeBuy Buy a Contract
func (a *DerivAPI) SubscribeBuy(r Buy) (s *Subsciption[BuyResp], err error) {
	id := a.getNextRequestID()
	var f BuySubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[BuyResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeExchangeRates Retrieves the exchange rates from a base currency to all currencies supported by the system.
func (a *DerivAPI) SubscribeExchangeRates(r ExchangeRates) (s *Subsciption[ExchangeRatesResp], err error) {
	id := a.getNextRequestID()
	var f ExchangeRatesSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ExchangeRatesResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertInfo Retrieve information about a P2P advert.
func (a *DerivAPI) SubscribeP2PAdvertInfo(r P2PAdvertInfo) (s *Subsciption[P2PAdvertInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertInfoResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertiserCreate Registers the client as a P2P advertiser.
func (a *DerivAPI) SubscribeP2PAdvertiserCreate(r P2PAdvertiserCreate) (s *Subsciption[P2PAdvertiserCreateResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertiserCreateSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertiserCreateResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertiserInfo Retrieve information about a P2P advertiser.
func (a *DerivAPI) SubscribeP2PAdvertiserInfo(r P2PAdvertiserInfo) (s *Subsciption[P2PAdvertiserInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertiserInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertiserInfoResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2POrderCreate Creates a P2P order for the specified advert.
func (a *DerivAPI) SubscribeP2POrderCreate(r P2POrderCreate) (s *Subsciption[P2POrderCreateResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderCreateSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderCreateResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2POrderInfo Retrieves the information about a P2P order.
func (a *DerivAPI) SubscribeP2POrderInfo(r P2POrderInfo) (s *Subsciption[P2POrderInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderInfoResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeP2POrderList List active orders.
func (a *DerivAPI) SubscribeP2POrderList(r P2POrderList) (s *Subsciption[P2POrderListResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderListSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderListResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeProposal Gets latest price for a specific contract.
func (a *DerivAPI) SubscribeProposal(r Proposal) (s *Subsciption[ProposalResp], err error) {
	id := a.getNextRequestID()
	var f ProposalSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ProposalResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeProposalOpenContract Get latest price (and other information) for a contract in the user's portfolio
func (a *DerivAPI) SubscribeProposalOpenContract(r ProposalOpenContract) (s *Subsciption[ProposalOpenContractResp], err error) {
	id := a.getNextRequestID()
	var f ProposalOpenContractSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ProposalOpenContractResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeTicks Initiate a continuous stream of spot price updates for a given symbol.
func (a *DerivAPI) SubscribeTicks(r Ticks) (s *Subsciption[TicksResp], err error) {
	id := a.getNextRequestID()
	var f TicksSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[TicksResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeTicksHistory Get historic tick data for a given symbol.
func (a *DerivAPI) SubscribeTicksHistory(r TicksHistory) (s *Subsciption[TicksHistoryResp], err error) {
	id := a.getNextRequestID()
	var f TicksHistorySubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[TicksHistoryResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeTransaction Subscribe to transaction notifications
func (a *DerivAPI) SubscribeTransaction(r Transaction) (s *Subsciption[TransactionResp], err error) {
	id := a.getNextRequestID()
	var f TransactionSubscribe = 1
	r.ReqId = &id
	r.Subscribe = f
	s = NewSubcription[TransactionResp](a)
	err = s.Start(id, r)
	return
}

// SubscribeWebsiteStatus Request server status.
func (a *DerivAPI) SubscribeWebsiteStatus(r WebsiteStatus) (s *Subsciption[WebsiteStatusResp], err error) {
	id := a.getNextRequestID()
	var f WebsiteStatusSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[WebsiteStatusResp](a)
	err = s.Start(id, r)
	return
}

