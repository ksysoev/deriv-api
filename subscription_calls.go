// Code generated by bin/generate_call.go, DO NOT EDIT.

package deriv

// SubscribeBalance Get user account balance
func (a *DerivAPI) SubscribeBalance(r Balance) (rsp BalanceResp, s *Subsciption[BalanceResp, BalanceResp], err error) {
	id := a.getNextRequestID()
	var f BalanceSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[BalanceResp, BalanceResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeBuy Buy a Contract
func (a *DerivAPI) SubscribeBuy(r Buy) (rsp BuyResp, s *Subsciption[BuyResp, ProposalOpenContractResp], err error) {
	id := a.getNextRequestID()
	var f BuySubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[BuyResp, ProposalOpenContractResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeExchangeRates Retrieves the exchange rates from a base currency to all currencies supported by the system.
func (a *DerivAPI) SubscribeExchangeRates(r ExchangeRates) (rsp ExchangeRatesResp, s *Subsciption[ExchangeRatesResp, ExchangeRatesResp], err error) {
	id := a.getNextRequestID()
	var f ExchangeRatesSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ExchangeRatesResp, ExchangeRatesResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertInfo Retrieve information about a P2P advert.
func (a *DerivAPI) SubscribeP2PAdvertInfo(r P2PAdvertInfo) (rsp P2PAdvertInfoResp, s *Subsciption[P2PAdvertInfoResp, P2PAdvertInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertInfoResp, P2PAdvertInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertiserCreate Registers the client as a P2P advertiser.
func (a *DerivAPI) SubscribeP2PAdvertiserCreate(r P2PAdvertiserCreate) (rsp P2PAdvertiserCreateResp, s *Subsciption[P2PAdvertiserCreateResp, P2PAdvertInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertiserCreateSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertiserCreateResp, P2PAdvertInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2PAdvertiserInfo Retrieve information about a P2P advertiser.
func (a *DerivAPI) SubscribeP2PAdvertiserInfo(r P2PAdvertiserInfo) (rsp P2PAdvertiserInfoResp, s *Subsciption[P2PAdvertiserInfoResp, P2PAdvertiserInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2PAdvertiserInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2PAdvertiserInfoResp, P2PAdvertiserInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2POrderCreate Creates a P2P order for the specified advert.
func (a *DerivAPI) SubscribeP2POrderCreate(r P2POrderCreate) (rsp P2POrderCreateResp, s *Subsciption[P2POrderCreateResp, P2POrderInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderCreateSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderCreateResp, P2POrderInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2POrderInfo Retrieves the information about a P2P order.
func (a *DerivAPI) SubscribeP2POrderInfo(r P2POrderInfo) (rsp P2POrderInfoResp, s *Subsciption[P2POrderInfoResp, P2POrderInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderInfoSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderInfoResp, P2POrderInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeP2POrderList List active orders.
func (a *DerivAPI) SubscribeP2POrderList(r P2POrderList) (rsp P2POrderListResp, s *Subsciption[P2POrderListResp, P2POrderInfoResp], err error) {
	id := a.getNextRequestID()
	var f P2POrderListSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[P2POrderListResp, P2POrderInfoResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeProposal Gets latest price for a specific contract.
func (a *DerivAPI) SubscribeProposal(r Proposal) (rsp ProposalResp, s *Subsciption[ProposalResp, ProposalResp], err error) {
	id := a.getNextRequestID()
	var f ProposalSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ProposalResp, ProposalResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeProposalOpenContract Get latest price (and other information) for a contract in the user's portfolio
func (a *DerivAPI) SubscribeProposalOpenContract(r ProposalOpenContract) (rsp ProposalOpenContractResp, s *Subsciption[ProposalOpenContractResp, ProposalOpenContractResp], err error) {
	id := a.getNextRequestID()
	var f ProposalOpenContractSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[ProposalOpenContractResp, ProposalOpenContractResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeTicks Initiate a continuous stream of spot price updates for a given symbol.
func (a *DerivAPI) SubscribeTicks(r Ticks) (rsp TicksResp, s *Subsciption[TicksResp, TicksResp], err error) {
	id := a.getNextRequestID()
	var f TicksSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[TicksResp, TicksResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeTicksHistory Get historic tick data for a given symbol.
func (a *DerivAPI) SubscribeTicksHistory(r TicksHistory) (rsp TicksHistoryResp, s *Subsciption[TicksHistoryResp, TicksResp], err error) {
	id := a.getNextRequestID()
	var f TicksHistorySubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[TicksHistoryResp, TicksResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeTransaction Subscribe to transaction notifications
func (a *DerivAPI) SubscribeTransaction(r Transaction) (rsp TransactionResp, s *Subsciption[TransactionResp, TransactionResp], err error) {
	id := a.getNextRequestID()
	var f TransactionSubscribe = 1
	r.ReqId = &id
	r.Subscribe = f
	s = NewSubcription[TransactionResp, TransactionResp](a)
	rsp, err = s.Start(id, r)
	return
}

// SubscribeWebsiteStatus Request server status.
func (a *DerivAPI) SubscribeWebsiteStatus(r WebsiteStatus) (rsp WebsiteStatusResp, s *Subsciption[WebsiteStatusResp, WebsiteStatusResp], err error) {
	id := a.getNextRequestID()
	var f WebsiteStatusSubscribe = 1
	r.ReqId = &id
	r.Subscribe = &f
	s = NewSubcription[WebsiteStatusResp, WebsiteStatusResp](a)
	rsp, err = s.Start(id, r)
	return
}

