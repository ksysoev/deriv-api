// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Creates a review for the specified order.
type P2POrderReview struct {
	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// The order identification number.
	OrderId string `json:"order_id"`

	// Must be 1
	P2POrderReview P2POrderReviewP2POrderReview `json:"p2p_order_review"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2POrderReviewPassthrough `json:"passthrough,omitempty"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// [Optional] `1` if the counterparty is recommendable to others, otherwise `0`.
	Recommended *P2POrderReviewRecommended `json:"recommended,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2POrderReviewP2POrderReview int

var enumValues_P2POrderReviewP2POrderReview = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewP2POrderReview) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewP2POrderReview {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewP2POrderReview, v)
	}
	*j = P2POrderReviewP2POrderReview(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2POrderReviewPassthrough map[string]interface{}

type P2POrderReviewRecommended struct {
	Value interface{}
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderReviewRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderReviewRecommended = []interface{}{
	nil,
	0.0,
	1.0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReviewRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderReviewRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderReviewRecommended, v.Value)
	}
	*j = P2POrderReviewRecommended(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderReview) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["order_id"]; raw != nil && !ok {
		return fmt.Errorf("field order_id in P2POrderReview: required")
	}
	if _, ok := raw["p2p_order_review"]; raw != nil && !ok {
		return fmt.Errorf("field p2p_order_review in P2POrderReview: required")
	}
	if _, ok := raw["rating"]; raw != nil && !ok {
		return fmt.Errorf("field rating in P2POrderReview: required")
	}
	type Plain P2POrderReview
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderReview(plain)
	return nil
}
