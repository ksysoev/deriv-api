// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type OauthAppsRespEchoReq map[string]interface{}

type OauthAppsRespMsgType string

var enumValues_OauthAppsRespMsgType = []interface{}{
	"oauth_apps",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_OauthAppsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_OauthAppsRespMsgType, v)
	}
	*j = OauthAppsRespMsgType(v)
	return nil
}

const OauthAppsRespMsgTypeOauthApps OauthAppsRespMsgType = "oauth_apps"

type OauthAppsRespOauthAppsElemOfficial int

var enumValues_OauthAppsRespOauthAppsElemOfficial = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsRespOauthAppsElemOfficial) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_OauthAppsRespOauthAppsElemOfficial {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_OauthAppsRespOauthAppsElemOfficial, v)
	}
	*j = OauthAppsRespOauthAppsElemOfficial(v)
	return nil
}

type OauthAppsRespOauthAppsElem struct {
	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout)
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// The last date which the application has been used.
	LastUsed *string `json:"last_used"`

	// Application name
	Name string `json:"name"`

	// Boolean value: 1 or 0, indicating 1 if app is an official app and 0 incase of
	// unofficial app
	Official OauthAppsRespOauthAppsElemOfficial `json:"official"`

	// The list of permission scopes grant for each app.
	Scopes []string `json:"scopes"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsRespOauthAppsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id in OauthAppsRespOauthAppsElem: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage in OauthAppsRespOauthAppsElem: required")
	}
	if v, ok := raw["last_used"]; !ok || v == nil {
		return fmt.Errorf("field last_used in OauthAppsRespOauthAppsElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in OauthAppsRespOauthAppsElem: required")
	}
	if v, ok := raw["official"]; !ok || v == nil {
		return fmt.Errorf("field official in OauthAppsRespOauthAppsElem: required")
	}
	if v, ok := raw["scopes"]; !ok || v == nil {
		return fmt.Errorf("field scopes in OauthAppsRespOauthAppsElem: required")
	}
	type Plain OauthAppsRespOauthAppsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthAppsRespOauthAppsElem(plain)
	return nil
}

// A message with used applications
type OauthAppsResp struct {
	// Echo of the request made.
	EchoReq OauthAppsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType OauthAppsRespMsgType `json:"msg_type"`

	// List of 3rd party OAuth applications that used for the authorized account.
	OauthApps []OauthAppsRespOauthAppsElem `json:"oauth_apps,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in OauthAppsResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in OauthAppsResp: required")
	}
	type Plain OauthAppsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthAppsResp(plain)
	return nil
}
