// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Set User Settings (this call should be used in conjunction with `get_settings`)
type SetSettings struct {
	// [Optional] Purpose and reason for requesting the account opening. Only
	// applicable for real money account. Required for clients that have not set it
	// yet. Can only be set once.
	AccountOpeningReason *SetSettingsAccountOpeningReason `json:"account_opening_reason,omitempty"`

	// [Optional] Note: not applicable for virtual account. Required field for real
	// money account.
	AddressCity *string `json:"address_city,omitempty"`

	// [Optional] Note: not applicable for virtual account. Required field for real
	// money account.
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Note: not applicable for virtual account. Optional field for real
	// money account.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] Boolean value 1 or 0, indicating permission to allow others to
	// follow your trades. Note: not applicable for Virtual account. Only allow for
	// real money account.
	AllowCopiers *SetSettingsAllowCopiers `json:"allow_copiers,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code.
	Citizen *string `json:"citizen,omitempty"`

	// [Optional] Date of birth format: yyyy-mm-dd (can only be changed on
	// unauthenticated svg accounts).
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// Boolean value 1 or 0, indicating if user email belong to dxtrade exception
	// list.
	DxtradeUserException *SetSettingsDxtradeUserException `json:"dxtrade_user_exception,omitempty"`

	// [Optional] Boolean value 1 or 0, indicating permission to use email address for
	// any contact which may include marketing
	EmailConsent *SetSettingsEmailConsent `json:"email_consent,omitempty"`

	// [Optional] Employment Status.
	EmploymentStatus *SetSettingsEmploymentStatus `json:"employment_status,omitempty"`

	// [Optional] Enable or disable one or multiple features.
	FeatureFlag *SetSettingsFeatureFlag `json:"feature_flag,omitempty"`

	// [Optional] Within 1-50 characters, use only letters, spaces, hyphens,
	// full-stops or apostrophes (can only be changed on unauthenticated svg
	// accounts).
	FirstName *string `json:"first_name,omitempty"`

	// [Optional] Within 1-50 characters, use only letters, spaces, hyphens,
	// full-stops or apostrophes (can only be changed on unauthenticated svg
	// accounts).
	LastName *string `json:"last_name,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA
	// (Politically Exposed Person/Relatives and Close Associates). Effective for real
	// accounts only.
	NonPepDeclaration *SetSettingsNonPepDeclaration `json:"non_pep_declaration,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetSettingsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Note: not applicable for virtual account. Starting with `+` followed
	// by 9-35 digits, hyphens or space.
	Phone *string `json:"phone,omitempty"`

	// [Optional] Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// [Optional] User's preferred language, ISO standard language code
	PreferredLanguage *string `json:"preferred_language,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Required when client wants to be treated as professional. Applicable
	// for financial accounts only.
	RequestProfessionalStatus *SetSettingsRequestProfessionalStatus `json:"request_professional_status,omitempty"`

	// [Optional] 2-letter country code. Note: not applicable for real money account.
	// Only allow for Virtual account without residence set.
	Residence *string `json:"residence,omitempty"`

	// [Optional] Accept any value in enum list (can only be changed on
	// unauthenticated svg accounts).
	Salutation *SetSettingsSalutation `json:"salutation,omitempty"`

	// [Optional] Answer to secret question, within 4-50 characters. Required for new
	// account and existing client details will be used if client opens another
	// account.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list. Required for new account and existing
	// client details will be used if client opens another account.
	SecretQuestion *SetSettingsSecretQuestion `json:"secret_question,omitempty"`

	// Must be `1`
	SetSettings SetSettingsSetSettings `json:"set_settings"`

	// [Optional] Tax identification number. Only applicable for real money account.
	// Required for maltainvest landing company.
	TaxIdentificationNumber *string `json:"tax_identification_number,omitempty"`

	// [Optional] Residence for tax purpose. Comma separated iso country code if
	// multiple jurisdictions. Only applicable for real money account. Required for
	// maltainvest landing company.
	TaxResidence *string `json:"tax_residence,omitempty"`

	// [Optional] Whether the client has skipped the TIN form. Only applicable for
	// real money account.
	TinSkipped *SetSettingsTinSkipped `json:"tin_skipped,omitempty"`

	// [Optional] Enable/Disable Trading Hub dashboard
	TradingHub *SetSettingsTradingHub `json:"trading_hub,omitempty"`
}

type SetSettingsAccountOpeningReason string

const SetSettingsAccountOpeningReasonAdditionalRevenue SetSettingsAccountOpeningReason = "Additional revenue"
const SetSettingsAccountOpeningReasonHedging SetSettingsAccountOpeningReason = "Hedging"
const SetSettingsAccountOpeningReasonIncomeEarning SetSettingsAccountOpeningReason = "Income Earning"
const SetSettingsAccountOpeningReasonPeerToPeerExchange SetSettingsAccountOpeningReason = "Peer-to-peer exchange"
const SetSettingsAccountOpeningReasonSavings SetSettingsAccountOpeningReason = "Savings"
const SetSettingsAccountOpeningReasonSpeculative SetSettingsAccountOpeningReason = "Speculative"

var enumValues_SetSettingsAccountOpeningReason = []interface{}{
	"Speculative",
	"Income Earning",
	"Hedging",
	"Peer-to-peer exchange",
	"Additional revenue",
	"Savings",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsAccountOpeningReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsAccountOpeningReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsAccountOpeningReason, v)
	}
	*j = SetSettingsAccountOpeningReason(v)
	return nil
}

type SetSettingsAllowCopiers int

var enumValues_SetSettingsAllowCopiers = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsAllowCopiers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsAllowCopiers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsAllowCopiers, v)
	}
	*j = SetSettingsAllowCopiers(v)
	return nil
}

type SetSettingsDxtradeUserException int

var enumValues_SetSettingsDxtradeUserException = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsDxtradeUserException) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsDxtradeUserException {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsDxtradeUserException, v)
	}
	*j = SetSettingsDxtradeUserException(v)
	return nil
}

type SetSettingsEmailConsent int

var enumValues_SetSettingsEmailConsent = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsEmailConsent, v)
	}
	*j = SetSettingsEmailConsent(v)
	return nil
}

type SetSettingsEmploymentStatus string

const SetSettingsEmploymentStatusEmployed SetSettingsEmploymentStatus = "Employed"
const SetSettingsEmploymentStatusPensioner SetSettingsEmploymentStatus = "Pensioner"
const SetSettingsEmploymentStatusSelfEmployed SetSettingsEmploymentStatus = "Self-Employed"
const SetSettingsEmploymentStatusStudent SetSettingsEmploymentStatus = "Student"
const SetSettingsEmploymentStatusUnemployed SetSettingsEmploymentStatus = "Unemployed"

var enumValues_SetSettingsEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsEmploymentStatus, v)
	}
	*j = SetSettingsEmploymentStatus(v)
	return nil
}

// [Optional] Enable or disable one or multiple features.
type SetSettingsFeatureFlag struct {
	// [Optional] Boolean value 1 or 0 indicating whether to enable/disable this
	// feature
	Wallet *SetSettingsFeatureFlagWallet `json:"wallet,omitempty"`
}

type SetSettingsFeatureFlagWallet int

var enumValues_SetSettingsFeatureFlagWallet = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsFeatureFlagWallet) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsFeatureFlagWallet {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsFeatureFlagWallet, v)
	}
	*j = SetSettingsFeatureFlagWallet(v)
	return nil
}

type SetSettingsNonPepDeclaration int

var enumValues_SetSettingsNonPepDeclaration = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsNonPepDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsNonPepDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsNonPepDeclaration, v)
	}
	*j = SetSettingsNonPepDeclaration(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetSettingsPassthrough map[string]interface{}

type SetSettingsRequestProfessionalStatus int

var enumValues_SetSettingsRequestProfessionalStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsRequestProfessionalStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsRequestProfessionalStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsRequestProfessionalStatus, v)
	}
	*j = SetSettingsRequestProfessionalStatus(v)
	return nil
}

type SetSettingsSalutation string

const SetSettingsSalutationMiss SetSettingsSalutation = "Miss"
const SetSettingsSalutationMr SetSettingsSalutation = "Mr"
const SetSettingsSalutationMrs SetSettingsSalutation = "Mrs"
const SetSettingsSalutationMs SetSettingsSalutation = "Ms"

var enumValues_SetSettingsSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsSalutation, v)
	}
	*j = SetSettingsSalutation(v)
	return nil
}

type SetSettingsSecretQuestion string

const SetSettingsSecretQuestionBrandOfFirstCar SetSettingsSecretQuestion = "Brand of first car"
const SetSettingsSecretQuestionFavouriteArtist SetSettingsSecretQuestion = "Favourite artist"
const SetSettingsSecretQuestionFavouriteDish SetSettingsSecretQuestion = "Favourite dish"
const SetSettingsSecretQuestionMemorableDate SetSettingsSecretQuestion = "Memorable date"
const SetSettingsSecretQuestionMemorableTownCity SetSettingsSecretQuestion = "Memorable town/city"
const SetSettingsSecretQuestionMotherSMaidenName SetSettingsSecretQuestion = "Mother's maiden name"
const SetSettingsSecretQuestionNameOfFirstLove SetSettingsSecretQuestion = "Name of first love"
const SetSettingsSecretQuestionNameOfYourPet SetSettingsSecretQuestion = "Name of your pet"

var enumValues_SetSettingsSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsSecretQuestion, v)
	}
	*j = SetSettingsSecretQuestion(v)
	return nil
}

type SetSettingsSetSettings int

var enumValues_SetSettingsSetSettings = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsSetSettings) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsSetSettings {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsSetSettings, v)
	}
	*j = SetSettingsSetSettings(v)
	return nil
}

type SetSettingsTinSkipped int

var enumValues_SetSettingsTinSkipped = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsTinSkipped) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsTinSkipped {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsTinSkipped, v)
	}
	*j = SetSettingsTinSkipped(v)
	return nil
}

type SetSettingsTradingHub int

var enumValues_SetSettingsTradingHub = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettingsTradingHub) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSettingsTradingHub {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSettingsTradingHub, v)
	}
	*j = SetSettingsTradingHub(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSettings) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["set_settings"]; raw != nil && !ok {
		return fmt.Errorf("field set_settings in SetSettings: required")
	}
	type Plain SetSettings
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.SecretAnswer != nil && len(*plain.SecretAnswer) < 4 {
		return fmt.Errorf("field %s length: must be >= %d", "secret_answer", 4)
	}
	if plain.SecretAnswer != nil && len(*plain.SecretAnswer) > 50 {
		return fmt.Errorf("field %s length: must be <= %d", "secret_answer", 50)
	}
	*j = SetSettings(plain)
	return nil
}
