// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SellContractForMultipleAccountsPassthrough map[string]interface{}

type SellContractForMultipleAccountsSellContractForMultipleAccounts int

var enumValues_SellContractForMultipleAccountsSellContractForMultipleAccounts = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccountsSellContractForMultipleAccounts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellContractForMultipleAccountsSellContractForMultipleAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellContractForMultipleAccountsSellContractForMultipleAccounts, v)
	}
	*j = SellContractForMultipleAccountsSellContractForMultipleAccounts(v)
	return nil
}

// Sell contracts for multiple accounts simultaneously. Uses the shortcode response
// from `buy_contract_for_multiple_accounts` to identify the contract, and
// authorisation tokens to select which accounts to sell those contracts on. Note
// that only the accounts identified by the tokens will be affected. This will not
// sell the contract on the currently-authorised account unless you include the
// token for the current account.
type SellContractForMultipleAccounts struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SellContractForMultipleAccountsPassthrough `json:"passthrough,omitempty"`

	// Minimum price at which to sell the contract, or `0` for 'sell at market'.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SellContractForMultipleAccounts SellContractForMultipleAccountsSellContractForMultipleAccounts `json:"sell_contract_for_multiple_accounts"`

	// An internal ID used to identify the contract which was originally bought. This
	// is returned from the `buy` and `buy_contract_for_multiple_accounts` calls.
	Shortcode string `json:"shortcode"`

	// Authorisation tokens which select the accounts to sell use for the affected
	// accounts.
	Tokens []string `json:"tokens"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellContractForMultipleAccounts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["sell_contract_for_multiple_accounts"]; !ok || v == nil {
		return fmt.Errorf("field sell_contract_for_multiple_accounts: required")
	}
	if v, ok := raw["shortcode"]; !ok || v == nil {
		return fmt.Errorf("field shortcode: required")
	}
	if v, ok := raw["tokens"]; !ok || v == nil {
		return fmt.Errorf("field tokens: required")
	}
	type Plain SellContractForMultipleAccounts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellContractForMultipleAccounts(plain)
	return nil
}
