// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The company has a number of licensed subsidiaries in various jurisdictions,
// which are called Landing Companies (and which are wholly owned subsidiaries of
// the Deriv Group). This call provides information about each Landing Company.
type LandingCompanyDetails struct {
	// [Optional] Will return an extra field `tin_not_mandatory` indicating if the
	// landing company does not require tax identification number for the provided
	// country.
	Country *string `json:"country,omitempty"`

	// Landing company shortcode.
	LandingCompanyDetails LandingCompanyDetailsLandingCompanyDetails `json:"landing_company_details"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough LandingCompanyDetailsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type LandingCompanyDetailsLandingCompanyDetails string

const LandingCompanyDetailsLandingCompanyDetailsBvi LandingCompanyDetailsLandingCompanyDetails = "bvi"
const LandingCompanyDetailsLandingCompanyDetailsDsl LandingCompanyDetailsLandingCompanyDetails = "dsl"
const LandingCompanyDetailsLandingCompanyDetailsIom LandingCompanyDetailsLandingCompanyDetails = "iom"
const LandingCompanyDetailsLandingCompanyDetailsLabuan LandingCompanyDetailsLandingCompanyDetails = "labuan"
const LandingCompanyDetailsLandingCompanyDetailsMalta LandingCompanyDetailsLandingCompanyDetails = "malta"
const LandingCompanyDetailsLandingCompanyDetailsMaltainvest LandingCompanyDetailsLandingCompanyDetails = "maltainvest"
const LandingCompanyDetailsLandingCompanyDetailsSamoa LandingCompanyDetailsLandingCompanyDetails = "samoa"
const LandingCompanyDetailsLandingCompanyDetailsSamoaVirtual LandingCompanyDetailsLandingCompanyDetails = "samoa-virtual"
const LandingCompanyDetailsLandingCompanyDetailsSvg LandingCompanyDetailsLandingCompanyDetails = "svg"
const LandingCompanyDetailsLandingCompanyDetailsVanuatu LandingCompanyDetailsLandingCompanyDetails = "vanuatu"
const LandingCompanyDetailsLandingCompanyDetailsVirtual LandingCompanyDetailsLandingCompanyDetails = "virtual"

var enumValues_LandingCompanyDetailsLandingCompanyDetails = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"samoa",
	"samoa-virtual",
	"dsl",
	"bvi",
	"labuan",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetailsLandingCompanyDetails) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyDetailsLandingCompanyDetails {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyDetailsLandingCompanyDetails, v)
	}
	*j = LandingCompanyDetailsLandingCompanyDetails(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type LandingCompanyDetailsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["landing_company_details"]; raw != nil && !ok {
		return fmt.Errorf("field landing_company_details in LandingCompanyDetails: required")
	}
	type Plain LandingCompanyDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyDetails(plain)
	return nil
}
