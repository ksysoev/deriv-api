// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type TransactionPassthrough map[string]interface{}

type TransactionSubscribe int

var enumValues_TransactionSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionSubscribe, v)
	}
	*j = TransactionSubscribe(v)
	return nil
}

type TransactionTransaction int

var enumValues_TransactionTransaction = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionTransaction) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionTransaction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionTransaction, v)
	}
	*j = TransactionTransaction(v)
	return nil
}

// Subscribe to transaction notifications
type Transaction struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough TransactionPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// If set to 1, will send updates whenever there is an update to transactions. If
	// not to 1 then it will not return any records.
	Subscribe TransactionSubscribe `json:"subscribe"`

	// Must be `1`
	Transaction TransactionTransaction `json:"transaction"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Transaction) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["subscribe"]; !ok || v == nil {
		return fmt.Errorf("field subscribe: required")
	}
	if v, ok := raw["transaction"]; !ok || v == nil {
		return fmt.Errorf("field transaction: required")
	}
	type Plain Transaction
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Transaction(plain)
	return nil
}
