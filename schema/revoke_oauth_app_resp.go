// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with revoking a used application
type RevokeOauthAppResp struct {
	// Echo of the request made.
	EchoReq RevokeOauthAppRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType RevokeOauthAppRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// `1` on success
	RevokeOauthApp *int `json:"revoke_oauth_app,omitempty"`
}

// Echo of the request made.
type RevokeOauthAppRespEchoReq map[string]interface{}

type RevokeOauthAppRespMsgType string

const RevokeOauthAppRespMsgTypeRevokeOauthApp RevokeOauthAppRespMsgType = "revoke_oauth_app"

var enumValues_RevokeOauthAppRespMsgType = []interface{}{
	"revoke_oauth_app",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RevokeOauthAppRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RevokeOauthAppRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RevokeOauthAppRespMsgType, v)
	}
	*j = RevokeOauthAppRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RevokeOauthAppResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in RevokeOauthAppResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in RevokeOauthAppResp: required")
	}
	type Plain RevokeOauthAppResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RevokeOauthAppResp(plain)
	return nil
}
