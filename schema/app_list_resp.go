// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with created applications
type AppListResp struct {
	// List of created applications for the authorized account.
	AppList []AppListRespAppListElem `json:"app_list,omitempty"`

	// Echo of the request made.
	EchoReq AppListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppListRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

type AppListRespAppListElem struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// Application's App Store URL.
	Appstore *string `json:"appstore"`

	// Application's GitHub page. (for open-source projects)
	Github *string `json:"github"`

	// Application's Google Play URL.
	Googleplay *string `json:"googleplay"`

	// Application's homepage URL.
	Homepage *string `json:"homepage"`

	// Application name.
	Name string `json:"name"`

	// The URL to redirect to after a successful login.
	RedirectUri string `json:"redirect_uri"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListRespAppListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["app_id"]; raw != nil && !ok {
		return fmt.Errorf("field app_id in AppListRespAppListElem: required")
	}
	if _, ok := raw["app_markup_percentage"]; raw != nil && !ok {
		return fmt.Errorf("field app_markup_percentage in AppListRespAppListElem: required")
	}
	if _, ok := raw["appstore"]; raw != nil && !ok {
		return fmt.Errorf("field appstore in AppListRespAppListElem: required")
	}
	if _, ok := raw["github"]; raw != nil && !ok {
		return fmt.Errorf("field github in AppListRespAppListElem: required")
	}
	if _, ok := raw["googleplay"]; raw != nil && !ok {
		return fmt.Errorf("field googleplay in AppListRespAppListElem: required")
	}
	if _, ok := raw["homepage"]; raw != nil && !ok {
		return fmt.Errorf("field homepage in AppListRespAppListElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in AppListRespAppListElem: required")
	}
	if _, ok := raw["redirect_uri"]; raw != nil && !ok {
		return fmt.Errorf("field redirect_uri in AppListRespAppListElem: required")
	}
	if _, ok := raw["verification_uri"]; raw != nil && !ok {
		return fmt.Errorf("field verification_uri in AppListRespAppListElem: required")
	}
	type Plain AppListRespAppListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppListRespAppListElem(plain)
	return nil
}

// Echo of the request made.
type AppListRespEchoReq map[string]interface{}

type AppListRespMsgType string

const AppListRespMsgTypeAppList AppListRespMsgType = "app_list"

var enumValues_AppListRespMsgType = []interface{}{
	"app_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppListRespMsgType, v)
	}
	*j = AppListRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in AppListResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in AppListResp: required")
	}
	type Plain AppListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppListResp(plain)
	return nil
}
