// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

type TncApprovalAffiliateCocAgreement int

var enumValues_TncApprovalAffiliateCocAgreement = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalAffiliateCocAgreement) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalAffiliateCocAgreement {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalAffiliateCocAgreement, v)
	}
	*j = TncApprovalAffiliateCocAgreement(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type TncApprovalPassthrough map[string]interface{}

type TncApprovalTncApproval float64

var enumValues_TncApprovalTncApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalTncApproval) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalTncApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalTncApproval, v)
	}
	*j = TncApprovalTncApproval(v)
	return nil
}

type TncApprovalUkgcFundsProtection int

var enumValues_TncApprovalUkgcFundsProtection = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalUkgcFundsProtection) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalUkgcFundsProtection {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalUkgcFundsProtection, v)
	}
	*j = TncApprovalUkgcFundsProtection(v)
	return nil
}

// To approve the latest version of terms and conditions.
type TncApproval struct {
	// [Optional] For Affiliate's Code of Conduct Agreement.
	AffiliateCocAgreement *TncApprovalAffiliateCocAgreement `json:"affiliate_coc_agreement,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough TncApprovalPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TncApproval TncApprovalTncApproval `json:"tnc_approval"`

	// [Optional] For `ASK_UK_FUNDS_PROTECTION` in `cashier`.
	UkgcFundsProtection *TncApprovalUkgcFundsProtection `json:"ukgc_funds_protection,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApproval) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["tnc_approval"]; !ok || v == nil {
		return fmt.Errorf("field tnc_approval: required")
	}
	type Plain TncApproval
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TncApproval(plain)
	return nil
}
