// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TicksPassthrough map[string]interface{}

type TicksSubscribe int

var enumValues_TicksSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksSubscribe, v)
	}
	*j = TicksSubscribe(v)
	return nil
}

// Initiate a continuous stream of spot price updates for a given symbol.
type Ticks struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TicksPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever a new tick is received.
	Subscribe *TicksSubscribe `json:"subscribe,omitempty"`

	// The short symbol name or array of symbols (obtained from `active_symbols`
	// call).
	Ticks interface{} `json:"ticks"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Ticks) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ticks"]; !ok || v == nil {
		return fmt.Errorf("field ticks in Ticks: required")
	}
	type Plain Ticks
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Ticks(plain)
	return nil
}
