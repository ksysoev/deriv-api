// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Request KYC information from client
type DocumentUpload struct {
	// Document file format
	DocumentFormat DocumentUploadDocumentFormat `json:"document_format"`

	// [Optional] Document ID (required for Passport, Proof of ID and Driver's
	// License)
	DocumentId *string `json:"document_id,omitempty"`

	// 2-letter country code, mandatory for POI only
	DocumentIssuingCountry *string `json:"document_issuing_country,omitempty"`

	// Document type
	DocumentType DocumentUploadDocumentType `json:"document_type"`

	// Must be `1`
	DocumentUpload DocumentUploadDocumentUpload `json:"document_upload"`

	// The checksum of the file to be uploaded
	ExpectedChecksum string `json:"expected_checksum"`

	// [Optional] Document expiration date (required for Passport, Proof of ID and
	// Driver's License)
	ExpirationDate *string `json:"expiration_date,omitempty"`

	// Document size (should be less than 10MB)
	FileSize int `json:"file_size"`

	// [Optional] Boolean value that indicates whether this document is lifetime valid
	// (only applies to POI document types, cancels out the expiration_date given if
	// any)
	LifetimeValid *DocumentUploadLifetimeValid `json:"lifetime_valid,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] To determine document side
	PageType *DocumentUploadPageType `json:"page_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough DocumentUploadPassthrough `json:"passthrough,omitempty"`

	// [Optional] It contains info about the proof of ownership being uploaded
	// (mandatory for proof_of_ownership document type)
	ProofOfOwnership *DocumentUploadProofOfOwnership `json:"proof_of_ownership,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type DocumentUploadDocumentFormat string

const DocumentUploadDocumentFormatGIF DocumentUploadDocumentFormat = "GIF"
const DocumentUploadDocumentFormatJPEG DocumentUploadDocumentFormat = "JPEG"
const DocumentUploadDocumentFormatJPG DocumentUploadDocumentFormat = "JPG"
const DocumentUploadDocumentFormatPDF DocumentUploadDocumentFormat = "PDF"
const DocumentUploadDocumentFormatPNG DocumentUploadDocumentFormat = "PNG"

var enumValues_DocumentUploadDocumentFormat = []interface{}{
	"PNG",
	"JPG",
	"JPEG",
	"GIF",
	"PDF",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadDocumentFormat) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadDocumentFormat {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadDocumentFormat, v)
	}
	*j = DocumentUploadDocumentFormat(v)
	return nil
}

type DocumentUploadDocumentType string

const DocumentUploadDocumentTypeAmlglobalcheck DocumentUploadDocumentType = "amlglobalcheck"
const DocumentUploadDocumentTypeArticleOfAssociation DocumentUploadDocumentType = "article_of_association"
const DocumentUploadDocumentTypeAuthorisationLetter DocumentUploadDocumentType = "authorisation_letter"
const DocumentUploadDocumentTypeBankstatement DocumentUploadDocumentType = "bankstatement"
const DocumentUploadDocumentTypeBirthCertificate DocumentUploadDocumentType = "birth_certificate"
const DocumentUploadDocumentTypeBrokerageStatement DocumentUploadDocumentType = "brokerage statement"
const DocumentUploadDocumentTypeBusinessDocumentsOthers DocumentUploadDocumentType = "business_documents_others"
const DocumentUploadDocumentTypeBusinessPoa DocumentUploadDocumentType = "business_poa"
const DocumentUploadDocumentTypeCoi DocumentUploadDocumentType = "coi"
const DocumentUploadDocumentTypeDeclarations DocumentUploadDocumentType = "declarations"
const DocumentUploadDocumentTypeDocverification DocumentUploadDocumentType = "docverification"
const DocumentUploadDocumentTypeDriverslicense DocumentUploadDocumentType = "driverslicense"
const DocumentUploadDocumentTypeDrivingLicence DocumentUploadDocumentType = "driving_licence"
const DocumentUploadDocumentTypeEddOthers DocumentUploadDocumentType = "edd_others"
const DocumentUploadDocumentTypeEmploymentContract DocumentUploadDocumentType = "employment_contract"
const DocumentUploadDocumentTypeIdentificationNumberDocument DocumentUploadDocumentType = "identification_number_document"
const DocumentUploadDocumentTypeInsuranceBill DocumentUploadDocumentType = "insurance_bill"
const DocumentUploadDocumentTypeMemorandum DocumentUploadDocumentType = "memorandum"
const DocumentUploadDocumentTypeNationalIdentityCard DocumentUploadDocumentType = "national_identity_card"
const DocumentUploadDocumentTypeNimcSlip DocumentUploadDocumentType = "nimc_slip"
const DocumentUploadDocumentTypeOther DocumentUploadDocumentType = "other"
const DocumentUploadDocumentTypePanCard DocumentUploadDocumentType = "pan_card"
const DocumentUploadDocumentTypePassport DocumentUploadDocumentType = "passport"
const DocumentUploadDocumentTypePayslip DocumentUploadDocumentType = "payslip"
const DocumentUploadDocumentTypePhoneBill DocumentUploadDocumentType = "phone_bill"
const DocumentUploadDocumentTypePoaOthers DocumentUploadDocumentType = "poa_others"
const DocumentUploadDocumentTypePoiOthers DocumentUploadDocumentType = "poi_others"
const DocumentUploadDocumentTypePowerOfAttorney DocumentUploadDocumentType = "power_of_attorney"
const DocumentUploadDocumentTypeProofOfOwnership DocumentUploadDocumentType = "proof_of_ownership"
const DocumentUploadDocumentTypeProofaddress DocumentUploadDocumentType = "proofaddress"
const DocumentUploadDocumentTypeProofid DocumentUploadDocumentType = "proofid"
const DocumentUploadDocumentTypeSelfieWithId DocumentUploadDocumentType = "selfie_with_id"
const DocumentUploadDocumentTypeServiceIdCard DocumentUploadDocumentType = "service_id_card"
const DocumentUploadDocumentTypeStudentCard DocumentUploadDocumentType = "student_card"
const DocumentUploadDocumentTypeTaxPhotoId DocumentUploadDocumentType = "tax_photo_id"
const DocumentUploadDocumentTypeTaxReceipt DocumentUploadDocumentType = "tax_receipt"
const DocumentUploadDocumentTypeTaxReturn DocumentUploadDocumentType = "tax_return"
const DocumentUploadDocumentTypeUtilityBill DocumentUploadDocumentType = "utility_bill"
const DocumentUploadDocumentTypeVoterCard DocumentUploadDocumentType = "voter_card"

var enumValues_DocumentUploadDocumentType = []interface{}{
	"passport",
	"national_identity_card",
	"identification_number_document",
	"service_id_card",
	"driving_licence",
	"utility_bill",
	"bankstatement",
	"power_of_attorney",
	"amlglobalcheck",
	"docverification",
	"proofid",
	"driverslicense",
	"proofaddress",
	"other",
	"voter_card",
	"student_card",
	"nimc_slip",
	"birth_certificate",
	"pan_card",
	"tax_photo_id",
	"selfie_with_id",
	"poi_others",
	"insurance_bill",
	"tax_receipt",
	"phone_bill",
	"poa_others",
	"proof_of_ownership",
	"tax_return",
	"employment_contract",
	"brokerage statement",
	"payslip",
	"edd_others",
	"coi",
	"business_poa",
	"article_of_association",
	"memorandum",
	"authorisation_letter",
	"declarations",
	"business_documents_others",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadDocumentType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadDocumentType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadDocumentType, v)
	}
	*j = DocumentUploadDocumentType(v)
	return nil
}

type DocumentUploadDocumentUpload int

var enumValues_DocumentUploadDocumentUpload = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadDocumentUpload) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadDocumentUpload {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadDocumentUpload, v)
	}
	*j = DocumentUploadDocumentUpload(v)
	return nil
}

type DocumentUploadLifetimeValid int

var enumValues_DocumentUploadLifetimeValid = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadLifetimeValid) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadLifetimeValid {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadLifetimeValid, v)
	}
	*j = DocumentUploadLifetimeValid(v)
	return nil
}

type DocumentUploadPageType string

const DocumentUploadPageTypeBack DocumentUploadPageType = "back"
const DocumentUploadPageTypeFront DocumentUploadPageType = "front"
const DocumentUploadPageTypePhoto DocumentUploadPageType = "photo"

var enumValues_DocumentUploadPageType = []interface{}{
	"front",
	"back",
	"photo",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadPageType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadPageType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadPageType, v)
	}
	*j = DocumentUploadPageType(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type DocumentUploadPassthrough map[string]interface{}

// [Optional] It contains info about the proof of ownership being uploaded
// (mandatory for proof_of_ownership document type)
type DocumentUploadProofOfOwnership struct {
	// A collection of unspecific information related to the proof of ownership being
	// uploaded
	Details DocumentUploadProofOfOwnershipDetails `json:"details"`

	// The id of the proof of ownership as shown in the /get_account_status proof of
	// ownership list
	Id float64 `json:"id"`
}

// A collection of unspecific information related to the proof of ownership being
// uploaded
type DocumentUploadProofOfOwnershipDetails map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadProofOfOwnership) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["details"]; raw != nil && !ok {
		return fmt.Errorf("field details in DocumentUploadProofOfOwnership: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in DocumentUploadProofOfOwnership: required")
	}
	type Plain DocumentUploadProofOfOwnership
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadProofOfOwnership(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUpload) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["document_format"]; raw != nil && !ok {
		return fmt.Errorf("field document_format in DocumentUpload: required")
	}
	if _, ok := raw["document_type"]; raw != nil && !ok {
		return fmt.Errorf("field document_type in DocumentUpload: required")
	}
	if _, ok := raw["document_upload"]; raw != nil && !ok {
		return fmt.Errorf("field document_upload in DocumentUpload: required")
	}
	if _, ok := raw["expected_checksum"]; raw != nil && !ok {
		return fmt.Errorf("field expected_checksum in DocumentUpload: required")
	}
	if _, ok := raw["file_size"]; raw != nil && !ok {
		return fmt.Errorf("field file_size in DocumentUpload: required")
	}
	type Plain DocumentUpload
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUpload(plain)
	return nil
}
