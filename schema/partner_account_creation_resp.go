// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Create partner accounts - Receive
type PartnerAccountCreationResp struct {
	// Echo of the request made.
	EchoReq PartnerAccountCreationRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PartnerAccountCreationRespMsgType `json:"msg_type"`

	// New partner account creation details for real partner wallet
	PartnerAccountCreation *PartnerAccountCreationRespPartnerAccountCreation `json:"partner_account_creation,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PartnerAccountCreationRespEchoReq map[string]interface{}

type PartnerAccountCreationRespMsgType string

const PartnerAccountCreationRespMsgTypePartnerAccountCreation PartnerAccountCreationRespMsgType = "partner_account_creation"

var enumValues_PartnerAccountCreationRespMsgType = []interface{}{
	"partner_account_creation",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationRespMsgType, v)
	}
	*j = PartnerAccountCreationRespMsgType(v)
	return nil
}

// New partner account creation details for real partner wallet
type PartnerAccountCreationRespPartnerAccountCreation struct {
	// Client ID of new real partner account
	ClientId *string `json:"client_id,omitempty"`

	// Currency of an account
	Currency *string `json:"currency,omitempty"`

	// Currency type against the currency
	CurrencyType *string `json:"currency_type,omitempty"`

	// Landing company full name
	LandingCompany *string `json:"landing_company,omitempty"`

	// Landing company shortcode
	LandingCompanyShortcode *string `json:"landing_company_shortcode,omitempty"`

	// OAuth token for client's login session
	OauthToken *string `json:"oauth_token,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PartnerAccountCreationResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PartnerAccountCreationResp: required")
	}
	type Plain PartnerAccountCreationResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerAccountCreationResp(plain)
	return nil
}
