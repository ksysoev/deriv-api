// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"

// Cancel contract with contract id
type Cancel struct {
	// Value should be the `contract_id` which received from the `portfolio` call.
	Cancel int `json:"cancel"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CancelPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CancelPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Cancel) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["cancel"]; raw != nil && !ok {
		return fmt.Errorf("field cancel in Cancel: required")
	}
	type Plain Cancel
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Cancel(plain)
	return nil
}
