// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type P2PCountryListRespEchoReq map[string]interface{}

type P2PCountryListRespMsgType string

var enumValues_P2PCountryListRespMsgType = []interface{}{
	"p2p_country_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PCountryListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PCountryListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PCountryListRespMsgType, v)
	}
	*j = P2PCountryListRespMsgType(v)
	return nil
}

// List all or specific country and its payment methods.
type P2PCountryListResp struct {
	// Echo of the request made.
	EchoReq P2PCountryListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PCountryListRespMsgType `json:"msg_type"`

	// Country identified by country code
	P2PCountryList P2PCountryListRespP2PCountryList `json:"p2p_country_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const P2PCountryListRespMsgTypeP2PCountryList P2PCountryListRespMsgType = "p2p_country_list"

// Country identified by country code
type P2PCountryListRespP2PCountryList map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PCountryListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in P2PCountryListResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in P2PCountryListResp: required")
	}
	type Plain P2PCountryListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PCountryListResp(plain)
	return nil
}
