// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Saves client's payment agent details.
type PaymentagentCreate struct {
	// [Optional] Client's My Affiliate id, if exists.
	AffiliateId *string `json:"affiliate_id,omitempty"`

	// Indicates client's agreement with the Code of Conduct.
	CodeOfConductApproval PaymentagentCreateCodeOfConductApproval `json:"code_of_conduct_approval"`

	// Commission  (%) the agent wants to take on deposits
	CommissionDeposit float64 `json:"commission_deposit"`

	// Commission  (%) the agent wants to take on withdrawals
	CommissionWithdrawal float64 `json:"commission_withdrawal"`

	// Payment agent's email address.
	Email string `json:"email"`

	// [Optional] Information about payment agent and their proposed service.
	Information string `json:"information"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentCreatePassthrough `json:"passthrough,omitempty"`

	// The name with which the payment agent is going to be identified.
	PaymentAgentName string `json:"payment_agent_name"`

	// Must be 1
	PaymentagentCreate PaymentagentCreatePaymentagentCreate `json:"paymentagent_create"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentCreatePhoneNumbersElem `json:"phone_numbers,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentCreateSupportedPaymentMethodsElem `json:"supported_payment_methods"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentCreateUrlsElem `json:"urls"`
}

type PaymentagentCreateCodeOfConductApproval int

var enumValues_PaymentagentCreateCodeOfConductApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateCodeOfConductApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentCreateCodeOfConductApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentCreateCodeOfConductApproval, v)
	}
	*j = PaymentagentCreateCodeOfConductApproval(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentCreatePassthrough map[string]interface{}

type PaymentagentCreatePaymentagentCreate int

var enumValues_PaymentagentCreatePaymentagentCreate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreatePaymentagentCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentCreatePaymentagentCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentCreatePaymentagentCreate, v)
	}
	*j = PaymentagentCreatePaymentagentCreate(v)
	return nil
}

type PaymentagentCreatePhoneNumbersElem struct {
	// A phone number
	PhoneNumber string `json:"phone_number"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreatePhoneNumbersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["phone_number"]; raw != nil && !ok {
		return fmt.Errorf("field phone_number in PaymentagentCreatePhoneNumbersElem: required")
	}
	type Plain PaymentagentCreatePhoneNumbersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreatePhoneNumbersElem(plain)
	return nil
}

type PaymentagentCreateSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod string `json:"payment_method"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateSupportedPaymentMethodsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["payment_method"]; raw != nil && !ok {
		return fmt.Errorf("field payment_method in PaymentagentCreateSupportedPaymentMethodsElem: required")
	}
	type Plain PaymentagentCreateSupportedPaymentMethodsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateSupportedPaymentMethodsElem(plain)
	return nil
}

type PaymentagentCreateUrlsElem struct {
	// A webpage or website's URL.
	Url string `json:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreateUrlsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["url"]; raw != nil && !ok {
		return fmt.Errorf("field url in PaymentagentCreateUrlsElem: required")
	}
	type Plain PaymentagentCreateUrlsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreateUrlsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["code_of_conduct_approval"]; raw != nil && !ok {
		return fmt.Errorf("field code_of_conduct_approval in PaymentagentCreate: required")
	}
	if _, ok := raw["commission_deposit"]; raw != nil && !ok {
		return fmt.Errorf("field commission_deposit in PaymentagentCreate: required")
	}
	if _, ok := raw["commission_withdrawal"]; raw != nil && !ok {
		return fmt.Errorf("field commission_withdrawal in PaymentagentCreate: required")
	}
	if _, ok := raw["email"]; raw != nil && !ok {
		return fmt.Errorf("field email in PaymentagentCreate: required")
	}
	if _, ok := raw["information"]; raw != nil && !ok {
		return fmt.Errorf("field information in PaymentagentCreate: required")
	}
	if _, ok := raw["payment_agent_name"]; raw != nil && !ok {
		return fmt.Errorf("field payment_agent_name in PaymentagentCreate: required")
	}
	if _, ok := raw["paymentagent_create"]; raw != nil && !ok {
		return fmt.Errorf("field paymentagent_create in PaymentagentCreate: required")
	}
	if _, ok := raw["supported_payment_methods"]; raw != nil && !ok {
		return fmt.Errorf("field supported_payment_methods in PaymentagentCreate: required")
	}
	if _, ok := raw["urls"]; raw != nil && !ok {
		return fmt.Errorf("field urls in PaymentagentCreate: required")
	}
	type Plain PaymentagentCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentCreate(plain)
	return nil
}
