// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Create maltainvest account Receive
type NewAccountMaltainvestResp struct {
	// Echo of the request made.
	EchoReq NewAccountMaltainvestRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountMaltainvestRespMsgType `json:"msg_type"`

	// New `maltainvest` account details
	NewAccountMaltainvest *NewAccountMaltainvestRespNewAccountMaltainvest `json:"new_account_maltainvest,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountMaltainvestRespEchoReq map[string]interface{}

type NewAccountMaltainvestRespMsgType string

const NewAccountMaltainvestRespMsgTypeNewAccountMaltainvest NewAccountMaltainvestRespMsgType = "new_account_maltainvest"

var enumValues_NewAccountMaltainvestRespMsgType = []interface{}{
	"new_account_maltainvest",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRespMsgType, v)
	}
	*j = NewAccountMaltainvestRespMsgType(v)
	return nil
}

// New `maltainvest` account details
type NewAccountMaltainvestRespNewAccountMaltainvest struct {
	// Client ID of new `maltainvest` account
	ClientId string `json:"client_id"`

	// Currency of an account
	Currency *string `json:"currency,omitempty"`

	// Currency type against the currency
	CurrencyType *string `json:"currency_type,omitempty"`

	// Landing company full name
	LandingCompany string `json:"landing_company"`

	// Landing company shortcode
	LandingCompanyShort *string `json:"landing_company_short,omitempty"`

	// Landing company shortcode
	LandingCompanyShortcode *string `json:"landing_company_shortcode,omitempty"`

	// OAuth token for client's login session
	OauthToken string `json:"oauth_token"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRespNewAccountMaltainvest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["client_id"]; raw != nil && !ok {
		return fmt.Errorf("field client_id in NewAccountMaltainvestRespNewAccountMaltainvest: required")
	}
	if _, ok := raw["landing_company"]; raw != nil && !ok {
		return fmt.Errorf("field landing_company in NewAccountMaltainvestRespNewAccountMaltainvest: required")
	}
	if _, ok := raw["oauth_token"]; raw != nil && !ok {
		return fmt.Errorf("field oauth_token in NewAccountMaltainvestRespNewAccountMaltainvest: required")
	}
	type Plain NewAccountMaltainvestRespNewAccountMaltainvest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountMaltainvestRespNewAccountMaltainvest(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountMaltainvestResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountMaltainvestResp: required")
	}
	type Plain NewAccountMaltainvestResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountMaltainvestResp(plain)
	return nil
}
