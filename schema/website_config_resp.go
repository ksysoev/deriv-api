// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// All config related settings.
type WebsiteConfigResp struct {
	// Echo of the request made.
	EchoReq WebsiteConfigRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType WebsiteConfigRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *WebsiteConfigRespSubscription `json:"subscription,omitempty"`

	// Server status and other information regarding general settings
	WebsiteConfig *WebsiteConfigRespWebsiteConfig `json:"website_config,omitempty"`
}

// Echo of the request made.
type WebsiteConfigRespEchoReq map[string]interface{}

type WebsiteConfigRespMsgType string

const WebsiteConfigRespMsgTypeWebsiteConfig WebsiteConfigRespMsgType = "website_config"

var enumValues_WebsiteConfigRespMsgType = []interface{}{
	"website_config",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteConfigRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteConfigRespMsgType, v)
	}
	*j = WebsiteConfigRespMsgType(v)
	return nil
}

// For subscription requests only.
type WebsiteConfigRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in WebsiteConfigRespSubscription: required")
	}
	type Plain WebsiteConfigRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteConfigRespSubscription(plain)
	return nil
}

// Server status and other information regarding general settings
type WebsiteConfigRespWebsiteConfig struct {
	// Available currencies and their information
	CurrenciesConfig WebsiteConfigRespWebsiteConfigCurrenciesConfig `json:"currencies_config"`

	// Feature flags related to the website/server for various features and options:
	//  - 'signup_with_optional_email_verification': Allow signup with optional email
	// verification.
	FeatureFlags []string `json:"feature_flags,omitempty"`

	// Payments Agents system settings.
	PaymentAgents *WebsiteConfigRespWebsiteConfigPaymentAgents `json:"payment_agents,omitempty"`

	// Provides codes for languages supported.
	SupportedLanguages []string `json:"supported_languages,omitempty"`

	// Latest terms and conditions version.
	TermsConditionsVersion *string `json:"terms_conditions_version,omitempty"`
}

// Available currencies and their information
type WebsiteConfigRespWebsiteConfigCurrenciesConfig map[string]interface{}

// Payments Agents system settings.
type WebsiteConfigRespWebsiteConfigPaymentAgents struct {
	// Initial deposit requirement per country.
	InitialDepositPerCountry WebsiteConfigRespWebsiteConfigPaymentAgentsInitialDepositPerCountry `json:"initial_deposit_per_country"`
}

// Initial deposit requirement per country.
type WebsiteConfigRespWebsiteConfigPaymentAgentsInitialDepositPerCountry map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigRespWebsiteConfigPaymentAgents) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["initial_deposit_per_country"]; raw != nil && !ok {
		return fmt.Errorf("field initial_deposit_per_country in WebsiteConfigRespWebsiteConfigPaymentAgents: required")
	}
	type Plain WebsiteConfigRespWebsiteConfigPaymentAgents
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteConfigRespWebsiteConfigPaymentAgents(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigRespWebsiteConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["currencies_config"]; raw != nil && !ok {
		return fmt.Errorf("field currencies_config in WebsiteConfigRespWebsiteConfig: required")
	}
	type Plain WebsiteConfigRespWebsiteConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteConfigRespWebsiteConfig(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in WebsiteConfigResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in WebsiteConfigResp: required")
	}
	type Plain WebsiteConfigResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteConfigResp(plain)
	return nil
}
