// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This call initiates the state machine for account creation process
type PartnerAccountCreation struct {
	// [Optional] Within 100 characters.
	AddressCity *string `json:"address_city,omitempty"`

	// Within 70 characters, with no leading whitespaces and may contain
	// letters/numbers and/or any of following characters '.,:;()@#/-
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// [Optional] Within 70 characters.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Within 20 characters and may not contain '+'.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Possible value receive from `states_list` call.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] The phone's calling country code.
	CallingCountryCode *string `json:"calling_country_code,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code.
	Citizen *string `json:"citizen,omitempty"`

	// [Optional] Company name. Only applicable for partners of type company.
	CompanyName *string `json:"company_name,omitempty"`

	// [Optional] Company registration number. Only applicable for partners of type
	// company.
	CompanyRegistrationNo *string `json:"company_registration_no,omitempty"`

	// [Optional] To set currency of the account. List of supported currencies can be
	// acquired with `payout_currencies` call.
	Currency *string `json:"currency,omitempty"`

	// Date of birth format: `yyyy-mm-dd`.
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// Email address
	Email *string `json:"email,omitempty"`

	// [Optional] Indicates client's self-declaration of FATCA.
	FatcaDeclaration *PartnerAccountCreationFatcaDeclaration `json:"fatca_declaration,omitempty"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName *string `json:"first_name,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *PartnerAccountCreationLandingCompanyShort `json:"landing_company_short,omitempty"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName *string `json:"last_name,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA
	// (Politically Exposed Person/Relatives and Close Associates).
	NonPepDeclaration *int `json:"non_pep_declaration,omitempty"`

	// Must be `1`
	PartnerAccountCreation PartnerAccountCreationPartnerAccountCreation `json:"partner_account_creation"`

	// Defines whether this partner is an individual or a company. Only applicable for
	// partners
	PartnerType *PartnerAccountCreationPartnerType `json:"partner_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PartnerAccountCreationPassthrough `json:"passthrough,omitempty"`

	// [Optional] Starting with `+` followed by 8-35 digits, allowing hyphens or
	// space.
	Phone *string `json:"phone,omitempty"`

	// [Optional] Name  of the provider platform.
	Provider *PartnerAccountCreationProvider `json:"provider,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// 2-letter country code, possible value receive from `residence_list` call.
	Residence *string `json:"residence,omitempty"`

	// Accept any value in enum list.
	Salutation PartnerAccountCreationSalutation `json:"salutation"`

	// The tnc acceptance status of the user.
	TncAcceptance *PartnerAccountCreationTncAcceptance `json:"tnc_acceptance,omitempty"`

	// Partner's Website URI/Promotional Platform
	Website *string `json:"website,omitempty"`
}

type PartnerAccountCreationFatcaDeclaration int

var enumValues_PartnerAccountCreationFatcaDeclaration = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationFatcaDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationFatcaDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationFatcaDeclaration, v)
	}
	*j = PartnerAccountCreationFatcaDeclaration(v)
	return nil
}

type PartnerAccountCreationLandingCompanyShort string

const PartnerAccountCreationLandingCompanyShortMaltainvest PartnerAccountCreationLandingCompanyShort = "maltainvest"
const PartnerAccountCreationLandingCompanyShortSvg PartnerAccountCreationLandingCompanyShort = "svg"

var enumValues_PartnerAccountCreationLandingCompanyShort = []interface{}{
	"maltainvest",
	"svg",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationLandingCompanyShort, v)
	}
	*j = PartnerAccountCreationLandingCompanyShort(v)
	return nil
}

type PartnerAccountCreationPartnerAccountCreation int

var enumValues_PartnerAccountCreationPartnerAccountCreation = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationPartnerAccountCreation) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationPartnerAccountCreation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationPartnerAccountCreation, v)
	}
	*j = PartnerAccountCreationPartnerAccountCreation(v)
	return nil
}

type PartnerAccountCreationPartnerType string

const PartnerAccountCreationPartnerTypeCompany PartnerAccountCreationPartnerType = "company"
const PartnerAccountCreationPartnerTypeIndividual PartnerAccountCreationPartnerType = "individual"

var enumValues_PartnerAccountCreationPartnerType = []interface{}{
	"individual",
	"company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationPartnerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationPartnerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationPartnerType, v)
	}
	*j = PartnerAccountCreationPartnerType(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PartnerAccountCreationPassthrough map[string]interface{}

type PartnerAccountCreationProvider string

const PartnerAccountCreationProviderDynamicworks PartnerAccountCreationProvider = "dynamicworks"
const PartnerAccountCreationProviderMyaffiliate PartnerAccountCreationProvider = "myaffiliate"

var enumValues_PartnerAccountCreationProvider = []interface{}{
	"myaffiliate",
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationProvider, v)
	}
	*j = PartnerAccountCreationProvider(v)
	return nil
}

type PartnerAccountCreationSalutation string

const PartnerAccountCreationSalutationMiss PartnerAccountCreationSalutation = "Miss"
const PartnerAccountCreationSalutationMr PartnerAccountCreationSalutation = "Mr"
const PartnerAccountCreationSalutationMrs PartnerAccountCreationSalutation = "Mrs"
const PartnerAccountCreationSalutationMs PartnerAccountCreationSalutation = "Ms"

var enumValues_PartnerAccountCreationSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationSalutation, v)
	}
	*j = PartnerAccountCreationSalutation(v)
	return nil
}

type PartnerAccountCreationTncAcceptance int

var enumValues_PartnerAccountCreationTncAcceptance = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreationTncAcceptance) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountCreationTncAcceptance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountCreationTncAcceptance, v)
	}
	*j = PartnerAccountCreationTncAcceptance(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountCreation) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["partner_account_creation"]; raw != nil && !ok {
		return fmt.Errorf("field partner_account_creation in PartnerAccountCreation: required")
	}
	if _, ok := raw["salutation"]; raw != nil && !ok {
		return fmt.Errorf("field salutation in PartnerAccountCreation: required")
	}
	type Plain PartnerAccountCreation
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerAccountCreation(plain)
	return nil
}
