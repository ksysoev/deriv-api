// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A summary of account statement is received
type StatementResp struct {
	// Echo of the request made.
	EchoReq StatementRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType StatementRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Account statement.
	Statement *StatementRespStatement `json:"statement,omitempty"`
}

// Echo of the request made.
type StatementRespEchoReq map[string]interface{}

type StatementRespMsgType string

const StatementRespMsgTypeStatement StatementRespMsgType = "statement"

var enumValues_StatementRespMsgType = []interface{}{
	"statement",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementRespMsgType, v)
	}
	*j = StatementRespMsgType(v)
	return nil
}

// Account statement.
type StatementRespStatement struct {
	// Number of transactions returned in this call
	Count *float64 `json:"count,omitempty"`

	// Array of returned transactions
	Transactions []StatementRespStatementTransactionsElem `json:"transactions,omitempty"`
}

type StatementRespStatementTransactionsElem struct {
	// It is the type of action.
	ActionType *StatementRespStatementTransactionsElemActionType `json:"action_type,omitempty"`

	// It is the amount of transaction.
	Amount *float64 `json:"amount,omitempty"`

	// ID of the application where this contract was purchased.
	AppId *int `json:"app_id,omitempty"`

	// It is the remaining balance.
	BalanceAfter *float64 `json:"balance_after,omitempty"`

	// It is the contract ID.
	ContractId *int `json:"contract_id,omitempty"`

	// Contains details about fees used for transfer. It is present only when action
	// type is transfer.
	Fees *StatementRespStatementTransactionsElemFees `json:"fees,omitempty"`

	// Contains details of account from which amount was transferred. It is present
	// only when action type is transfer.
	From *StatementRespStatementTransactionsElemFrom `json:"from,omitempty"`

	// The description of contract purchased if description is set to `1`.
	Longcode *string `json:"longcode,omitempty"`

	// Payout price
	Payout *float64 `json:"payout,omitempty"`

	// Time at which contract was purchased, present only for sell transaction
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// Internal transaction identifier for the corresponding buy transaction ( set
	// only for contract selling )
	ReferenceId *int `json:"reference_id,omitempty"`

	// Compact description of the contract purchased if description is set to `1`.
	Shortcode *string `json:"shortcode,omitempty"`

	// Contains details of account to which amount was transferred. It is present only
	// when action type is transfer.
	To *StatementRespStatementTransactionsElemTo `json:"to,omitempty"`

	// It is the transaction ID. In statement every contract (buy or sell) and every
	// payment has a unique ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// It is the time of transaction.
	TransactionTime *int `json:"transaction_time,omitempty"`

	// Additional withdrawal details such as typical processing times, if description
	// is set to `1`.
	WithdrawalDetails *string `json:"withdrawal_details,omitempty"`
}

type StatementRespStatementTransactionsElemActionType string

const StatementRespStatementTransactionsElemActionTypeAdjustment StatementRespStatementTransactionsElemActionType = "adjustment"
const StatementRespStatementTransactionsElemActionTypeBuy StatementRespStatementTransactionsElemActionType = "buy"
const StatementRespStatementTransactionsElemActionTypeDeposit StatementRespStatementTransactionsElemActionType = "deposit"
const StatementRespStatementTransactionsElemActionTypeHold StatementRespStatementTransactionsElemActionType = "hold"
const StatementRespStatementTransactionsElemActionTypeRelease StatementRespStatementTransactionsElemActionType = "release"
const StatementRespStatementTransactionsElemActionTypeSell StatementRespStatementTransactionsElemActionType = "sell"
const StatementRespStatementTransactionsElemActionTypeTransfer StatementRespStatementTransactionsElemActionType = "transfer"
const StatementRespStatementTransactionsElemActionTypeVirtualCredit StatementRespStatementTransactionsElemActionType = "virtual_credit"
const StatementRespStatementTransactionsElemActionTypeWithdrawal StatementRespStatementTransactionsElemActionType = "withdrawal"

var enumValues_StatementRespStatementTransactionsElemActionType = []interface{}{
	"buy",
	"sell",
	"deposit",
	"withdrawal",
	"hold",
	"release",
	"adjustment",
	"virtual_credit",
	"transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementRespStatementTransactionsElemActionType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StatementRespStatementTransactionsElemActionType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StatementRespStatementTransactionsElemActionType, v)
	}
	*j = StatementRespStatementTransactionsElemActionType(v)
	return nil
}

// Contains details about fees used for transfer. It is present only when action
// type is transfer.
type StatementRespStatementTransactionsElemFees struct {
	// Fees amount
	Amount *float64 `json:"amount,omitempty"`

	// Fees currency
	Currency *string `json:"currency,omitempty"`

	// Minimum amount of fees
	Minimum *float64 `json:"minimum,omitempty"`

	// Fees percentage
	Percentage *float64 `json:"percentage,omitempty"`
}

// Contains details of account from which amount was transferred. It is present
// only when action type is transfer.
type StatementRespStatementTransactionsElemFrom struct {
	// Login id of the account from which money was transferred.
	Loginid *string `json:"loginid,omitempty"`
}

// Contains details of account to which amount was transferred. It is present only
// when action type is transfer.
type StatementRespStatementTransactionsElemTo struct {
	// Login id of the account to which money was transferred.
	Loginid *string `json:"loginid,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatementResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in StatementResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in StatementResp: required")
	}
	type Plain StatementResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StatementResp(plain)
	return nil
}
