// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type WebsiteStatusPassthrough map[string]interface{}

type WebsiteStatusSubscribe int

var enumValues_WebsiteStatusSubscribe = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusSubscribe, v)
	}
	*j = WebsiteStatusSubscribe(v)
	return nil
}

type WebsiteStatusWebsiteStatus int

var enumValues_WebsiteStatusWebsiteStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatusWebsiteStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteStatusWebsiteStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteStatusWebsiteStatus, v)
	}
	*j = WebsiteStatusWebsiteStatus(v)
	return nil
}

// Request server status.
type WebsiteStatus struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough WebsiteStatusPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] `1` to stream the server/website status updates.
	Subscribe *WebsiteStatusSubscribe `json:"subscribe,omitempty"`

	// Must be `1`
	WebsiteStatus WebsiteStatusWebsiteStatus `json:"website_status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["website_status"]; !ok || v == nil {
		return fmt.Errorf("field website_status: required")
	}
	type Plain WebsiteStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteStatus(plain)
	return nil
}
