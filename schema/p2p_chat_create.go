// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

type P2PChatCreateP2PChatCreate int

var enumValues_P2PChatCreateP2PChatCreate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreateP2PChatCreate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PChatCreateP2PChatCreate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PChatCreateP2PChatCreate, v)
	}
	*j = P2PChatCreateP2PChatCreate(v)
	return nil
}

// Creates a P2P chat for the specified order.
type P2PChatCreate struct {
	// The unique identifier for the order to create the chat for.
	OrderId string `json:"order_id"`

	// Must be 1
	P2PChatCreate P2PChatCreateP2PChatCreate `json:"p2p_chat_create"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough P2PChatCreatePassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type P2PChatCreatePassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PChatCreate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["order_id"]; !ok || v == nil {
		return fmt.Errorf("field order_id: required")
	}
	if v, ok := raw["p2p_chat_create"]; !ok || v == nil {
		return fmt.Errorf("field p2p_chat_create: required")
	}
	type Plain P2PChatCreate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PChatCreate(plain)
	return nil
}
