// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve advertisers has/had trade with the current advertiser.
type P2PAdvertiserList struct {
	// [Optional] Search for advertiser by name. Partial matches will be returned.
	AdvertiserName *string `json:"advertiser_name,omitempty"`

	// [Optional] Used to return only blocked or unblocked partners
	IsBlocked *P2PAdvertiserListIsBlocked `json:"is_blocked,omitempty"`

	// [Optional] Used for paging.
	Limit int `json:"limit,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used for paging.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2PAdvertiserList P2PAdvertiserListP2PAdvertiserList `json:"p2p_advertiser_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserListPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] How the results are sorted.
	SortBy P2PAdvertiserListSortBy `json:"sort_by,omitempty"`

	// [Optional] Get all advertisers has/had trade.
	TradePartners *P2PAdvertiserListTradePartners `json:"trade_partners,omitempty"`
}

type P2PAdvertiserListIsBlocked int

var enumValues_P2PAdvertiserListIsBlocked = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListIsBlocked, v)
	}
	*j = P2PAdvertiserListIsBlocked(v)
	return nil
}

type P2PAdvertiserListP2PAdvertiserList int

var enumValues_P2PAdvertiserListP2PAdvertiserList = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListP2PAdvertiserList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListP2PAdvertiserList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListP2PAdvertiserList, v)
	}
	*j = P2PAdvertiserListP2PAdvertiserList(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserListPassthrough map[string]interface{}

type P2PAdvertiserListSortBy string

const P2PAdvertiserListSortByCreatedTime P2PAdvertiserListSortBy = "created_time"
const P2PAdvertiserListSortByLastInteractionTime P2PAdvertiserListSortBy = "last_interaction_time"
const P2PAdvertiserListSortByName P2PAdvertiserListSortBy = "name"

var enumValues_P2PAdvertiserListSortBy = []interface{}{
	"name",
	"created_time",
	"last_interaction_time",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListSortBy) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListSortBy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListSortBy, v)
	}
	*j = P2PAdvertiserListSortBy(v)
	return nil
}

type P2PAdvertiserListTradePartners int

var enumValues_P2PAdvertiserListTradePartners = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserListTradePartners) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserListTradePartners {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserListTradePartners, v)
	}
	*j = P2PAdvertiserListTradePartners(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["p2p_advertiser_list"]; raw != nil && !ok {
		return fmt.Errorf("field p2p_advertiser_list in P2PAdvertiserList: required")
	}
	type Plain P2PAdvertiserList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50.0
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0.0
	}
	if v, ok := raw["sort_by"]; !ok || v == nil {
		plain.SortBy = "last_interaction_time"
	}
	*j = P2PAdvertiserList(plain)
	return nil
}
