// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Response for checking if name and date of birth match an existing account.
type NewAccountWalletCheckDuplicatePhoneAndDobResp struct {
	// Echo of the request made.
	EchoReq NewAccountWalletCheckDuplicatePhoneAndDobRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType `json:"msg_type"`

	// The result of checking for duplicate name and date of birth
	NewAccountWalletCheckDuplicatePhoneAndDob *NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob `json:"new_account_wallet_check_duplicate_phone_and_dob,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountWalletCheckDuplicatePhoneAndDobRespEchoReq map[string]interface{}

type NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType string

const NewAccountWalletCheckDuplicatePhoneAndDobRespMsgTypeNewAccountWalletCheckDuplicatePhoneAndDob NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType = "new_account_wallet_check_duplicate_phone_and_dob"

var enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType = []interface{}{
	"new_account_wallet_check_duplicate_phone_and_dob",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType, v)
	}
	*j = NewAccountWalletCheckDuplicatePhoneAndDobRespMsgType(v)
	return nil
}

// The result of checking for duplicate name and date of birth
type NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob struct {
	// 1 if a matching account was found, 0 if not
	HasDuplicate NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate `json:"has_duplicate"`
}

type NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate int

var enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate, v)
	}
	*j = NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDobHasDuplicate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["has_duplicate"]; raw != nil && !ok {
		return fmt.Errorf("field has_duplicate in NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob: required")
	}
	type Plain NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountWalletCheckDuplicatePhoneAndDobRespNewAccountWalletCheckDuplicatePhoneAndDob(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletCheckDuplicatePhoneAndDobResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountWalletCheckDuplicatePhoneAndDobResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountWalletCheckDuplicatePhoneAndDobResp: required")
	}
	type Plain NewAccountWalletCheckDuplicatePhoneAndDobResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountWalletCheckDuplicatePhoneAndDobResp(plain)
	return nil
}
