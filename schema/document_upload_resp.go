// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Details of the uploaded documents.
type DocumentUploadRespDocumentUpload struct {
	// Current call type, add this to your binary payload metadata
	CallType float64 `json:"call_type"`

	// Hex encoded SHA-1 checksum of the file
	Checksum *string `json:"checksum,omitempty"`

	// 2-letter country code
	DocumentIssuingCountry *string `json:"document_issuing_country,omitempty"`

	// File size
	Size *float64 `json:"size,omitempty"`

	// Upload status (`success` or `failure`)
	Status *string `json:"status,omitempty"`

	// Current upload ID, add this to your binary payload metadata
	UploadId float64 `json:"upload_id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRespDocumentUpload) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["call_type"]; !ok || v == nil {
		return fmt.Errorf("field call_type in DocumentUploadRespDocumentUpload: required")
	}
	if v, ok := raw["upload_id"]; !ok || v == nil {
		return fmt.Errorf("field upload_id in DocumentUploadRespDocumentUpload: required")
	}
	type Plain DocumentUploadRespDocumentUpload
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadRespDocumentUpload(plain)
	return nil
}

// Echo of the request made.
type DocumentUploadRespEchoReq map[string]interface{}

type DocumentUploadRespMsgType string

var enumValues_DocumentUploadRespMsgType = []interface{}{
	"document_upload",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DocumentUploadRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DocumentUploadRespMsgType, v)
	}
	*j = DocumentUploadRespMsgType(v)
	return nil
}

// Receive details of uploaded authentication documents
type DocumentUploadResp struct {
	// Details of the uploaded documents.
	DocumentUpload *DocumentUploadRespDocumentUpload `json:"document_upload,omitempty"`

	// Echo of the request made.
	EchoReq DocumentUploadRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType DocumentUploadRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const DocumentUploadRespMsgTypeDocumentUpload DocumentUploadRespMsgType = "document_upload"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DocumentUploadResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in DocumentUploadResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in DocumentUploadResp: required")
	}
	type Plain DocumentUploadResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DocumentUploadResp(plain)
	return nil
}
