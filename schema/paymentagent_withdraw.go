// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

type PaymentagentWithdrawDryRun int

var enumValues_PaymentagentWithdrawDryRun = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawDryRun, v)
	}
	*j = PaymentagentWithdrawDryRun(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type PaymentagentWithdrawPassthrough map[string]interface{}

type PaymentagentWithdrawPaymentagentWithdraw int

var enumValues_PaymentagentWithdrawPaymentagentWithdraw = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawPaymentagentWithdraw) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawPaymentagentWithdraw {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawPaymentagentWithdraw, v)
	}
	*j = PaymentagentWithdrawPaymentagentWithdraw(v)
	return nil
}

// Initiate a withdrawal to an approved Payment Agent.
type PaymentagentWithdraw struct {
	// The amount to withdraw to the payment agent.
	Amount float64 `json:"amount"`

	// The currency code.
	Currency string `json:"currency"`

	// [Optional] Remarks about the withdraw. Only letters, numbers, space, period,
	// comma, - ' are allowed.
	Description *string `json:"description,omitempty"`

	// [Optional] If set to 1, just do validation.
	DryRun *PaymentagentWithdrawDryRun `json:"dry_run,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough PaymentagentWithdrawPassthrough `json:"passthrough,omitempty"`

	// The payment agent loginid received from the `paymentagent_list` call.
	PaymentagentLoginid string `json:"paymentagent_loginid"`

	// Must be `1`
	PaymentagentWithdraw PaymentagentWithdrawPaymentagentWithdraw `json:"paymentagent_withdraw"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdraw) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["paymentagent_loginid"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_loginid: required")
	}
	if v, ok := raw["paymentagent_withdraw"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_withdraw: required")
	}
	if v, ok := raw["verification_code"]; !ok || v == nil {
		return fmt.Errorf("field verification_code: required")
	}
	type Plain PaymentagentWithdraw
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdraw(plain)
	return nil
}
