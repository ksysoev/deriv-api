// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type BalanceBalance int

var enumValues_BalanceBalance = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceBalance) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BalanceBalance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BalanceBalance, v)
	}
	*j = BalanceBalance(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type BalancePassthrough map[string]interface{}

type BalanceSubscribe int

var enumValues_BalanceSubscribe = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BalanceSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BalanceSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BalanceSubscribe, v)
	}
	*j = BalanceSubscribe(v)
	return nil
}

// Get user account balance
type Balance struct {
	// [Optional] If set to `all`, return the balances of all accounts one by one; if
	// set to `current`, return the balance of current account; if set as an account
	// id, return the balance of that account.
	Account string `json:"account,omitempty"`

	// Must be `1`
	Balance BalanceBalance `json:"balance"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough BalancePassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever the balance changes.
	Subscribe *BalanceSubscribe `json:"subscribe,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Balance) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance"]; !ok || v == nil {
		return fmt.Errorf("field balance in Balance: required")
	}
	type Plain Balance
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["account"]; !ok || v == nil {
		plain.Account = "current"
	}
	*j = Balance(plain)
	return nil
}
