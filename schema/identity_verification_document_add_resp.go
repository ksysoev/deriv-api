// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Adds document information such as issuing country, id and type for identity
// verification processes.
type IdentityVerificationDocumentAddResp struct {
	// Echo of the request made.
	EchoReq IdentityVerificationDocumentAddRespEchoReq `json:"echo_req"`

	// 1 on success
	IdentityVerificationDocumentAdd *IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd `json:"identity_verification_document_add,omitempty"`

	// Action name of the request made.
	MsgType IdentityVerificationDocumentAddRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type IdentityVerificationDocumentAddRespEchoReq map[string]interface{}

type IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd int

var enumValues_IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd, v)
	}
	*j = IdentityVerificationDocumentAddRespIdentityVerificationDocumentAdd(v)
	return nil
}

type IdentityVerificationDocumentAddRespMsgType string

const IdentityVerificationDocumentAddRespMsgTypeIdentityVerificationDocumentAdd IdentityVerificationDocumentAddRespMsgType = "identity_verification_document_add"

var enumValues_IdentityVerificationDocumentAddRespMsgType = []interface{}{
	"identity_verification_document_add",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdentityVerificationDocumentAddRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdentityVerificationDocumentAddRespMsgType, v)
	}
	*j = IdentityVerificationDocumentAddRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdentityVerificationDocumentAddResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in IdentityVerificationDocumentAddResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in IdentityVerificationDocumentAddResp: required")
	}
	type Plain IdentityVerificationDocumentAddResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = IdentityVerificationDocumentAddResp(plain)
	return nil
}
