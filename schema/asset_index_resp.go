// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type AssetIndexRespEchoReq map[string]interface{}

type AssetIndexRespMsgType string

var enumValues_AssetIndexRespMsgType = []interface{}{
	"asset_index",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexRespMsgType, v)
	}
	*j = AssetIndexRespMsgType(v)
	return nil
}

// A message with Asset Index
type AssetIndexResp struct {
	// List of underlyings by their display name and symbol followed by their
	// available contract types and duration boundaries.
	AssetIndex []interface{} `json:"asset_index,omitempty"`

	// Echo of the request made.
	EchoReq AssetIndexRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AssetIndexRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const AssetIndexRespMsgTypeAssetIndex AssetIndexRespMsgType = "asset_index"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain AssetIndexResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AssetIndexResp(plain)
	return nil
}
