// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type AuthorizeAddToLoginHistory int

var enumValues_AuthorizeAddToLoginHistory = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AuthorizeAddToLoginHistory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AuthorizeAddToLoginHistory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AuthorizeAddToLoginHistory, v)
	}
	*j = AuthorizeAddToLoginHistory(v)
	return nil
}

// Authorize current WebSocket session to act on behalf of the owner of a given
// token. Must precede requests that need to access client account, for example
// purchasing and selling contracts or viewing portfolio.
type Authorize struct {
	// [Optional] Send this when you use api tokens for authorization and want to
	// track activity using `login_history` call.
	AddToLoginHistory AuthorizeAddToLoginHistory `json:"add_to_login_history,omitempty"`

	// Authentication token. May be retrieved from
	// https://www.binary.com/en/user/security/api_tokenws.html
	Authorize string `json:"authorize"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AuthorizePassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Additional Authentication tokens of authorized user that may be used in this
	// session. Upto 10 tokens.
	Tokens []string `json:"tokens,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AuthorizePassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Authorize) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["authorize"]; !ok || v == nil {
		return fmt.Errorf("field authorize in Authorize: required")
	}
	type Plain Authorize
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["add_to_login_history"]; !ok || v == nil {
		plain.AddToLoginHistory = 0.0
	}
	if len(plain.Tokens) > 10 {
		return fmt.Errorf("field %s length: must be <= %d", "tokens", 10)
	}
	*j = Authorize(plain)
	return nil
}
