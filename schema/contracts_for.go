// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// For a given symbol, get the list of currently available contracts, and the
// latest barrier and duration limits for each contract.
type ContractsFor struct {
	// The short symbol name (obtained from `active_symbols` call).
	ContractsFor string `json:"contracts_for"`

	// [Optional] Currency of the contract's stake and payout (obtained from
	// `payout_currencies` call).
	Currency string `json:"currency,omitempty"`

	// Deprecated - Replaced by landing_company_short.
	LandingCompany ContractsForLandingCompany `json:"landing_company,omitempty"`

	// [Optional] Indicates which landing company to get a list of contracts for. If
	// you are logged in, your account's landing company will override this field.
	// Note that when landing_company_short is set to 'virtual', landing_company will
	// take precendce until the deprecated field is removed from the api.
	LandingCompanyShort ContractsForLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractsForPassthrough `json:"passthrough,omitempty"`

	// [Optional] If you specify this field, only contracts tradable through that
	// contract type will be returned.
	ProductType *ContractsForProductType `json:"product_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ContractsForLandingCompany string

const ContractsForLandingCompanyIom ContractsForLandingCompany = "iom"
const ContractsForLandingCompanyMalta ContractsForLandingCompany = "malta"
const ContractsForLandingCompanyMaltainvest ContractsForLandingCompany = "maltainvest"

type ContractsForLandingCompanyShort string

const ContractsForLandingCompanyShortIom ContractsForLandingCompanyShort = "iom"
const ContractsForLandingCompanyShortMalta ContractsForLandingCompanyShort = "malta"
const ContractsForLandingCompanyShortMaltainvest ContractsForLandingCompanyShort = "maltainvest"
const ContractsForLandingCompanyShortSvg ContractsForLandingCompanyShort = "svg"
const ContractsForLandingCompanyShortVanuatu ContractsForLandingCompanyShort = "vanuatu"
const ContractsForLandingCompanyShortVirtual ContractsForLandingCompanyShort = "virtual"
const ContractsForLandingCompanySvg ContractsForLandingCompany = "svg"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForLandingCompanyShort, v)
	}
	*j = ContractsForLandingCompanyShort(v)
	return nil
}

const ContractsForLandingCompanyVanuatu ContractsForLandingCompany = "vanuatu"
const ContractsForLandingCompanyVirtual ContractsForLandingCompany = "virtual"

var enumValues_ContractsForLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForLandingCompany, v)
	}
	*j = ContractsForLandingCompany(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractsForPassthrough map[string]interface{}

type ContractsForProductType string

var enumValues_ContractsForProductType = []interface{}{
	"basic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForProductType, v)
	}
	*j = ContractsForProductType(v)
	return nil
}

const ContractsForProductTypeBasic ContractsForProductType = "basic"

var enumValues_ContractsForLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsFor) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contracts_for"]; !ok || v == nil {
		return fmt.Errorf("field contracts_for in ContractsFor: required")
	}
	type Plain ContractsFor
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		plain.Currency = "USD"
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		plain.LandingCompany = "virtual"
	}
	if v, ok := raw["landing_company_short"]; !ok || v == nil {
		plain.LandingCompanyShort = "virtual"
	}
	*j = ContractsFor(plain)
	return nil
}
