// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Create virtual-money account
type NewAccountVirtualResp struct {
	// Echo of the request made.
	EchoReq NewAccountVirtualRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountVirtualRespMsgType `json:"msg_type"`

	// New virtual-money account details
	NewAccountVirtual *NewAccountVirtualRespNewAccountVirtual `json:"new_account_virtual,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountVirtualRespEchoReq map[string]interface{}

type NewAccountVirtualRespMsgType string

const NewAccountVirtualRespMsgTypeNewAccountVirtual NewAccountVirtualRespMsgType = "new_account_virtual"

var enumValues_NewAccountVirtualRespMsgType = []interface{}{
	"new_account_virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRespMsgType, v)
	}
	*j = NewAccountVirtualRespMsgType(v)
	return nil
}

// New virtual-money account details
type NewAccountVirtualRespNewAccountVirtual struct {
	// Account balance
	Balance float64 `json:"balance"`

	// ID of the new virtual-money account
	ClientId string `json:"client_id"`

	// Account currency
	Currency string `json:"currency"`

	// Email of the new virtual-money account
	Email string `json:"email"`

	// Oauth token for the client's login session (so that the user may be logged in
	// immediately)
	OauthToken string `json:"oauth_token"`

	// Refresh token to perform PTA, only for the first ever created account
	RefreshToken *string `json:"refresh_token,omitempty"`

	// Account type
	Type *NewAccountVirtualRespNewAccountVirtualType `json:"type,omitempty"`
}

type NewAccountVirtualRespNewAccountVirtualType string

const NewAccountVirtualRespNewAccountVirtualTypeTrading NewAccountVirtualRespNewAccountVirtualType = "trading"
const NewAccountVirtualRespNewAccountVirtualTypeWallet NewAccountVirtualRespNewAccountVirtualType = "wallet"

var enumValues_NewAccountVirtualRespNewAccountVirtualType = []interface{}{
	"trading",
	"wallet",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRespNewAccountVirtualType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountVirtualRespNewAccountVirtualType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountVirtualRespNewAccountVirtualType, v)
	}
	*j = NewAccountVirtualRespNewAccountVirtualType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualRespNewAccountVirtual) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["balance"]; raw != nil && !ok {
		return fmt.Errorf("field balance in NewAccountVirtualRespNewAccountVirtual: required")
	}
	if _, ok := raw["client_id"]; raw != nil && !ok {
		return fmt.Errorf("field client_id in NewAccountVirtualRespNewAccountVirtual: required")
	}
	if _, ok := raw["currency"]; raw != nil && !ok {
		return fmt.Errorf("field currency in NewAccountVirtualRespNewAccountVirtual: required")
	}
	if _, ok := raw["email"]; raw != nil && !ok {
		return fmt.Errorf("field email in NewAccountVirtualRespNewAccountVirtual: required")
	}
	if _, ok := raw["oauth_token"]; raw != nil && !ok {
		return fmt.Errorf("field oauth_token in NewAccountVirtualRespNewAccountVirtual: required")
	}
	type Plain NewAccountVirtualRespNewAccountVirtual
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountVirtualRespNewAccountVirtual(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountVirtualResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountVirtualResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountVirtualResp: required")
	}
	type Plain NewAccountVirtualResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountVirtualResp(plain)
	return nil
}
