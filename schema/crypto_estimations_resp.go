// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Latest cryptocurrency estimations.
type CryptoEstimationsResp struct {
	// Cryptocurrency estimations. E.g. Withdrawal fee estimations.
	CryptoEstimations CryptoEstimationsRespCryptoEstimations `json:"crypto_estimations,omitempty"`

	// Echo of the request made.
	EchoReq CryptoEstimationsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CryptoEstimationsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *CryptoEstimationsRespSubscription `json:"subscription,omitempty"`
}

// Cryptocurrency estimations. E.g. Withdrawal fee estimations.
type CryptoEstimationsRespCryptoEstimations map[string]interface{}

// Echo of the request made.
type CryptoEstimationsRespEchoReq map[string]interface{}

type CryptoEstimationsRespMsgType string

const CryptoEstimationsRespMsgTypeCryptoEstimations CryptoEstimationsRespMsgType = "crypto_estimations"

var enumValues_CryptoEstimationsRespMsgType = []interface{}{
	"crypto_estimations",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimationsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoEstimationsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoEstimationsRespMsgType, v)
	}
	*j = CryptoEstimationsRespMsgType(v)
	return nil
}

// For subscription requests only.
type CryptoEstimationsRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimationsRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in CryptoEstimationsRespSubscription: required")
	}
	type Plain CryptoEstimationsRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoEstimationsRespSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimationsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in CryptoEstimationsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in CryptoEstimationsResp: required")
	}
	type Plain CryptoEstimationsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoEstimationsResp(plain)
	return nil
}
