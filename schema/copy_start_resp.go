// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type CopyStartRespEchoReq map[string]interface{}

type CopyStartRespMsgType string

var enumValues_CopyStartRespMsgType = []interface{}{
	"copy_start",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStartRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopyStartRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopyStartRespMsgType, v)
	}
	*j = CopyStartRespMsgType(v)
	return nil
}

// A message with results is received
type CopyStartResp struct {
	// Copy start confirmation. Returns 1 is success.
	CopyStart *int `json:"copy_start,omitempty"`

	// Echo of the request made.
	EchoReq CopyStartRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopyStartRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const CopyStartRespMsgTypeCopyStart CopyStartRespMsgType = "copy_start"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStartResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in CopyStartResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in CopyStartResp: required")
	}
	type Plain CopyStartResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStartResp(plain)
	return nil
}
