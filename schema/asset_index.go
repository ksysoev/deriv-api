// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve a list of all available underlyings and the corresponding contract
// types and duration boundaries. If the user is logged in, only the assets
// available for that user's landing company will be returned.
type AssetIndex struct {
	// Must be `1`
	AssetIndex AssetIndexAssetIndex `json:"asset_index"`

	// Deprecated - replaced by landing_company_short.
	LandingCompany *AssetIndexLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *AssetIndexLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AssetIndexPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AssetIndexAssetIndex int

type AssetIndexLandingCompany string

const AssetIndexLandingCompanyIom AssetIndexLandingCompany = "iom"
const AssetIndexLandingCompanyMalta AssetIndexLandingCompany = "malta"
const AssetIndexLandingCompanyMaltainvest AssetIndexLandingCompany = "maltainvest"

type AssetIndexLandingCompanyShort string

const AssetIndexLandingCompanyShortIom AssetIndexLandingCompanyShort = "iom"
const AssetIndexLandingCompanyShortMalta AssetIndexLandingCompanyShort = "malta"
const AssetIndexLandingCompanyShortMaltainvest AssetIndexLandingCompanyShort = "maltainvest"
const AssetIndexLandingCompanyShortSvg AssetIndexLandingCompanyShort = "svg"
const AssetIndexLandingCompanyShortVanuatu AssetIndexLandingCompanyShort = "vanuatu"
const AssetIndexLandingCompanyShortVirtual AssetIndexLandingCompanyShort = "virtual"

var enumValues_AssetIndexLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexLandingCompanyShort, v)
	}
	*j = AssetIndexLandingCompanyShort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexAssetIndex) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexAssetIndex {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexAssetIndex, v)
	}
	*j = AssetIndexAssetIndex(v)
	return nil
}

const AssetIndexLandingCompanySvg AssetIndexLandingCompany = "svg"
const AssetIndexLandingCompanyVanuatu AssetIndexLandingCompany = "vanuatu"
const AssetIndexLandingCompanyVirtual AssetIndexLandingCompany = "virtual"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndexLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AssetIndexLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AssetIndexLandingCompany, v)
	}
	*j = AssetIndexLandingCompany(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AssetIndexPassthrough map[string]interface{}

var enumValues_AssetIndexAssetIndex = []interface{}{
	1,
}
var enumValues_AssetIndexLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AssetIndex) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["asset_index"]; !ok || v == nil {
		return fmt.Errorf("field asset_index in AssetIndex: required")
	}
	type Plain AssetIndex
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AssetIndex(plain)
	return nil
}
