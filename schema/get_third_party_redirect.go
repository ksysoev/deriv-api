// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get Third Party Redirect URL for sso login.
type GetThirdPartyRedirect struct {
	// Must be `1`
	GetThirdPartyRedirect GetThirdPartyRedirectGetThirdPartyRedirect `json:"get_third_party_redirect"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// The name of third party platform for redirect URL.
	Name GetThirdPartyRedirectName `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetThirdPartyRedirectPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetThirdPartyRedirectGetThirdPartyRedirect int

var enumValues_GetThirdPartyRedirectGetThirdPartyRedirect = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetThirdPartyRedirectGetThirdPartyRedirect) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetThirdPartyRedirectGetThirdPartyRedirect {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetThirdPartyRedirectGetThirdPartyRedirect, v)
	}
	*j = GetThirdPartyRedirectGetThirdPartyRedirect(v)
	return nil
}

type GetThirdPartyRedirectName string

const GetThirdPartyRedirectNameDynamicworks GetThirdPartyRedirectName = "dynamicworks"

var enumValues_GetThirdPartyRedirectName = []interface{}{
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetThirdPartyRedirectName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetThirdPartyRedirectName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetThirdPartyRedirectName, v)
	}
	*j = GetThirdPartyRedirectName(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetThirdPartyRedirectPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetThirdPartyRedirect) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["get_third_party_redirect"]; raw != nil && !ok {
		return fmt.Errorf("field get_third_party_redirect in GetThirdPartyRedirect: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in GetThirdPartyRedirect: required")
	}
	type Plain GetThirdPartyRedirect
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetThirdPartyRedirect(plain)
	return nil
}
