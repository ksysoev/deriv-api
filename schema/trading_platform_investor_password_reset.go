// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Reset the investor password of a Trading Platform Account
type TradingPlatformInvestorPasswordReset struct {
	// Trading account ID.
	AccountId string `json:"account_id"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-16 characters, include numbers, lowercase,
	// uppercase letters and special characters. Must not be the same as the user's
	// email address).
	NewPassword string `json:"new_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingPlatformInvestorPasswordResetPassthrough `json:"passthrough,omitempty"`

	// Name of trading platform.
	Platform TradingPlatformInvestorPasswordResetPlatform `json:"platform"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingPlatformInvestorPasswordReset TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset `json:"trading_platform_investor_password_reset"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first)
	VerificationCode string `json:"verification_code"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingPlatformInvestorPasswordResetPassthrough map[string]interface{}

type TradingPlatformInvestorPasswordResetPlatform string

const TradingPlatformInvestorPasswordResetPlatformMt5 TradingPlatformInvestorPasswordResetPlatform = "mt5"

var enumValues_TradingPlatformInvestorPasswordResetPlatform = []interface{}{
	"mt5",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetPlatform, v)
	}
	*j = TradingPlatformInvestorPasswordResetPlatform(v)
	return nil
}

type TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset int

var enumValues_TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset, v)
	}
	*j = TradingPlatformInvestorPasswordResetTradingPlatformInvestorPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformInvestorPasswordReset) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["account_id"]; raw != nil && !ok {
		return fmt.Errorf("field account_id in TradingPlatformInvestorPasswordReset: required")
	}
	if _, ok := raw["new_password"]; raw != nil && !ok {
		return fmt.Errorf("field new_password in TradingPlatformInvestorPasswordReset: required")
	}
	if _, ok := raw["platform"]; raw != nil && !ok {
		return fmt.Errorf("field platform in TradingPlatformInvestorPasswordReset: required")
	}
	if _, ok := raw["trading_platform_investor_password_reset"]; raw != nil && !ok {
		return fmt.Errorf("field trading_platform_investor_password_reset in TradingPlatformInvestorPasswordReset: required")
	}
	if _, ok := raw["verification_code"]; raw != nil && !ok {
		return fmt.Errorf("field verification_code in TradingPlatformInvestorPasswordReset: required")
	}
	type Plain TradingPlatformInvestorPasswordReset
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformInvestorPasswordReset(plain)
	return nil
}
