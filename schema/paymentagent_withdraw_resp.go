// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type PaymentagentWithdrawRespEchoReq map[string]interface{}

type PaymentagentWithdrawRespMsgType string

var enumValues_PaymentagentWithdrawRespMsgType = []interface{}{
	"paymentagent_withdraw",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawRespMsgType, v)
	}
	*j = PaymentagentWithdrawRespMsgType(v)
	return nil
}

const PaymentagentWithdrawRespMsgTypePaymentagentWithdraw PaymentagentWithdrawRespMsgType = "paymentagent_withdraw"

type PaymentagentWithdrawRespPaymentagentWithdraw int

var enumValues_PaymentagentWithdrawRespPaymentagentWithdraw = []interface{}{
	1,
	2,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawRespPaymentagentWithdraw) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawRespPaymentagentWithdraw {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawRespPaymentagentWithdraw, v)
	}
	*j = PaymentagentWithdrawRespPaymentagentWithdraw(v)
	return nil
}

// The result of payment agent withdrawal request made.
type PaymentagentWithdrawResp struct {
	// Echo of the request made.
	EchoReq PaymentagentWithdrawRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentWithdrawRespMsgType `json:"msg_type"`

	// Payment agent name.
	PaymentagentName *string `json:"paymentagent_name,omitempty"`

	// If set to `1`, withdrawal success. If set to `2`, dry-run success.
	PaymentagentWithdraw *PaymentagentWithdrawRespPaymentagentWithdraw `json:"paymentagent_withdraw,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Reference ID of withdrawal performed.
	TransactionId *int `json:"transaction_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PaymentagentWithdrawResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawResp(plain)
	return nil
}
