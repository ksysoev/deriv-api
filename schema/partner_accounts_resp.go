// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get All Partner Accounts (Partner account details like website, provider,
// company details)
type PartnerAccountsResp struct {
	// Echo of the request made.
	EchoReq PartnerAccountsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PartnerAccountsRespMsgType `json:"msg_type"`

	// Partner Accounts against a user
	PartnerAccounts *PartnerAccountsRespPartnerAccounts `json:"partner_accounts,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PartnerAccountsRespEchoReq map[string]interface{}

type PartnerAccountsRespMsgType string

const PartnerAccountsRespMsgTypePartnerAccounts PartnerAccountsRespMsgType = "partner_accounts"

var enumValues_PartnerAccountsRespMsgType = []interface{}{
	"partner_accounts",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountsRespMsgType, v)
	}
	*j = PartnerAccountsRespMsgType(v)
	return nil
}

// Partner Accounts against a user
type PartnerAccountsRespPartnerAccounts struct {
	// Status of the partner eligibility for the user. If true, the user is allowed to
	// become a partner
	PartnerEligibilityStatus *float64 `json:"partner_eligibility_status,omitempty"`

	// List of partner_settigns for all accounts associated as partners.
	PartnerSettings []PartnerAccountsRespPartnerAccountsPartnerSettingsElem `json:"partner_settings,omitempty"`

	// Platform URL for Dynamic works dashboard to be redirected from Partners Hub
	// which will be set in BackOffice.
	PlatformUrl PartnerAccountsRespPartnerAccountsPlatformUrl `json:"platform_url,omitempty"`
}

type PartnerAccountsRespPartnerAccountsPartnerSettingsElem struct {
	// The user id.
	BinaryUserId *int `json:"binary_user_id,omitempty"`

	// [Optional] Company name. Only applicable for partners of type company.
	CompanyName *string `json:"company_name,omitempty"`

	// [Optional] Company registration number. Only applicable for partners of type
	// company.
	CompanyRegistrationNo *string `json:"company_registration_no,omitempty"`

	// Partner's login ID
	PartnerLoginid *string `json:"partner_loginid,omitempty"`

	// Defines whether this partner is an individual or a company.
	PartnerType *PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType `json:"partner_type,omitempty"`

	// Defines the provider platform.
	Provider *PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider `json:"provider,omitempty"`

	// Partner's Website URI/Promotional Platform
	Website *string `json:"website,omitempty"`
}

type PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType string

const PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerTypeCompany PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType = "company"
const PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerTypeIndividual PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType = "individual"

var enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType = []interface{}{
	"individual",
	"company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType, v)
	}
	*j = PartnerAccountsRespPartnerAccountsPartnerSettingsElemPartnerType(v)
	return nil
}

type PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider string

const PartnerAccountsRespPartnerAccountsPartnerSettingsElemProviderDynamicworks PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider = "dynamicworks"
const PartnerAccountsRespPartnerAccountsPartnerSettingsElemProviderMyaffiliate PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider = "myaffiliate"

var enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider = []interface{}{
	"myaffiliate",
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider, v)
	}
	*j = PartnerAccountsRespPartnerAccountsPartnerSettingsElemProvider(v)
	return nil
}

// Platform URL for Dynamic works dashboard to be redirected from Partners Hub
// which will be set in BackOffice.
type PartnerAccountsRespPartnerAccountsPlatformUrl map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerAccountsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PartnerAccountsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PartnerAccountsResp: required")
	}
	type Plain PartnerAccountsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerAccountsResp(plain)
	return nil
}
