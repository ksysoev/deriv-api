// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Return the status of V1 client connected to V2
type ConnectStatusResp struct {
	// Status of V1 client on V2.
	ConnectStatus *ConnectStatusRespConnectStatus `json:"connect_status,omitempty"`

	// Echo of the request made.
	EchoReq ConnectStatusRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ConnectStatusRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Status of V1 client on V2.
type ConnectStatusRespConnectStatus struct {
	// Current status of V1 client on V2.
	Status ConnectStatusRespConnectStatusStatus `json:"status"`
}

type ConnectStatusRespConnectStatusStatus string

const ConnectStatusRespConnectStatusStatusComplete ConnectStatusRespConnectStatusStatus = "complete"
const ConnectStatusRespConnectStatusStatusFailed ConnectStatusRespConnectStatusStatus = "failed"
const ConnectStatusRespConnectStatusStatusPending ConnectStatusRespConnectStatusStatus = "pending"

var enumValues_ConnectStatusRespConnectStatusStatus = []interface{}{
	"pending",
	"complete",
	"failed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectStatusRespConnectStatusStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectStatusRespConnectStatusStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectStatusRespConnectStatusStatus, v)
	}
	*j = ConnectStatusRespConnectStatusStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectStatusRespConnectStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in ConnectStatusRespConnectStatus: required")
	}
	type Plain ConnectStatusRespConnectStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConnectStatusRespConnectStatus(plain)
	return nil
}

// Echo of the request made.
type ConnectStatusRespEchoReq map[string]interface{}

type ConnectStatusRespMsgType string

const ConnectStatusRespMsgTypeConnectStatus ConnectStatusRespMsgType = "connect_status"

var enumValues_ConnectStatusRespMsgType = []interface{}{
	"connect_status",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectStatusRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectStatusRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectStatusRespMsgType, v)
	}
	*j = ConnectStatusRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectStatusResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in ConnectStatusResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in ConnectStatusResp: required")
	}
	type Plain ConnectStatusResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConnectStatusResp(plain)
	return nil
}
