// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The response of logout request made.
type LogoutResp struct {
	// Echo of the request made.
	EchoReq LogoutRespEchoReq `json:"echo_req"`

	// The result of logout request which is 1
	Logout *LogoutRespLogout `json:"logout,omitempty"`

	// Action name of the request made.
	MsgType LogoutRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LogoutRespEchoReq map[string]interface{}

type LogoutRespLogout int

var enumValues_LogoutRespLogout = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutRespLogout) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogoutRespLogout {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogoutRespLogout, v)
	}
	*j = LogoutRespLogout(v)
	return nil
}

type LogoutRespMsgType string

const LogoutRespMsgTypeLogout LogoutRespMsgType = "logout"

var enumValues_LogoutRespMsgType = []interface{}{
	"logout",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LogoutRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LogoutRespMsgType, v)
	}
	*j = LogoutRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogoutResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in LogoutResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in LogoutResp: required")
	}
	type Plain LogoutResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LogoutResp(plain)
	return nil
}
