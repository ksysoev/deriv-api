// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Copy user profile from v1 to v2
type ConnectCopy struct {
	// Must be `1`
	ConnectCopy ConnectCopyConnectCopy `json:"connect_copy"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ConnectCopyPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ConnectCopyConnectCopy int

var enumValues_ConnectCopyConnectCopy = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectCopyConnectCopy) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectCopyConnectCopy {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectCopyConnectCopy, v)
	}
	*j = ConnectCopyConnectCopy(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ConnectCopyPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectCopy) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["connect_copy"]; raw != nil && !ok {
		return fmt.Errorf("field connect_copy in ConnectCopy: required")
	}
	type Plain ConnectCopy
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConnectCopy(plain)
	return nil
}
