// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type LoginHistoryRespEchoReq map[string]interface{}

type LoginHistoryRespLoginHistoryElemStatus int

var enumValues_LoginHistoryRespLoginHistoryElemStatus = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryRespLoginHistoryElemStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LoginHistoryRespLoginHistoryElemStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LoginHistoryRespLoginHistoryElemStatus, v)
	}
	*j = LoginHistoryRespLoginHistoryElemStatus(v)
	return nil
}

// User login history
type LoginHistoryRespLoginHistoryElem struct {
	// Type of action.
	Action string `json:"action"`

	// Provides details about browser, device used during login or logout
	Environment string `json:"environment"`

	// Status of activity: 1 - success, 0 - failure
	Status LoginHistoryRespLoginHistoryElemStatus `json:"status"`

	// Epoch time of the activity
	Time int `json:"time"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryRespLoginHistoryElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["action"]; !ok || v == nil {
		return fmt.Errorf("field action: required")
	}
	if v, ok := raw["environment"]; !ok || v == nil {
		return fmt.Errorf("field environment: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["time"]; !ok || v == nil {
		return fmt.Errorf("field time: required")
	}
	type Plain LoginHistoryRespLoginHistoryElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LoginHistoryRespLoginHistoryElem(plain)
	return nil
}

type LoginHistoryRespMsgType string

var enumValues_LoginHistoryRespMsgType = []interface{}{
	"login_history",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LoginHistoryRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LoginHistoryRespMsgType, v)
	}
	*j = LoginHistoryRespMsgType(v)
	return nil
}

// Recent login/logout history records
type LoginHistoryResp struct {
	// Echo of the request made.
	EchoReq LoginHistoryRespEchoReq `json:"echo_req"`

	// Array of records of client login/logout activities
	LoginHistory []LoginHistoryRespLoginHistoryElem `json:"login_history,omitempty"`

	// Action name of the request made.
	MsgType LoginHistoryRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const LoginHistoryRespMsgTypeLoginHistory LoginHistoryRespMsgType = "login_history"

// UnmarshalJSON implements json.Unmarshaler.
func (j *LoginHistoryResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain LoginHistoryResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LoginHistoryResp(plain)
	return nil
}
