// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type PortfolioRespEchoReq map[string]interface{}

type PortfolioRespMsgType string

var enumValues_PortfolioRespMsgType = []interface{}{
	"portfolio",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PortfolioRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PortfolioRespMsgType, v)
	}
	*j = PortfolioRespMsgType(v)
	return nil
}

const PortfolioRespMsgTypePortfolio PortfolioRespMsgType = "portfolio"

// Current account's open positions.
type PortfolioRespPortfolio struct {
	// List of open positions.
	Contracts []PortfolioRespPortfolioContractsElem `json:"contracts"`
}

// The details of each open position.
type PortfolioRespPortfolioContractsElem struct {
	// ID of the application where this contract was purchased.
	AppId interface{} `json:"app_id,omitempty"`

	// Buy price
	BuyPrice *float64 `json:"buy_price,omitempty"`

	// Internal contract identifier number (to be used in a `proposal_open_contract`
	// API call).
	ContractId *int `json:"contract_id,omitempty"`

	// Contract type
	ContractType *string `json:"contract_type,omitempty"`

	// Contract currency
	Currency *string `json:"currency,omitempty"`

	// Epoch of start date
	DateStart *int `json:"date_start,omitempty"`

	// Epoch of expiry time
	ExpiryTime *int `json:"expiry_time,omitempty"`

	// Contract description
	Longcode *string `json:"longcode,omitempty"`

	// Payout price
	Payout *float64 `json:"payout,omitempty"`

	// Epoch of purchase time
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// Contract short code description
	Shortcode *string `json:"shortcode,omitempty"`

	// Symbol code
	Symbol *string `json:"symbol,omitempty"`

	// It is the transaction ID. Every contract (buy or sell) and every payment has a
	// unique ID.
	TransactionId *int `json:"transaction_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioRespPortfolio) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contracts"]; !ok || v == nil {
		return fmt.Errorf("field contracts: required")
	}
	type Plain PortfolioRespPortfolio
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PortfolioRespPortfolio(plain)
	return nil
}

// Receive a list of outstanding options in the user's portfolio
type PortfolioResp struct {
	// Echo of the request made.
	EchoReq PortfolioRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PortfolioRespMsgType `json:"msg_type"`

	// Current account's open positions.
	Portfolio *PortfolioRespPortfolio `json:"portfolio,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PortfolioResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain PortfolioResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PortfolioResp(plain)
	return nil
}
