// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type VerifyEmailRespEchoReq map[string]interface{}

type VerifyEmailRespMsgType string

var enumValues_VerifyEmailRespMsgType = []interface{}{
	"verify_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailRespMsgType, v)
	}
	*j = VerifyEmailRespMsgType(v)
	return nil
}

const VerifyEmailRespMsgTypeVerifyEmail VerifyEmailRespMsgType = "verify_email"

type VerifyEmailRespVerifyEmail int

var enumValues_VerifyEmailRespVerifyEmail = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailRespVerifyEmail) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailRespVerifyEmail {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailRespVerifyEmail, v)
	}
	*j = VerifyEmailRespVerifyEmail(v)
	return nil
}

// Verify Email Receive
type VerifyEmailResp struct {
	// Echo of the request made.
	EchoReq VerifyEmailRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType VerifyEmailRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// 1 for success (secure code has been sent to the email address)
	VerifyEmail *VerifyEmailRespVerifyEmail `json:"verify_email,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in VerifyEmailResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in VerifyEmailResp: required")
	}
	type Plain VerifyEmailResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmailResp(plain)
	return nil
}
