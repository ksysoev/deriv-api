// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Historic tick data for a single symbol
type TicksHistoryResp struct {
	// Array of OHLC (open/high/low/close) price values for the given time (only for
	// style=`candles`)
	Candles []TicksHistoryRespCandlesElem `json:"candles,omitempty"`

	// Echo of the request made.
	EchoReq TicksHistoryRespEchoReq `json:"echo_req"`

	// Historic tick data for a given symbol. Note: this will always return the latest
	// possible set of ticks with accordance to the parameters specified.
	History *TicksHistoryRespHistory `json:"history,omitempty"`

	// Type of the response according to the `style` sent in request. Would be
	// `history` or `candles` for the first response, and `tick` or `ohlc` for the
	// rest when subscribed.
	MsgType TicksHistoryRespMsgType `json:"msg_type"`

	// Historic tick data for a given symbol. Note: this will always return the latest
	// possible set of ticks with accordance to the parameters specified.
	Ohlc *TicksHistoryRespOhlc `json:"ohlc,omitempty"`

	// Indicates the number of decimal points that the returned amounts must be
	// displayed with
	PipSize *float64 `json:"pip_size,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *TicksHistoryRespSubscription `json:"subscription,omitempty"`
}

type TicksHistoryRespCandlesElem struct {
	// It is the close price value for the given time
	Close *float64 `json:"close,omitempty"`

	// It is an epoch value
	Epoch *int `json:"epoch,omitempty"`

	// It is the high price value for the given time
	High *float64 `json:"high,omitempty"`

	// It is the low price value for the given time
	Low *float64 `json:"low,omitempty"`

	// It is the open price value for the given time
	Open *float64 `json:"open,omitempty"`
}

// Echo of the request made.
type TicksHistoryRespEchoReq map[string]interface{}

// Historic tick data for a given symbol. Note: this will always return the latest
// possible set of ticks with accordance to the parameters specified.
type TicksHistoryRespHistory struct {
	// An array containing list of tick values for the corresponding epoch values in
	// `times` array.
	Prices []float64 `json:"prices,omitempty"`

	// An array containing list of epoch values for the corresponding tick values in
	// `prices` array.
	Times []int `json:"times,omitempty"`
}

type TicksHistoryRespMsgType string

const TicksHistoryRespMsgTypeCandles TicksHistoryRespMsgType = "candles"
const TicksHistoryRespMsgTypeHistory TicksHistoryRespMsgType = "history"
const TicksHistoryRespMsgTypeOhlc TicksHistoryRespMsgType = "ohlc"
const TicksHistoryRespMsgTypeTick TicksHistoryRespMsgType = "tick"

var enumValues_TicksHistoryRespMsgType = []interface{}{
	"history",
	"tick",
	"candles",
	"ohlc",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryRespMsgType, v)
	}
	*j = TicksHistoryRespMsgType(v)
	return nil
}

// Historic tick data for a given symbol. Note: this will always return the latest
// possible set of ticks with accordance to the parameters specified.
type TicksHistoryRespOhlc struct {
	// It is the close price value for the given time
	Close *string `json:"close,omitempty"`

	// It is an epoch value
	Epoch *int `json:"epoch,omitempty"`

	// Granularity
	Granularity *int `json:"granularity,omitempty"`

	// It is the high price value for the given time
	High *string `json:"high,omitempty"`

	// Subscription unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// It is the low price value for the given time
	Low *string `json:"low,omitempty"`

	// It is the open price value for the given time
	Open *string `json:"open,omitempty"`

	// It is an epoch of open time
	OpenTime *int `json:"open_time,omitempty"`

	// PIP size
	PipSize *int `json:"pip_size,omitempty"`

	// Symbol name
	Symbol *string `json:"symbol,omitempty"`
}

// For subscription requests only.
type TicksHistoryRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TicksHistoryRespSubscription: required")
	}
	type Plain TicksHistoryRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksHistoryRespSubscription(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in TicksHistoryResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in TicksHistoryResp: required")
	}
	type Plain TicksHistoryResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksHistoryResp(plain)
	return nil
}
