// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// The result of the API token request made.
type ApiTokenResp struct {
	// Contains the result of API token according to the type of request.
	ApiToken *ApiTokenRespApiToken `json:"api_token,omitempty"`

	// Echo of the request made.
	EchoReq ApiTokenRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ApiTokenRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Contains the result of API token according to the type of request.
type ApiTokenRespApiToken struct {
	// Token deleted.
	DeleteToken *ApiTokenRespApiTokenDeleteToken `json:"delete_token,omitempty"`

	// Token created.
	NewToken *ApiTokenRespApiTokenNewToken `json:"new_token,omitempty"`

	// API tokens
	Tokens []ApiTokenRespApiTokenTokensElem `json:"tokens,omitempty"`
}

type ApiTokenRespApiTokenDeleteToken int

type ApiTokenRespApiTokenNewToken int

// The information for each token.
type ApiTokenRespApiTokenTokensElem struct {
	// The token name specified when creating.
	DisplayName *string `json:"display_name,omitempty"`

	// The last date which the token has been used.
	LastUsed *string `json:"last_used,omitempty"`

	// List of permission scopes of the token.
	Scopes []ApiTokenRespApiTokenTokensElemScopesElem `json:"scopes,omitempty"`

	// The token that can be used to `authorize` with.
	Token *string `json:"token,omitempty"`

	// The IP restriction for the token. No restriction if empty.
	ValidForIp *string `json:"valid_for_ip,omitempty"`
}

type ApiTokenRespApiTokenTokensElemScopesElem string

const ApiTokenRespApiTokenTokensElemScopesElemAdmin ApiTokenRespApiTokenTokensElemScopesElem = "admin"
const ApiTokenRespApiTokenTokensElemScopesElemPayments ApiTokenRespApiTokenTokensElemScopesElem = "payments"
const ApiTokenRespApiTokenTokensElemScopesElemRead ApiTokenRespApiTokenTokensElemScopesElem = "read"
const ApiTokenRespApiTokenTokensElemScopesElemTrade ApiTokenRespApiTokenTokensElemScopesElem = "trade"
const ApiTokenRespApiTokenTokensElemScopesElemTradingInformation ApiTokenRespApiTokenTokensElemScopesElem = "trading_information"

// Echo of the request made.
type ApiTokenRespEchoReq map[string]interface{}

type ApiTokenRespMsgType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ApiTokenResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ApiTokenResp(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRespApiTokenTokensElemScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRespApiTokenTokensElemScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRespApiTokenTokensElemScopesElem, v)
	}
	*j = ApiTokenRespApiTokenTokensElemScopesElem(v)
	return nil
}

var enumValues_ApiTokenRespApiTokenTokensElemScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRespApiTokenNewToken) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRespApiTokenNewToken {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRespApiTokenNewToken, v)
	}
	*j = ApiTokenRespApiTokenNewToken(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRespApiTokenDeleteToken) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRespApiTokenDeleteToken {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRespApiTokenDeleteToken, v)
	}
	*j = ApiTokenRespApiTokenDeleteToken(v)
	return nil
}

var enumValues_ApiTokenRespMsgType = []interface{}{
	"api_token",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ApiTokenRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ApiTokenRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ApiTokenRespMsgType, v)
	}
	*j = ApiTokenRespMsgType(v)
	return nil
}

const ApiTokenRespMsgTypeApiToken ApiTokenRespMsgType = "api_token"

var enumValues_ApiTokenRespApiTokenDeleteToken = []interface{}{
	1,
}
var enumValues_ApiTokenRespApiTokenNewToken = []interface{}{
	1,
}
