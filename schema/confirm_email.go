// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Verifies the email for the user using verification code passed in the request
// object
type ConfirmEmail struct {
	// Must be `1`
	ConfirmEmail ConfirmEmailConfirmEmail `json:"confirm_email"`

	// [Optional] Purpose of the email verification. If set to 'account_opening', the
	// API will only return the verification response without updating the user's
	// email verification status.
	CreatedFor ConfirmEmailCreatedFor `json:"created_for,omitempty"`

	// Boolean value: 1 or 0, indicating whether the client has given consent for
	// marketing emails.
	EmailConsent ConfirmEmailEmailConsent `json:"email_consent"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ConfirmEmailPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Email verification code (received from a `verify_email` call, which must be
	// done first).
	VerificationCode string `json:"verification_code"`
}

type ConfirmEmailConfirmEmail int

var enumValues_ConfirmEmailConfirmEmail = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailConfirmEmail) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfirmEmailConfirmEmail {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfirmEmailConfirmEmail, v)
	}
	*j = ConfirmEmailConfirmEmail(v)
	return nil
}

type ConfirmEmailCreatedFor string

const ConfirmEmailCreatedForAccountOpening ConfirmEmailCreatedFor = "account_opening"
const ConfirmEmailCreatedForAccountVerification ConfirmEmailCreatedFor = "account_verification"

var enumValues_ConfirmEmailCreatedFor = []interface{}{
	"account_verification",
	"account_opening",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailCreatedFor) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfirmEmailCreatedFor {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfirmEmailCreatedFor, v)
	}
	*j = ConfirmEmailCreatedFor(v)
	return nil
}

type ConfirmEmailEmailConsent int

var enumValues_ConfirmEmailEmailConsent = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfirmEmailEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfirmEmailEmailConsent, v)
	}
	*j = ConfirmEmailEmailConsent(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ConfirmEmailPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmail) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["confirm_email"]; raw != nil && !ok {
		return fmt.Errorf("field confirm_email in ConfirmEmail: required")
	}
	if _, ok := raw["email_consent"]; raw != nil && !ok {
		return fmt.Errorf("field email_consent in ConfirmEmail: required")
	}
	if _, ok := raw["verification_code"]; raw != nil && !ok {
		return fmt.Errorf("field verification_code in ConfirmEmail: required")
	}
	type Plain ConfirmEmail
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["created_for"]; !ok || v == nil {
		plain.CreatedFor = "account_verification"
	}
	*j = ConfirmEmail(plain)
	return nil
}
