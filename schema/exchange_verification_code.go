// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Verifies the code and returns a new code if verification is successful
type ExchangeVerificationCode struct {
	// Must be `1`
	ExchangeVerificationCode ExchangeVerificationCodeExchangeVerificationCode `json:"exchange_verification_code"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ExchangeVerificationCodePassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Purpose of the token exchange.
	Type ExchangeVerificationCodeType `json:"type,omitempty"`

	// Email verification code (received from a `verify_email` call which must be done
	// first).
	VerificationCode string `json:"verification_code"`
}

type ExchangeVerificationCodeExchangeVerificationCode int

var enumValues_ExchangeVerificationCodeExchangeVerificationCode = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCodeExchangeVerificationCode) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeVerificationCodeExchangeVerificationCode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeVerificationCodeExchangeVerificationCode, v)
	}
	*j = ExchangeVerificationCodeExchangeVerificationCode(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ExchangeVerificationCodePassthrough map[string]interface{}

type ExchangeVerificationCodeType string

const ExchangeVerificationCodeTypeAccountOpening ExchangeVerificationCodeType = "account_opening"

var enumValues_ExchangeVerificationCodeType = []interface{}{
	"account_opening",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCodeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeVerificationCodeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeVerificationCodeType, v)
	}
	*j = ExchangeVerificationCodeType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCode) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["exchange_verification_code"]; raw != nil && !ok {
		return fmt.Errorf("field exchange_verification_code in ExchangeVerificationCode: required")
	}
	if _, ok := raw["verification_code"]; raw != nil && !ok {
		return fmt.Errorf("field verification_code in ExchangeVerificationCode: required")
	}
	type Plain ExchangeVerificationCode
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		plain.Type = "account_opening"
	}
	*j = ExchangeVerificationCode(plain)
	return nil
}
