// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get the list of currently available contracts for a given landing company.
type ContractsForCompany struct {
	// Must be `1`
	ContractsForCompany ContractsForCompanyContractsForCompany `json:"contracts_for_company"`

	// [Optional] Indicates which landing company to get a list of contracts for. If
	// you are logged in, your account's landing company will override this field.
	LandingCompany ContractsForCompanyLandingCompany `json:"landing_company,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractsForCompanyPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ContractsForCompanyContractsForCompany int

type ContractsForCompanyLandingCompany string

const ContractsForCompanyLandingCompanyIom ContractsForCompanyLandingCompany = "iom"

var enumValues_ContractsForCompanyLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForCompanyLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForCompanyLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForCompanyLandingCompany, v)
	}
	*j = ContractsForCompanyLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForCompanyContractsForCompany) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractsForCompanyContractsForCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractsForCompanyContractsForCompany, v)
	}
	*j = ContractsForCompanyContractsForCompany(v)
	return nil
}

const ContractsForCompanyLandingCompanyMalta ContractsForCompanyLandingCompany = "malta"
const ContractsForCompanyLandingCompanyMaltainvest ContractsForCompanyLandingCompany = "maltainvest"
const ContractsForCompanyLandingCompanySvg ContractsForCompanyLandingCompany = "svg"
const ContractsForCompanyLandingCompanyVanuatu ContractsForCompanyLandingCompany = "vanuatu"
const ContractsForCompanyLandingCompanyVirtual ContractsForCompanyLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractsForCompanyPassthrough map[string]interface{}

var enumValues_ContractsForCompanyContractsForCompany = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractsForCompany) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contracts_for_company"]; !ok || v == nil {
		return fmt.Errorf("field contracts_for_company in ContractsForCompany: required")
	}
	type Plain ContractsForCompany
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["landing_company"]; !ok || v == nil {
		plain.LandingCompany = "virtual"
	}
	*j = ContractsForCompany(plain)
	return nil
}
