// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// App Markup transaction details
type AppMarkupDetailsRespAppMarkupDetails struct {
	// Array of returned transactions
	Transactions []AppMarkupDetailsRespAppMarkupDetailsTransactionsElem `json:"transactions,omitempty"`
}

type AppMarkupDetailsRespAppMarkupDetailsTransactionsElem struct {
	// ID of the application where this contract was purchased.
	AppId *int `json:"app_id,omitempty"`

	// The markup the client paid in their currency
	AppMarkup *float64 `json:"app_markup,omitempty"`

	// The markup the client paid in USD
	AppMarkupUsd *float64 `json:"app_markup_usd,omitempty"`

	// The markup the client paid in the app developer's currency
	AppMarkupValue *float64 `json:"app_markup_value,omitempty"`

	// Currency code of the client
	ClientCurrcode *string `json:"client_currcode,omitempty"`

	// Login ID of the client
	ClientLoginid *string `json:"client_loginid,omitempty"`

	// Currency code of the app developer
	DevCurrcode *string `json:"dev_currcode,omitempty"`

	// Login ID of the app developer
	DevLoginid *string `json:"dev_loginid,omitempty"`

	// The transaction ID. Every contract (buy or sell) and every payment has a unique
	// ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// The epoch value of purchase time of transaction
	TransactionTime *string `json:"transaction_time,omitempty"`
}

// Echo of the request made.
type AppMarkupDetailsRespEchoReq map[string]interface{}

type AppMarkupDetailsRespMsgType string

var enumValues_AppMarkupDetailsRespMsgType = []interface{}{
	"app_markup_details",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsRespMsgType, v)
	}
	*j = AppMarkupDetailsRespMsgType(v)
	return nil
}

// Per transaction reporting of app_markup
type AppMarkupDetailsResp struct {
	// App Markup transaction details
	AppMarkupDetails *AppMarkupDetailsRespAppMarkupDetails `json:"app_markup_details,omitempty"`

	// Echo of the request made.
	EchoReq AppMarkupDetailsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppMarkupDetailsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const AppMarkupDetailsRespMsgTypeAppMarkupDetails AppMarkupDetailsRespMsgType = "app_markup_details"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in AppMarkupDetailsResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in AppMarkupDetailsResp: required")
	}
	type Plain AppMarkupDetailsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppMarkupDetailsResp(plain)
	return nil
}
