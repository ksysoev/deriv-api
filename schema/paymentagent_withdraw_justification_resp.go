// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The result of payment agent withdrawal justification request made.
type PaymentagentWithdrawJustificationResp struct {
	// Echo of the request made.
	EchoReq PaymentagentWithdrawJustificationRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentWithdrawJustificationRespMsgType `json:"msg_type"`

	// 1 on success
	PaymentagentWithdrawJustification *int `json:"paymentagent_withdraw_justification,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentWithdrawJustificationRespEchoReq map[string]interface{}

type PaymentagentWithdrawJustificationRespMsgType string

const PaymentagentWithdrawJustificationRespMsgTypePaymentagentWithdrawJustification PaymentagentWithdrawJustificationRespMsgType = "paymentagent_withdraw_justification"

var enumValues_PaymentagentWithdrawJustificationRespMsgType = []interface{}{
	"paymentagent_withdraw_justification",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawJustificationRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawJustificationRespMsgType, v)
	}
	*j = PaymentagentWithdrawJustificationRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PaymentagentWithdrawJustificationResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PaymentagentWithdrawJustificationResp: required")
	}
	type Plain PaymentagentWithdrawJustificationResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawJustificationResp(plain)
	return nil
}
