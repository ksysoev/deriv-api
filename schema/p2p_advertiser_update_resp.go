// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type P2PAdvertiserUpdateRespEchoReq map[string]interface{}

type P2PAdvertiserUpdateRespMsgType string

var enumValues_P2PAdvertiserUpdateRespMsgType = []interface{}{
	"p2p_advertiser_update",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespMsgType, v)
	}
	*j = P2PAdvertiserUpdateRespMsgType(v)
	return nil
}

const P2PAdvertiserUpdateRespMsgTypeP2PAdvertiserUpdate P2PAdvertiserUpdateRespMsgType = "p2p_advertiser_update"

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification(v)
	return nil
}

// Block trading limits, if block trading is allowed.
type P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade struct {
	// Maximum order amount for block trade adverts.
	MaxOrderAmount string `json:"max_order_amount"`

	// Minimum order amount for block trade adverts.
	MinOrderAmount string `json:"min_order_amount"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount in P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade: required")
	}
	if v, ok := raw["min_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount in P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade: required")
	}
	type Plain P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade(plain)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification(v)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved(v)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed(v)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline(v)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable(v)
	return nil
}

// Periods of availabily.
type P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem struct {
	// Minute of week when availablility ends. Zero is Sunday 00:00 UST.
	EndMin *int `json:"end_min"`

	// Minute of week when availablility starts. Zero is Sunday 00:00 UST.
	StartMin *int `json:"start_min"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["end_min"]; !ok || v == nil {
		return fmt.Errorf("field end_min in P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem: required")
	}
	if v, ok := raw["start_min"]; !ok || v == nil {
		return fmt.Errorf("field start_min in P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem: required")
	}
	type Plain P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem(plain)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName(v)
	return nil
}

type P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade int

var enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade, v)
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade(v)
	return nil
}

// New daily limits available.
type P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits struct {
	// When `1`, upgrade will provide block trading.
	BlockTrade *P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimitsBlockTrade `json:"block_trade,omitempty"`

	// Upgradable daily buy limit.
	MaxDailyBuy string `json:"max_daily_buy"`

	// Upgradable daily sell limit.
	MaxDailySell string `json:"max_daily_sell"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_daily_buy"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_buy in P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits: required")
	}
	if v, ok := raw["max_daily_sell"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_sell in P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits: required")
	}
	type Plain P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits(plain)
	return nil
}

// P2P advertiser information.
type P2PAdvertiserUpdateRespP2PAdvertiserUpdate struct {
	// Number of active fixed rate adverts belonging to the advertiser.
	ActiveFixedAds *int `json:"active_fixed_ads,omitempty"`

	// Number of active floating rate adverts belonging to the advertiser.
	ActiveFloatAds *int `json:"active_float_ads,omitempty"`

	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates *float64 `json:"advert_rates"`

	// Amount of funds available to sell on P2P. May be less than account balance
	// according to deposit methods used.
	BalanceAvailable float64 `json:"balance_available"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserUpdateRespP2PAdvertiserUpdateBasicVerification `json:"basic_verification"`

	// Block trading limits, if block trading is allowed.
	BlockTrade *P2PAdvertiserUpdateRespP2PAdvertiserUpdateBlockTrade `json:"block_trade,omitempty"`

	// The number of P2P users who have blocked this advertiser.
	BlockedByCount int `json:"blocked_by_count"`

	// If a temporary bar was placed, this is the epoch time at which it will end.
	BlockedUntil *int `json:"blocked_until,omitempty"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate *float64 `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg *int `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg *int `json:"cancel_time_avg"`

	// The number of times the user may cancel orders before being temporarily
	// blocked.
	CancelsRemaining int `json:"cancels_remaining"`

	// The token to be used for authenticating the client for chat.
	ChatToken *string `json:"chat_token"`

	// The unique identifier for the chat user.
	ChatUserId *string `json:"chat_user_id"`

	// Advertiser's contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time that the client became an advertiser.
	CreatedTime int `json:"created_time"`

	// Total value of P2P buy transactions in the past 24 hours.
	DailyBuy *string `json:"daily_buy,omitempty"`

	// Maximum allowed value of P2P buy transactions in a 24 hour period.
	DailyBuyLimit *string `json:"daily_buy_limit,omitempty"`

	// Total value of P2P sell transactions in the past 24 hours.
	DailySell *string `json:"daily_sell,omitempty"`

	// Maximum allowed value of P2P sell transactions in a 24 hour period.
	DailySellLimit *string `json:"daily_sell_limit,omitempty"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserUpdateRespP2PAdvertiserUpdateFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsApproved `json:"is_approved"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsOnline `json:"is_online"`

	// Inidcates whether the advertiser's schedule allows P2P transactions at the
	// current time.
	IsScheduleAvailable P2PAdvertiserUpdateRespP2PAdvertiserUpdateIsScheduleAvailable `json:"is_schedule_available"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime *int `json:"last_online_time"`

	// Maximum order amount for adverts.
	MaxOrderAmount *string `json:"max_order_amount,omitempty"`

	// Sell ads will be hidden when your available balance or remaining daily sell
	// limit falls beneath this value.
	MinBalance *string `json:"min_balance,omitempty"`

	// Minimum order amount for adverts.
	MinOrderAmount *string `json:"min_order_amount,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Advertiser's payment information.
	PaymentInfo string `json:"payment_info"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage *float64 `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage *float64 `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount *int `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg *int `json:"release_time_avg"`

	// [Optional] Weekly availability schedule. Ads are visible and orders can be
	// created only during available periods.
	Schedule []P2PAdvertiserUpdateRespP2PAdvertiserUpdateScheduleElem `json:"schedule,omitempty"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate *float64 `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// When `1`, the advertiser's real name will be displayed on to other users on
	// adverts and orders.
	ShowName P2PAdvertiserUpdateRespP2PAdvertiserUpdateShowName `json:"show_name"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate *float64 `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`

	// New daily limits available.
	UpgradableDailyLimits *P2PAdvertiserUpdateRespP2PAdvertiserUpdateUpgradableDailyLimits `json:"upgradable_daily_limits,omitempty"`

	// Remaining withdrawal_limit of a non-fully authenticated advertiser.
	WithdrawalLimit *string `json:"withdrawal_limit,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateRespP2PAdvertiserUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["balance_available"]; !ok || v == nil {
		return fmt.Errorf("field balance_available in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["blocked_by_count"]; !ok || v == nil {
		return fmt.Errorf("field blocked_by_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["cancels_remaining"]; !ok || v == nil {
		return fmt.Errorf("field cancels_remaining in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["chat_token"]; !ok || v == nil {
		return fmt.Errorf("field chat_token in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["chat_user_id"]; !ok || v == nil {
		return fmt.Errorf("field chat_user_id in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["is_schedule_available"]; !ok || v == nil {
		return fmt.Errorf("field is_schedule_available in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["show_name"]; !ok || v == nil {
		return fmt.Errorf("field show_name in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover in P2PAdvertiserUpdateRespP2PAdvertiserUpdate: required")
	}
	type Plain P2PAdvertiserUpdateRespP2PAdvertiserUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateRespP2PAdvertiserUpdate(plain)
	return nil
}

// Returns latest information of the advertiser.
type P2PAdvertiserUpdateResp struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserUpdateRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserUpdateRespMsgType `json:"msg_type"`

	// P2P advertiser information.
	P2PAdvertiserUpdate *P2PAdvertiserUpdateRespP2PAdvertiserUpdate `json:"p2p_advertiser_update,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in P2PAdvertiserUpdateResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in P2PAdvertiserUpdateResp: required")
	}
	type Plain P2PAdvertiserUpdateResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdateResp(plain)
	return nil
}
