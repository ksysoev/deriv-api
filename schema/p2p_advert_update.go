// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateP2PAdvertUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateP2PAdvertUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateP2PAdvertUpdate, v)
	}
	*j = P2PAdvertUpdateP2PAdvertUpdate(v)
	return nil
}

const P2PAdvertUpdateRateTypeFixed P2PAdvertUpdateRateType = "fixed"

type P2PAdvertUpdateDelete int

type P2PAdvertUpdateIsActive int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertUpdatePassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateIsActive) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateIsActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateIsActive, v)
	}
	*j = P2PAdvertUpdateIsActive(v)
	return nil
}

type P2PAdvertUpdateP2PAdvertUpdate int

type P2PAdvertUpdateRateType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateDelete) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateDelete {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateDelete, v)
	}
	*j = P2PAdvertUpdateDelete(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2PAdvertUpdate: required")
	}
	if v, ok := raw["p2p_advert_update"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advert_update in P2PAdvertUpdate: required")
	}
	type Plain P2PAdvertUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if len(plain.EligibleCountries) > 250 {
		return fmt.Errorf("field %s length: must be <= %d", "eligible_countries", 250)
	}
	if len(plain.PaymentMethodIds) > 3 {
		return fmt.Errorf("field %s length: must be <= %d", "payment_method_ids", 3)
	}
	if len(plain.PaymentMethodNames) > 3 {
		return fmt.Errorf("field %s length: must be <= %d", "payment_method_names", 3)
	}
	*j = P2PAdvertUpdate(plain)
	return nil
}

// Updates a P2P advert. Can only be used by the advertiser.
type P2PAdvertUpdate struct {
	// [Optional] Advertiser contact information.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] If set to 1, permanently deletes the advert.
	Delete *P2PAdvertUpdateDelete `json:"delete,omitempty"`

	// [Optional] General information about the advert.
	Description *string `json:"description,omitempty"`

	// [Optional] 2 letter country codes. Counterparties who do not live in these
	// countries will not be allowed to place orders against this advert. An empty
	// array or null value will clear the condition.
	EligibleCountries []string `json:"eligible_countries,omitempty"`

	// The unique identifier for this advert.
	Id string `json:"id"`

	// [Optional] Activate or deactivate the advert.
	IsActive *P2PAdvertUpdateIsActive `json:"is_active,omitempty"`

	// [Optional] Local currency for this advert.
	LocalCurrency *string `json:"local_currency,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Maximum allowed amount for the orders of this advert, in
	// advertiser's `account_currency`. Should be more than or equal to
	// `min_order_amount`.
	MaxOrderAmount *float64 `json:"max_order_amount,omitempty"`

	// [Optional] Counterparties who have a 30 day completion rate less than this
	// value will not be allowed to place orders against this advert. A an empty array
	// or null value will clear the condition.
	MinCompletionRate *float64 `json:"min_completion_rate,omitempty"`

	// [Optional] Counterparties who joined less than this number of days ago will not
	// be allowed to place orders against this advert. A null value will clear the
	// condition.
	MinJoinDays *int `json:"min_join_days,omitempty"`

	// [Optional] Minimum allowed amount for the orders of this advert, in
	// advertiser's `account_currency`. Should be less than or equal to
	// `max_order_amount`.
	MinOrderAmount *float64 `json:"min_order_amount,omitempty"`

	// [Optional] Counterparties who have an average rating less than this value will
	// not be allowed to place orders against this advert. A null value will clear the
	// condition.
	MinRating *float64 `json:"min_rating,omitempty"`

	// [Optional] Expiry period (seconds) for order created against this ad.
	OrderExpiryPeriod *int `json:"order_expiry_period,omitempty"`

	// Must be 1
	P2PAdvertUpdate P2PAdvertUpdateP2PAdvertUpdate `json:"p2p_advert_update"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertUpdatePassthrough `json:"passthrough,omitempty"`

	// [Optional] Payment instructions.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] IDs of previously saved payment methods as returned from
	// p2p_advertiser_payment_methods, only applicable for sell ads. Exisiting methods
	// will be replaced.
	PaymentMethodIds []int `json:"payment_method_ids,omitempty"`

	// [Optional] Payment method identifiers as returned from p2p_payment_methods,
	// only applicable for buy ads. Exisiting methods will be replaced.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// [Optional] Conversion rate from advertiser's account currency to
	// `local_currency`. An absolute rate value (fixed), or percentage offset from
	// current market rate (floating).
	Rate *float64 `json:"rate,omitempty"`

	// [Optional] Type of rate, fixed or floating.
	RateType *P2PAdvertUpdateRateType `json:"rate_type,omitempty"`

	// [Optional] The total available amount of the advert, in advertiser's account
	// currency.
	RemainingAmount *float64 `json:"remaining_amount,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertUpdateRateType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertUpdateRateType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertUpdateRateType, v)
	}
	*j = P2PAdvertUpdateRateType(v)
	return nil
}

const P2PAdvertUpdateRateTypeFloat P2PAdvertUpdateRateType = "float"

var enumValues_P2PAdvertUpdateDelete = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateIsActive = []interface{}{
	0,
	1,
}
var enumValues_P2PAdvertUpdateP2PAdvertUpdate = []interface{}{
	1,
}
var enumValues_P2PAdvertUpdateRateType = []interface{}{
	"fixed",
	"float",
}
