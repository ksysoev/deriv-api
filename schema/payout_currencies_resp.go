// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type PayoutCurrenciesRespEchoReq map[string]interface{}

type PayoutCurrenciesRespMsgType string

var enumValues_PayoutCurrenciesRespMsgType = []interface{}{
	"payout_currencies",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PayoutCurrenciesRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PayoutCurrenciesRespMsgType, v)
	}
	*j = PayoutCurrenciesRespMsgType(v)
	return nil
}

// List of available payout currencies.
type PayoutCurrenciesResp struct {
	// Echo of the request made.
	EchoReq PayoutCurrenciesRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PayoutCurrenciesRespMsgType `json:"msg_type"`

	// Available payout currencies. Note: if a user is logged in, only the currency
	// available for the account will be returned.
	PayoutCurrencies []string `json:"payout_currencies,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const PayoutCurrenciesRespMsgTypePayoutCurrencies PayoutCurrenciesRespMsgType = "payout_currencies"

// UnmarshalJSON implements json.Unmarshaler.
func (j *PayoutCurrenciesResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in PayoutCurrenciesResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in PayoutCurrenciesResp: required")
	}
	type Plain PayoutCurrenciesResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PayoutCurrenciesResp(plain)
	return nil
}
