// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type EconomicCalendarRespEchoReq map[string]interface{}

// Economic calendar.
type EconomicCalendarRespEconomicCalendar struct {
	// Array of economic events
	Events []EconomicCalendarRespEconomicCalendarEventsElem `json:"events,omitempty"`
}

type EconomicCalendarRespEconomicCalendarEventsElem struct {
	// Actual value.
	Actual *EconomicCalendarRespEconomicCalendarEventsElemActual `json:"actual,omitempty"`

	// Currency symbol.
	Currency *string `json:"currency,omitempty"`

	// Event name.
	EventName *string `json:"event_name,omitempty"`

	// Forecasted value.
	Forecast *EconomicCalendarRespEconomicCalendarEventsElemForecast `json:"forecast,omitempty"`

	// Impact.
	Impact *int `json:"impact,omitempty"`

	// Previous value.
	Previous *EconomicCalendarRespEconomicCalendarEventsElemPrevious `json:"previous,omitempty"`

	// Release date.
	ReleaseDate *int `json:"release_date,omitempty"`
}

// Actual value.
type EconomicCalendarRespEconomicCalendarEventsElemActual struct {
	// Actual value.
	DisplayValue *string `json:"display_value,omitempty"`
}

// Forecasted value.
type EconomicCalendarRespEconomicCalendarEventsElemForecast struct {
	// Forecasted value.
	DisplayValue *string `json:"display_value,omitempty"`
}

// Previous value.
type EconomicCalendarRespEconomicCalendarEventsElemPrevious struct {
	// Previous value.
	DisplayValue *string `json:"display_value,omitempty"`
}

type EconomicCalendarRespMsgType string

var enumValues_EconomicCalendarRespMsgType = []interface{}{
	"economic_calendar",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EconomicCalendarRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EconomicCalendarRespMsgType, v)
	}
	*j = EconomicCalendarRespMsgType(v)
	return nil
}

// A list of economic events.
type EconomicCalendarResp struct {
	// Echo of the request made.
	EchoReq EconomicCalendarRespEchoReq `json:"echo_req"`

	// Economic calendar.
	EconomicCalendar *EconomicCalendarRespEconomicCalendar `json:"economic_calendar,omitempty"`

	// Action name of the request made.
	MsgType EconomicCalendarRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const EconomicCalendarRespMsgTypeEconomicCalendar EconomicCalendarRespMsgType = "economic_calendar"

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in EconomicCalendarResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in EconomicCalendarResp: required")
	}
	type Plain EconomicCalendarResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EconomicCalendarResp(plain)
	return nil
}
