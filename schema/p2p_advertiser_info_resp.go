// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type P2PAdvertiserInfoRespEchoReq map[string]interface{}

type P2PAdvertiserInfoRespMsgType string

var enumValues_P2PAdvertiserInfoRespMsgType = []interface{}{
	"p2p_advertiser_info",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespMsgType, v)
	}
	*j = P2PAdvertiserInfoRespMsgType(v)
	return nil
}

const P2PAdvertiserInfoRespMsgTypeP2PAdvertiserInfo P2PAdvertiserInfoRespMsgType = "p2p_advertiser_info"

type P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification(v)
	return nil
}

// Block trading limits, if block trading is allowed.
type P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade struct {
	// Maximum order amount for block trade adverts.
	MaxOrderAmount string `json:"max_order_amount"`

	// Minimum order amount for block trade adverts.
	MinOrderAmount string `json:"min_order_amount"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field max_order_amount in P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade: required")
	}
	if v, ok := raw["min_order_amount"]; !ok || v == nil {
		return fmt.Errorf("field min_order_amount in P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade: required")
	}
	type Plain P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade(plain)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended struct {
	Value interface{}
}

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended = []interface{}{
	nil,
	0.0,
	1.0,
}

// MarshalJSON implements json.Marshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended, v.Value)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable(v)
	return nil
}

// Periods of availabily.
type P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem struct {
	// Minute of week when availablility ends. Zero is Sunday 00:00 UST.
	EndMin *int `json:"end_min"`

	// Minute of week when availablility starts. Zero is Sunday 00:00 UST.
	StartMin *int `json:"start_min"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["end_min"]; !ok || v == nil {
		return fmt.Errorf("field end_min in P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem: required")
	}
	if v, ok := raw["start_min"]; !ok || v == nil {
		return fmt.Errorf("field start_min in P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem: required")
	}
	type Plain P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem(plain)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoShowName int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoShowName, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoShowName(v)
	return nil
}

type P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade int

var enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade, v)
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade(v)
	return nil
}

// New daily limits available.
type P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits struct {
	// When `1`, upgrade will provide block trading.
	BlockTrade *P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimitsBlockTrade `json:"block_trade,omitempty"`

	// Upgradable daily buy limit.
	MaxDailyBuy string `json:"max_daily_buy"`

	// Upgradable daily sell limit.
	MaxDailySell string `json:"max_daily_sell"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["max_daily_buy"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_buy in P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits: required")
	}
	if v, ok := raw["max_daily_sell"]; !ok || v == nil {
		return fmt.Errorf("field max_daily_sell in P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits: required")
	}
	type Plain P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits(plain)
	return nil
}

// P2P advertiser information.
type P2PAdvertiserInfoRespP2PAdvertiserInfo struct {
	// Number of active fixed rate adverts belonging to the advertiser.
	ActiveFixedAds *int `json:"active_fixed_ads,omitempty"`

	// Number of active floating rate adverts belonging to the advertiser.
	ActiveFloatAds *int `json:"active_float_ads,omitempty"`

	// Average difference of advert rate compared to the market rate over the past 30
	// days.
	AdvertRates *float64 `json:"advert_rates"`

	// Amount of funds available to sell on P2P. May be less than account balance
	// according to deposit methods used.
	BalanceAvailable *float64 `json:"balance_available,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's identify has been
	// verified.
	BasicVerification P2PAdvertiserInfoRespP2PAdvertiserInfoBasicVerification `json:"basic_verification"`

	// Block trading limits, if block trading is allowed.
	BlockTrade *P2PAdvertiserInfoRespP2PAdvertiserInfoBlockTrade `json:"block_trade,omitempty"`

	// The number of P2P users who have blocked this advertiser.
	BlockedByCount *int `json:"blocked_by_count,omitempty"`

	// If a temporary bar was placed, this is the epoch time at which it will end.
	BlockedUntil *int `json:"blocked_until,omitempty"`

	// The percentage of completed orders out of total orders as a buyer within the
	// past 30 days.
	BuyCompletionRate *float64 `json:"buy_completion_rate"`

	// Buy order volume in the past 30 days.
	BuyOrdersAmount string `json:"buy_orders_amount"`

	// The number of buy order completed within the past 30 days.
	BuyOrdersCount int `json:"buy_orders_count"`

	// The average time in seconds taken to make payment as a buyer within the past 30
	// days.
	BuyTimeAvg *int `json:"buy_time_avg"`

	// The average time in seconds taken to cancel orders as a buyer within the past
	// 30 days.
	CancelTimeAvg *int `json:"cancel_time_avg"`

	// The number of times the user may cancel orders before being temporarily
	// blocked.
	CancelsRemaining *int `json:"cancels_remaining,omitempty"`

	// The token to be used for authenticating the client for chat.
	ChatToken *string `json:"chat_token,omitempty"`

	// The unique identifier for the chat user.
	ChatUserId *string `json:"chat_user_id,omitempty"`

	// Advertiser's contact information.
	ContactInfo *string `json:"contact_info,omitempty"`

	// The epoch time that the client became an advertiser.
	CreatedTime int `json:"created_time"`

	// Total value of P2P buy transactions in the past 24 hours.
	DailyBuy *string `json:"daily_buy,omitempty"`

	// Maximum allowed value of P2P buy transactions in a 24 hour period.
	DailyBuyLimit *string `json:"daily_buy_limit,omitempty"`

	// Total value of P2P sell transactions in the past 24 hours.
	DailySell *string `json:"daily_sell,omitempty"`

	// Maximum allowed value of P2P sell transactions in a 24 hour period.
	DailySellLimit *string `json:"daily_sell_limit,omitempty"`

	// Default description that can be used every time an advert is created.
	DefaultAdvertDescription string `json:"default_advert_description"`

	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// Boolean value: 1 or 0, indicating whether the advertiser's address has been
	// verified.
	FullVerification P2PAdvertiserInfoRespP2PAdvertiserInfoFullVerification `json:"full_verification"`

	// The advertiser's identification number.
	Id string `json:"id"`

	// The approval status of the advertiser.
	IsApproved P2PAdvertiserInfoRespP2PAdvertiserInfoIsApproved `json:"is_approved"`

	// Indicates that the advertiser is blocked by the current user.
	IsBlocked *P2PAdvertiserInfoRespP2PAdvertiserInfoIsBlocked `json:"is_blocked,omitempty"`

	// Indicates that the advertiser is a favourite of the current user
	IsFavourite *P2PAdvertiserInfoRespP2PAdvertiserInfoIsFavourite `json:"is_favourite,omitempty"`

	// Indicates if the advertiser's active adverts are listed. When `0`, adverts
	// won't be listed regardless if they are active or not.
	IsListed P2PAdvertiserInfoRespP2PAdvertiserInfoIsListed `json:"is_listed"`

	// Indicates if the advertiser is currently online.
	IsOnline P2PAdvertiserInfoRespP2PAdvertiserInfoIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2PAdvertiserInfoRespP2PAdvertiserInfoIsRecommended `json:"is_recommended,omitempty"`

	// Inidcates whether the advertiser's schedule allows P2P transactions at the
	// current time.
	IsScheduleAvailable P2PAdvertiserInfoRespP2PAdvertiserInfoIsScheduleAvailable `json:"is_schedule_available"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime *int `json:"last_online_time"`

	// Maximum order amount for adverts.
	MaxOrderAmount *string `json:"max_order_amount,omitempty"`

	// Sell ads will be hidden when your available balance or remaining daily sell
	// limit falls beneath this value.
	MinBalance *string `json:"min_balance,omitempty"`

	// Minimum order amount for adverts.
	MinOrderAmount *string `json:"min_order_amount,omitempty"`

	// The advertiser's displayed name.
	Name string `json:"name"`

	// Number of different users the advertiser has traded with since registration.
	PartnerCount int `json:"partner_count"`

	// Advertiser's payment information.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// Average rating of the advertiser, range is 1-5.
	RatingAverage *float64 `json:"rating_average"`

	// Number of ratings given to the advertiser.
	RatingCount int `json:"rating_count"`

	// Percentage of users who have recommended the advertiser.
	RecommendedAverage *float64 `json:"recommended_average"`

	// Number of times the advertiser has been recommended.
	RecommendedCount *int `json:"recommended_count"`

	// The average time in seconds taken to release funds as a seller within the past
	// 30 days.
	ReleaseTimeAvg *int `json:"release_time_avg"`

	// [Optional] Weekly availability schedule. Ads are visible and orders can be
	// created only during available periods.
	Schedule []P2PAdvertiserInfoRespP2PAdvertiserInfoScheduleElem `json:"schedule,omitempty"`

	// The percentage of completed orders out of total orders as a seller within the
	// past 30 days.
	SellCompletionRate *float64 `json:"sell_completion_rate"`

	// Sell order volume in the past 30 days.
	SellOrdersAmount string `json:"sell_orders_amount"`

	// The number of sell order orders completed within the past 30 days.
	SellOrdersCount int `json:"sell_orders_count"`

	// When `1`, the advertiser's real name will be displayed on to other users on
	// adverts and orders.
	ShowName *P2PAdvertiserInfoRespP2PAdvertiserInfoShowName `json:"show_name,omitempty"`

	// The percentage of completed orders out of all orders within the past 30 days.
	TotalCompletionRate *float64 `json:"total_completion_rate"`

	// The total number of orders completed since advertiser registration.
	TotalOrdersCount int `json:"total_orders_count"`

	// Total order volume since advertiser registration.
	TotalTurnover string `json:"total_turnover"`

	// New daily limits available.
	UpgradableDailyLimits *P2PAdvertiserInfoRespP2PAdvertiserInfoUpgradableDailyLimits `json:"upgradable_daily_limits,omitempty"`

	// Remaining withdrawal_limit of a non-fully authenticated advertiser.
	WithdrawalLimit *string `json:"withdrawal_limit,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespP2PAdvertiserInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["advert_rates"]; !ok || v == nil {
		return fmt.Errorf("field advert_rates in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["basic_verification"]; !ok || v == nil {
		return fmt.Errorf("field basic_verification in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["buy_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field buy_completion_rate in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["buy_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_amount in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["buy_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field buy_orders_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["buy_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field buy_time_avg in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["cancel_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field cancel_time_avg in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["default_advert_description"]; !ok || v == nil {
		return fmt.Errorf("field default_advert_description in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["full_verification"]; !ok || v == nil {
		return fmt.Errorf("field full_verification in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["is_approved"]; !ok || v == nil {
		return fmt.Errorf("field is_approved in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["is_listed"]; !ok || v == nil {
		return fmt.Errorf("field is_listed in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["is_schedule_available"]; !ok || v == nil {
		return fmt.Errorf("field is_schedule_available in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["partner_count"]; !ok || v == nil {
		return fmt.Errorf("field partner_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["rating_average"]; !ok || v == nil {
		return fmt.Errorf("field rating_average in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["rating_count"]; !ok || v == nil {
		return fmt.Errorf("field rating_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["recommended_average"]; !ok || v == nil {
		return fmt.Errorf("field recommended_average in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["recommended_count"]; !ok || v == nil {
		return fmt.Errorf("field recommended_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["release_time_avg"]; !ok || v == nil {
		return fmt.Errorf("field release_time_avg in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["sell_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field sell_completion_rate in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["sell_orders_amount"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_amount in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["sell_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field sell_orders_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["total_completion_rate"]; !ok || v == nil {
		return fmt.Errorf("field total_completion_rate in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["total_orders_count"]; !ok || v == nil {
		return fmt.Errorf("field total_orders_count in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	if v, ok := raw["total_turnover"]; !ok || v == nil {
		return fmt.Errorf("field total_turnover in P2PAdvertiserInfoRespP2PAdvertiserInfo: required")
	}
	type Plain P2PAdvertiserInfoRespP2PAdvertiserInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRespP2PAdvertiserInfo(plain)
	return nil
}

// For subscription requests only.
type P2PAdvertiserInfoRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2PAdvertiserInfoRespSubscription: required")
	}
	type Plain P2PAdvertiserInfoRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoRespSubscription(plain)
	return nil
}

// Returns information about the given advertiser ID.
type P2PAdvertiserInfoResp struct {
	// Echo of the request made.
	EchoReq P2PAdvertiserInfoRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2PAdvertiserInfoRespMsgType `json:"msg_type"`

	// P2P advertiser information.
	P2PAdvertiserInfo *P2PAdvertiserInfoRespP2PAdvertiserInfo `json:"p2p_advertiser_info,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2PAdvertiserInfoRespSubscription `json:"subscription,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in P2PAdvertiserInfoResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in P2PAdvertiserInfoResp: required")
	}
	type Plain P2PAdvertiserInfoResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfoResp(plain)
	return nil
}
