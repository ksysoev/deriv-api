// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Create a new account real-money wallet account and a real-money trading account.
type NewAccountWalletAndTradingResp struct {
	// Echo of the request made.
	EchoReq NewAccountWalletAndTradingRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountWalletAndTradingRespMsgType `json:"msg_type"`

	// Details of newly created wallet and trading accounts.
	NewAccountWalletAndTrading []interface{} `json:"new_account_wallet_and_trading,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountWalletAndTradingRespEchoReq map[string]interface{}

type NewAccountWalletAndTradingRespMsgType string

const NewAccountWalletAndTradingRespMsgTypeNewAccountWalletAndTrading NewAccountWalletAndTradingRespMsgType = "new_account_wallet_and_trading"

var enumValues_NewAccountWalletAndTradingRespMsgType = []interface{}{
	"new_account_wallet_and_trading",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletAndTradingRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountWalletAndTradingRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountWalletAndTradingRespMsgType, v)
	}
	*j = NewAccountWalletAndTradingRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountWalletAndTradingResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountWalletAndTradingResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountWalletAndTradingResp: required")
	}
	type Plain NewAccountWalletAndTradingResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountWalletAndTradingResp(plain)
	return nil
}
