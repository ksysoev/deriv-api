// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Result of the P2P order cancellation.
type P2POrderCancelResp struct {
	// Echo of the request made.
	EchoReq P2POrderCancelRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderCancelRespMsgType `json:"msg_type"`

	// Cancellation details
	P2POrderCancel *P2POrderCancelRespP2POrderCancel `json:"p2p_order_cancel,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderCancelRespEchoReq map[string]interface{}

type P2POrderCancelRespMsgType string

const P2POrderCancelRespMsgTypeP2POrderCancel P2POrderCancelRespMsgType = "p2p_order_cancel"

// Cancellation details
type P2POrderCancelRespP2POrderCancel struct {
	// The unique identifier for the order.
	Id string `json:"id"`

	// The new status of the order.
	Status P2POrderCancelRespP2POrderCancelStatus `json:"status"`
}

type P2POrderCancelRespP2POrderCancelStatus string

var enumValues_P2POrderCancelRespP2POrderCancelStatus = []interface{}{
	"cancelled",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelRespP2POrderCancelStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCancelRespP2POrderCancelStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCancelRespP2POrderCancelStatus, v)
	}
	*j = P2POrderCancelRespP2POrderCancelStatus(v)
	return nil
}

const P2POrderCancelRespP2POrderCancelStatusCancelled P2POrderCancelRespP2POrderCancelStatus = "cancelled"

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderCancelRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderCancelRespMsgType, v)
	}
	*j = P2POrderCancelRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelRespP2POrderCancel) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2POrderCancelRespP2POrderCancel: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status in P2POrderCancelRespP2POrderCancel: required")
	}
	type Plain P2POrderCancelRespP2POrderCancel
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCancelRespP2POrderCancel(plain)
	return nil
}

var enumValues_P2POrderCancelRespMsgType = []interface{}{
	"p2p_order_cancel",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderCancelResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in P2POrderCancelResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in P2POrderCancelResp: required")
	}
	type Plain P2POrderCancelResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderCancelResp(plain)
	return nil
}
