// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve statistics of `app_markup`.
type AppMarkupStatistics struct {
	// Must be `1`
	AppMarkupStatistics AppMarkupStatisticsAppMarkupStatistics `json:"app_markup_statistics"`

	// Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
	DateFrom string `json:"date_from"`

	// End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
	DateTo string `json:"date_to"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppMarkupStatisticsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type AppMarkupStatisticsAppMarkupStatistics int

var enumValues_AppMarkupStatisticsAppMarkupStatistics = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatisticsAppMarkupStatistics) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupStatisticsAppMarkupStatistics {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupStatisticsAppMarkupStatistics, v)
	}
	*j = AppMarkupStatisticsAppMarkupStatistics(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppMarkupStatisticsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupStatistics) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["app_markup_statistics"]; raw != nil && !ok {
		return fmt.Errorf("field app_markup_statistics in AppMarkupStatistics: required")
	}
	if _, ok := raw["date_from"]; raw != nil && !ok {
		return fmt.Errorf("field date_from in AppMarkupStatistics: required")
	}
	if _, ok := raw["date_to"]; raw != nil && !ok {
		return fmt.Errorf("field date_to in AppMarkupStatistics: required")
	}
	type Plain AppMarkupStatistics
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppMarkupStatistics(plain)
	return nil
}
