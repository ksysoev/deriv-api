// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Set Self-Exclusion (this call should be used in conjunction with
// `get_self_exclusion`)
type SetSelfExclusion struct {
	// [Optional] Exclude me from the website (for a minimum of 6 months, up to a
	// maximum of 5 years). Note: uplifting this self-exclusion may require contacting
	// the company.
	ExcludeUntil *string `json:"exclude_until,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] 7-day limit on deposits.
	Max30DayDeposit *float64 `json:"max_30day_deposit,omitempty"`

	// [Optional] 30-day limit on losses.
	Max30DayLosses *float64 `json:"max_30day_losses,omitempty"`

	// [Optional] 30-day turnover limit.
	Max30DayTurnover *float64 `json:"max_30day_turnover,omitempty"`

	// [Optional] 7-day limit on deposits.
	Max7DayDeposit *float64 `json:"max_7day_deposit,omitempty"`

	// [Optional] 7-day limit on losses.
	Max7DayLosses *float64 `json:"max_7day_losses,omitempty"`

	// [Optional] 7-day turnover limit.
	Max7DayTurnover *float64 `json:"max_7day_turnover,omitempty"`

	// [Optional] Maximum account cash balance.
	MaxBalance *float64 `json:"max_balance,omitempty"`

	// [Optional] Daily deposit limit.
	MaxDeposit *float64 `json:"max_deposit,omitempty"`

	// [Optional] Daily limit on losses.
	MaxLosses *float64 `json:"max_losses,omitempty"`

	// [Optional] Maximum number of open positions.
	MaxOpenBets *int `json:"max_open_bets,omitempty"`

	// [Optional] Daily turnover limit.
	MaxTurnover *float64 `json:"max_turnover,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetSelfExclusionPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Session duration limit, in minutes.
	SessionDurationLimit *int `json:"session_duration_limit,omitempty"`

	// Must be `1`
	SetSelfExclusion SetSelfExclusionSetSelfExclusion `json:"set_self_exclusion"`

	// [Optional] Exclude me from the website (for up to 6 weeks). Requires time in
	// epoch format. Note: unlike `exclude_until`, this self-exclusion will be lifted
	// automatically at the expiry of the timeout period.
	TimeoutUntil *int `json:"timeout_until,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetSelfExclusionPassthrough map[string]interface{}

type SetSelfExclusionSetSelfExclusion int

var enumValues_SetSelfExclusionSetSelfExclusion = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionSetSelfExclusion) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSelfExclusionSetSelfExclusion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSelfExclusionSetSelfExclusion, v)
	}
	*j = SetSelfExclusionSetSelfExclusion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusion) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["set_self_exclusion"]; raw != nil && !ok {
		return fmt.Errorf("field set_self_exclusion in SetSelfExclusion: required")
	}
	type Plain SetSelfExclusion
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSelfExclusion(plain)
	return nil
}
