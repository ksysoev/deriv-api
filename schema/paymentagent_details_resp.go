// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Gets client's payment agent details.
type PaymentagentDetailsResp struct {
	// Echo of the request made.
	EchoReq PaymentagentDetailsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentDetailsRespMsgType `json:"msg_type"`

	// Used to pass data through the websocket, which may be retrieved via the
	// `echo_req` output field.
	Passthrough PaymentagentDetailsRespPassthrough `json:"passthrough,omitempty"`

	// The payment agent details.
	PaymentagentDetails *PaymentagentDetailsRespPaymentagentDetails `json:"paymentagent_details,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentDetailsRespEchoReq map[string]interface{}

type PaymentagentDetailsRespMsgType string

const PaymentagentDetailsRespMsgTypePaymentagentDetails PaymentagentDetailsRespMsgType = "paymentagent_details"

var enumValues_PaymentagentDetailsRespMsgType = []interface{}{
	"paymentagent_details",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsRespMsgType, v)
	}
	*j = PaymentagentDetailsRespMsgType(v)
	return nil
}

// Used to pass data through the websocket, which may be retrieved via the
// `echo_req` output field.
type PaymentagentDetailsRespPassthrough map[string]interface{}

// The payment agent details.
type PaymentagentDetailsRespPaymentagentDetails struct {
	// Client's My Affiliate id, if exists.
	AffiliateId *string `json:"affiliate_id,omitempty"`

	// If 1, the client may apply using paymentagent_create.
	CanApply PaymentagentDetailsRespPaymentagentDetailsCanApply `json:"can_apply"`

	// Indicates client's agreement with the Code of Conduct document.
	CodeOfConductApproval *PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval `json:"code_of_conduct_approval,omitempty"`

	// Commission (%) the agent want to take on deposits
	CommissionDeposit *float64 `json:"commission_deposit,omitempty"`

	// Commission (%) the agent want to take on withdrawals
	CommissionWithdrawal *float64 `json:"commission_withdrawal,omitempty"`

	// Currency supported by the payment agent. It's usually the same as agent's Deriv
	// account currency.
	CurrencyCode *string `json:"currency_code,omitempty"`

	// Contains a list of error codes that would prevent a successful payment agent
	// application.
	EligibiltyValidation []string `json:"eligibilty_validation,omitempty"`

	// Payment agent's email address.
	Email *string `json:"email,omitempty"`

	// Information about payment agent and their proposed service.
	Information *string `json:"information,omitempty"`

	// Maximum amount allowed for withdrawals
	MaxWithdrawal *float64 `json:"max_withdrawal,omitempty"`

	// Minimum amount allowed for withdrawals
	MinWithdrawal *float64 `json:"min_withdrawal,omitempty"`

	// Indicates if the payment agent was recently approved with no transactions yet.
	NewlyAuthorized *PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized `json:"newly_authorized,omitempty"`

	// The name with which the payment agent is going to be identified.
	PaymentAgentName *string `json:"payment_agent_name,omitempty"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentDetailsRespPaymentagentDetailsPhoneNumbersElem `json:"phone_numbers,omitempty"`

	// Indicates the status of the Payment Agent.
	Status interface{} `json:"status,omitempty"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentDetailsRespPaymentagentDetailsSupportedPaymentMethodsElem `json:"supported_payment_methods,omitempty"`

	// Client's target country.
	TargetCountry *string `json:"target_country,omitempty"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentDetailsRespPaymentagentDetailsUrlsElem `json:"urls,omitempty"`
}

type PaymentagentDetailsRespPaymentagentDetailsCanApply int

var enumValues_PaymentagentDetailsRespPaymentagentDetailsCanApply = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRespPaymentagentDetailsCanApply) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsRespPaymentagentDetailsCanApply {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsRespPaymentagentDetailsCanApply, v)
	}
	*j = PaymentagentDetailsRespPaymentagentDetailsCanApply(v)
	return nil
}

type PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval int

var enumValues_PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval, v)
	}
	*j = PaymentagentDetailsRespPaymentagentDetailsCodeOfConductApproval(v)
	return nil
}

type PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized int

var enumValues_PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized, v)
	}
	*j = PaymentagentDetailsRespPaymentagentDetailsNewlyAuthorized(v)
	return nil
}

type PaymentagentDetailsRespPaymentagentDetailsPhoneNumbersElem struct {
	// A phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
}

type PaymentagentDetailsRespPaymentagentDetailsSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type PaymentagentDetailsRespPaymentagentDetailsUrlsElem struct {
	// A website url.
	Url *string `json:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsRespPaymentagentDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["can_apply"]; raw != nil && !ok {
		return fmt.Errorf("field can_apply in PaymentagentDetailsRespPaymentagentDetails: required")
	}
	type Plain PaymentagentDetailsRespPaymentagentDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentDetailsRespPaymentagentDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentDetailsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PaymentagentDetailsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PaymentagentDetailsResp: required")
	}
	type Plain PaymentagentDetailsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentDetailsResp(plain)
	return nil
}
