// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Updates and returns favourite and blocked advertisers of the current user.
type P2PAdvertiserRelations struct {
	// IDs of advertisers to block.
	AddBlocked []float64 `json:"add_blocked,omitempty"`

	// IDs of advertisers to add as favourites.
	AddFavourites []float64 `json:"add_favourites,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be 1
	P2PAdvertiserRelations P2PAdvertiserRelationsP2PAdvertiserRelations `json:"p2p_advertiser_relations"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserRelationsPassthrough `json:"passthrough,omitempty"`

	// IDs of advertisers to remove from blocked.
	RemoveBlocked []float64 `json:"remove_blocked,omitempty"`

	// IDs of advertisers to remove from favourites.
	RemoveFavourites []float64 `json:"remove_favourites,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PAdvertiserRelationsP2PAdvertiserRelations int

var enumValues_P2PAdvertiserRelationsP2PAdvertiserRelations = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelationsP2PAdvertiserRelations) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserRelationsP2PAdvertiserRelations {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserRelationsP2PAdvertiserRelations, v)
	}
	*j = P2PAdvertiserRelationsP2PAdvertiserRelations(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserRelationsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserRelations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["p2p_advertiser_relations"]; raw != nil && !ok {
		return fmt.Errorf("field p2p_advertiser_relations in P2PAdvertiserRelations: required")
	}
	type Plain P2PAdvertiserRelations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.AddBlocked != nil && len(plain.AddBlocked) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "add_blocked", 1)
	}
	if len(plain.AddBlocked) > 5 {
		return fmt.Errorf("field %s length: must be <= %d", "add_blocked", 5)
	}
	if plain.AddFavourites != nil && len(plain.AddFavourites) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "add_favourites", 1)
	}
	if len(plain.AddFavourites) > 5 {
		return fmt.Errorf("field %s length: must be <= %d", "add_favourites", 5)
	}
	if plain.RemoveBlocked != nil && len(plain.RemoveBlocked) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "remove_blocked", 1)
	}
	if len(plain.RemoveBlocked) > 5 {
		return fmt.Errorf("field %s length: must be <= %d", "remove_blocked", 5)
	}
	if plain.RemoveFavourites != nil && len(plain.RemoveFavourites) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "remove_favourites", 1)
	}
	if len(plain.RemoveFavourites) > 5 {
		return fmt.Errorf("field %s length: must be <= %d", "remove_favourites", 5)
	}
	*j = P2PAdvertiserRelations(plain)
	return nil
}
