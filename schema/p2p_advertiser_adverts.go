// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Returns all P2P adverts created by the authorized client. Can only be used by a
// registered P2P advertiser.
type P2PAdvertiserAdverts struct {
	// [Optional] Used for paging. This value will also apply to subsription
	// responses.
	Limit int `json:"limit,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used for paging. This value will also apply to subsription
	// responses.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2PAdvertiserAdverts P2PAdvertiserAdvertsP2PAdvertiserAdverts `json:"p2p_advertiser_adverts"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserAdvertsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type P2PAdvertiserAdvertsP2PAdvertiserAdverts int

var enumValues_P2PAdvertiserAdvertsP2PAdvertiserAdverts = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdvertsP2PAdvertiserAdverts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserAdvertsP2PAdvertiserAdverts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserAdvertsP2PAdvertiserAdverts, v)
	}
	*j = P2PAdvertiserAdvertsP2PAdvertiserAdverts(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserAdvertsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserAdverts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["p2p_advertiser_adverts"]; raw != nil && !ok {
		return fmt.Errorf("field p2p_advertiser_adverts in P2PAdvertiserAdverts: required")
	}
	type Plain P2PAdvertiserAdverts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50.0
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0.0
	}
	*j = P2PAdvertiserAdverts(plain)
	return nil
}
