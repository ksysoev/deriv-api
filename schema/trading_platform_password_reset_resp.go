// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The result of the Trading Platform password reset.
type TradingPlatformPasswordResetResp struct {
	// Echo of the request made.
	EchoReq TradingPlatformPasswordResetRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingPlatformPasswordResetRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// If set to 1, the password has been reset.
	TradingPlatformPasswordReset *TradingPlatformPasswordResetRespTradingPlatformPasswordReset `json:"trading_platform_password_reset,omitempty"`
}

// Echo of the request made.
type TradingPlatformPasswordResetRespEchoReq map[string]interface{}

type TradingPlatformPasswordResetRespMsgType string

const TradingPlatformPasswordResetRespMsgTypeTradingPlatformPasswordReset TradingPlatformPasswordResetRespMsgType = "trading_platform_password_reset"

var enumValues_TradingPlatformPasswordResetRespMsgType = []interface{}{
	"trading_platform_password_reset",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetRespMsgType, v)
	}
	*j = TradingPlatformPasswordResetRespMsgType(v)
	return nil
}

type TradingPlatformPasswordResetRespTradingPlatformPasswordReset int

var enumValues_TradingPlatformPasswordResetRespTradingPlatformPasswordReset = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetRespTradingPlatformPasswordReset) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingPlatformPasswordResetRespTradingPlatformPasswordReset {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingPlatformPasswordResetRespTradingPlatformPasswordReset, v)
	}
	*j = TradingPlatformPasswordResetRespTradingPlatformPasswordReset(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingPlatformPasswordResetResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in TradingPlatformPasswordResetResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in TradingPlatformPasswordResetResp: required")
	}
	type Plain TradingPlatformPasswordResetResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingPlatformPasswordResetResp(plain)
	return nil
}
