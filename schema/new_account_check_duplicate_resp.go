// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Response for checking if provided account details (name and DOB, or phone and
// DOB) match an existing account.
type NewAccountCheckDuplicateResp struct {
	// Echo of the request made.
	EchoReq NewAccountCheckDuplicateRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountCheckDuplicateRespMsgType `json:"msg_type"`

	// The result of checking for duplicate account details
	NewAccountCheckDuplicate *NewAccountCheckDuplicateRespNewAccountCheckDuplicate `json:"new_account_check_duplicate,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountCheckDuplicateRespEchoReq map[string]interface{}

type NewAccountCheckDuplicateRespMsgType string

const NewAccountCheckDuplicateRespMsgTypeNewAccountCheckDuplicate NewAccountCheckDuplicateRespMsgType = "new_account_check_duplicate"

var enumValues_NewAccountCheckDuplicateRespMsgType = []interface{}{
	"new_account_check_duplicate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountCheckDuplicateRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountCheckDuplicateRespMsgType, v)
	}
	*j = NewAccountCheckDuplicateRespMsgType(v)
	return nil
}

// The result of checking for duplicate account details
type NewAccountCheckDuplicateRespNewAccountCheckDuplicate struct {
	// 1 if a matching account was found, 0 if not
	HasDuplicate NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate `json:"has_duplicate"`
}

type NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate int

var enumValues_NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate, v)
	}
	*j = NewAccountCheckDuplicateRespNewAccountCheckDuplicateHasDuplicate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateRespNewAccountCheckDuplicate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["has_duplicate"]; raw != nil && !ok {
		return fmt.Errorf("field has_duplicate in NewAccountCheckDuplicateRespNewAccountCheckDuplicate: required")
	}
	type Plain NewAccountCheckDuplicateRespNewAccountCheckDuplicate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountCheckDuplicateRespNewAccountCheckDuplicate(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountCheckDuplicateResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountCheckDuplicateResp: required")
	}
	type Plain NewAccountCheckDuplicateResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountCheckDuplicateResp(plain)
	return nil
}
