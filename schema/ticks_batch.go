// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Initiate a continuous stream of spot price updates for a group symbols.
type TicksBatch struct {
	// The short market name.
	Market TicksBatchMarket `json:"market"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TicksBatchPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates in batches by market.
	Subscribe *TicksBatchSubscribe `json:"subscribe,omitempty"`

	// Must be `1`
	TicksBatch TicksBatchTicksBatch `json:"ticks_batch"`
}

type TicksBatchMarket string

const TicksBatchMarketCommodities TicksBatchMarket = "commodities"
const TicksBatchMarketCryptocurrency TicksBatchMarket = "cryptocurrency"
const TicksBatchMarketForex TicksBatchMarket = "forex"
const TicksBatchMarketIndices TicksBatchMarket = "indices"
const TicksBatchMarketStocks TicksBatchMarket = "stocks"
const TicksBatchMarketSyntheticIndex TicksBatchMarket = "synthetic_index"

var enumValues_TicksBatchMarket = []interface{}{
	"forex",
	"indices",
	"commodities",
	"stocks",
	"cryptocurrency",
	"synthetic_index",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksBatchMarket) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksBatchMarket {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksBatchMarket, v)
	}
	*j = TicksBatchMarket(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TicksBatchPassthrough map[string]interface{}

type TicksBatchSubscribe int

var enumValues_TicksBatchSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksBatchSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksBatchSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksBatchSubscribe, v)
	}
	*j = TicksBatchSubscribe(v)
	return nil
}

type TicksBatchTicksBatch int

var enumValues_TicksBatchTicksBatch = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksBatchTicksBatch) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksBatchTicksBatch {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksBatchTicksBatch, v)
	}
	*j = TicksBatchTicksBatch(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksBatch) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["market"]; raw != nil && !ok {
		return fmt.Errorf("field market in TicksBatch: required")
	}
	if _, ok := raw["ticks_batch"]; raw != nil && !ok {
		return fmt.Errorf("field ticks_batch in TicksBatch: required")
	}
	type Plain TicksBatch
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TicksBatch(plain)
	return nil
}
