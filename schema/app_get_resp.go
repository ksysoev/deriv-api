// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The information of the requested application.
type AppGetRespAppGet struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId int `json:"app_id"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage float64 `json:"app_markup_percentage"`

	// Application's App Store URL.
	Appstore string `json:"appstore"`

	// Application's GitHub page (for open-source projects).
	Github string `json:"github"`

	// Application's Google Play URL.
	Googleplay string `json:"googleplay"`

	// Application's homepage URL.
	Homepage string `json:"homepage"`

	// Application name.
	Name string `json:"name"`

	// The URL to redirect to after a successful login.
	RedirectUri string `json:"redirect_uri"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri string `json:"verification_uri"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetRespAppGet) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_id"]; !ok || v == nil {
		return fmt.Errorf("field app_id in AppGetRespAppGet: required")
	}
	if v, ok := raw["app_markup_percentage"]; !ok || v == nil {
		return fmt.Errorf("field app_markup_percentage in AppGetRespAppGet: required")
	}
	if v, ok := raw["appstore"]; !ok || v == nil {
		return fmt.Errorf("field appstore in AppGetRespAppGet: required")
	}
	if v, ok := raw["github"]; !ok || v == nil {
		return fmt.Errorf("field github in AppGetRespAppGet: required")
	}
	if v, ok := raw["googleplay"]; !ok || v == nil {
		return fmt.Errorf("field googleplay in AppGetRespAppGet: required")
	}
	if v, ok := raw["homepage"]; !ok || v == nil {
		return fmt.Errorf("field homepage in AppGetRespAppGet: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in AppGetRespAppGet: required")
	}
	if v, ok := raw["redirect_uri"]; !ok || v == nil {
		return fmt.Errorf("field redirect_uri in AppGetRespAppGet: required")
	}
	if v, ok := raw["verification_uri"]; !ok || v == nil {
		return fmt.Errorf("field verification_uri in AppGetRespAppGet: required")
	}
	type Plain AppGetRespAppGet
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppGetRespAppGet(plain)
	return nil
}

// Echo of the request made.
type AppGetRespEchoReq map[string]interface{}

type AppGetRespMsgType string

var enumValues_AppGetRespMsgType = []interface{}{
	"app_get",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppGetRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppGetRespMsgType, v)
	}
	*j = AppGetRespMsgType(v)
	return nil
}

// A message with requested application details
type AppGetResp struct {
	// The information of the requested application.
	AppGet *AppGetRespAppGet `json:"app_get,omitempty"`

	// Echo of the request made.
	EchoReq AppGetRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppGetRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const AppGetRespMsgTypeAppGet AppGetRespMsgType = "app_get"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppGetResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in AppGetResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in AppGetResp: required")
	}
	type Plain AppGetResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppGetResp(plain)
	return nil
}
