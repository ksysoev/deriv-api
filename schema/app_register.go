// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Register a new OAuth application
type AppRegister struct {
	// [Optional] Markup to be added to contract prices (as a percentage of contract
	// payout). Max markup: 3%.
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Must be `1`
	AppRegister AppRegisterAppRegister `json:"app_register"`

	// [Optional] Application's App Store URL (if applicable).
	Appstore *string `json:"appstore,omitempty"`

	// [Optional] Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// [Optional] Application's Google Play URL (if applicable).
	Googleplay *string `json:"googleplay,omitempty"`

	// [Optional] Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Application name.
	Name string `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppRegisterPassthrough `json:"passthrough,omitempty"`

	// [Optional] The URL to redirect to after a successful login. Required if
	// charging markup percentage
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// List of permission scopes to grant the application.
	Scopes []AppRegisterScopesElem `json:"scopes"`

	// [Optional] Used when `verify_email` called. If available, a URL containing the
	// verification token will be sent to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

type AppRegisterAppRegister int

var enumValues_AppRegisterAppRegister = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterAppRegister) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppRegisterAppRegister {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppRegisterAppRegister, v)
	}
	*j = AppRegisterAppRegister(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppRegisterPassthrough map[string]interface{}

type AppRegisterScopesElem string

const AppRegisterScopesElemAdmin AppRegisterScopesElem = "admin"
const AppRegisterScopesElemPayments AppRegisterScopesElem = "payments"
const AppRegisterScopesElemRead AppRegisterScopesElem = "read"
const AppRegisterScopesElemTrade AppRegisterScopesElem = "trade"
const AppRegisterScopesElemTradingInformation AppRegisterScopesElem = "trading_information"

var enumValues_AppRegisterScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegisterScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppRegisterScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppRegisterScopesElem, v)
	}
	*j = AppRegisterScopesElem(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppRegister) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["app_register"]; raw != nil && !ok {
		return fmt.Errorf("field app_register in AppRegister: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in AppRegister: required")
	}
	if _, ok := raw["scopes"]; raw != nil && !ok {
		return fmt.Errorf("field scopes in AppRegister: required")
	}
	type Plain AppRegister
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppRegister(plain)
	return nil
}
