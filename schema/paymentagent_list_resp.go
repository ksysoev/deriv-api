// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with Payment Agent List
type PaymentagentListResp struct {
	// Echo of the request made.
	EchoReq PaymentagentListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PaymentagentListRespMsgType `json:"msg_type"`

	// Payment Agent List
	PaymentagentList *PaymentagentListRespPaymentagentList `json:"paymentagent_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PaymentagentListRespEchoReq map[string]interface{}

type PaymentagentListRespMsgType string

const PaymentagentListRespMsgTypePaymentagentList PaymentagentListRespMsgType = "paymentagent_list"

var enumValues_PaymentagentListRespMsgType = []interface{}{
	"paymentagent_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentListRespMsgType, v)
	}
	*j = PaymentagentListRespMsgType(v)
	return nil
}

// Payment Agent List
type PaymentagentListRespPaymentagentList struct {
	// The list of countries in which payment agent is available.
	AvailableCountries [][]*string `json:"available_countries,omitempty"`

	// List of payment agents available in the requested country.
	List []PaymentagentListRespPaymentagentListListElem `json:"list"`
}

type PaymentagentListRespPaymentagentListListElem struct {
	// Currencies that are accepted by this payment agent.
	Currencies string `json:"currencies"`

	// Commission amount applied on deposits made through this payment agent.
	DepositCommission string `json:"deposit_commission"`

	// Payment agent's email address.
	Email string `json:"email"`

	// More descriptions about this payment agent.
	FurtherInformation string `json:"further_information"`

	// Maximum withdrawal allowed for transactions through this payment agent.
	MaxWithdrawal *string `json:"max_withdrawal"`

	// Minimum withdrawal allowed for transactions through this payment agent.
	MinWithdrawal *string `json:"min_withdrawal"`

	// Payment agent's name.
	Name string `json:"name"`

	// Payment agent's loginid.
	PaymentagentLoginid string `json:"paymentagent_loginid"`

	// Payment agent's phone number(s) with country code.
	PhoneNumbers []PaymentagentListRespPaymentagentListListElemPhoneNumbersElem `json:"phone_numbers"`

	// A summary about payment agent.
	Summary string `json:"summary"`

	// A list of supported payment methods.
	SupportedPaymentMethods []PaymentagentListRespPaymentagentListListElemSupportedPaymentMethodsElem `json:"supported_payment_methods"`

	// The URL(s) of payment agent's website(s).
	Urls []PaymentagentListRespPaymentagentListListElemUrlsElem `json:"urls"`

	// Commission amount applied on withdrawals made through this payment agent.
	WithdrawalCommission string `json:"withdrawal_commission"`
}

type PaymentagentListRespPaymentagentListListElemPhoneNumbersElem struct {
	// A phone number
	PhoneNumber *string `json:"phone_number,omitempty"`
}

type PaymentagentListRespPaymentagentListListElemSupportedPaymentMethodsElem struct {
	// A payment method's name
	PaymentMethod *string `json:"payment_method,omitempty"`
}

type PaymentagentListRespPaymentagentListListElemUrlsElem struct {
	// A webpage or website's URL.
	Url *string `json:"url,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListRespPaymentagentListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["currencies"]; raw != nil && !ok {
		return fmt.Errorf("field currencies in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["deposit_commission"]; raw != nil && !ok {
		return fmt.Errorf("field deposit_commission in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["email"]; raw != nil && !ok {
		return fmt.Errorf("field email in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["further_information"]; raw != nil && !ok {
		return fmt.Errorf("field further_information in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["max_withdrawal"]; raw != nil && !ok {
		return fmt.Errorf("field max_withdrawal in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["min_withdrawal"]; raw != nil && !ok {
		return fmt.Errorf("field min_withdrawal in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["paymentagent_loginid"]; raw != nil && !ok {
		return fmt.Errorf("field paymentagent_loginid in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["phone_numbers"]; raw != nil && !ok {
		return fmt.Errorf("field phone_numbers in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["summary"]; raw != nil && !ok {
		return fmt.Errorf("field summary in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["supported_payment_methods"]; raw != nil && !ok {
		return fmt.Errorf("field supported_payment_methods in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["urls"]; raw != nil && !ok {
		return fmt.Errorf("field urls in PaymentagentListRespPaymentagentListListElem: required")
	}
	if _, ok := raw["withdrawal_commission"]; raw != nil && !ok {
		return fmt.Errorf("field withdrawal_commission in PaymentagentListRespPaymentagentListListElem: required")
	}
	type Plain PaymentagentListRespPaymentagentListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListRespPaymentagentListListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListRespPaymentagentList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["list"]; raw != nil && !ok {
		return fmt.Errorf("field list in PaymentagentListRespPaymentagentList: required")
	}
	type Plain PaymentagentListRespPaymentagentList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListRespPaymentagentList(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PaymentagentListResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PaymentagentListResp: required")
	}
	type Plain PaymentagentListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentListResp(plain)
	return nil
}
