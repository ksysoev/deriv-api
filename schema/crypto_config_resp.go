// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The response will display the configuration details related to cryptocurrencies
type CryptoConfigResp struct {
	// Provides cryptocurrencies configuration.
	CryptoConfig *CryptoConfigRespCryptoConfig `json:"crypto_config,omitempty"`

	// Echo of the request made.
	EchoReq CryptoConfigRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CryptoConfigRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Provides cryptocurrencies configuration.
type CryptoConfigRespCryptoConfig struct {
	// Currency configuration including limitiations for each crypto currency.
	CurrenciesConfig CryptoConfigRespCryptoConfigCurrenciesConfig `json:"currencies_config"`
}

// Currency configuration including limitiations for each crypto currency.
type CryptoConfigRespCryptoConfigCurrenciesConfig map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigRespCryptoConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["currencies_config"]; raw != nil && !ok {
		return fmt.Errorf("field currencies_config in CryptoConfigRespCryptoConfig: required")
	}
	type Plain CryptoConfigRespCryptoConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoConfigRespCryptoConfig(plain)
	return nil
}

// Echo of the request made.
type CryptoConfigRespEchoReq map[string]interface{}

type CryptoConfigRespMsgType string

const CryptoConfigRespMsgTypeCryptoConfig CryptoConfigRespMsgType = "crypto_config"

var enumValues_CryptoConfigRespMsgType = []interface{}{
	"crypto_config",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoConfigRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoConfigRespMsgType, v)
	}
	*j = CryptoConfigRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoConfigResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in CryptoConfigResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in CryptoConfigResp: required")
	}
	type Plain CryptoConfigResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoConfigResp(plain)
	return nil
}
