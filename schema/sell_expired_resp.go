// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type SellExpiredRespEchoReq map[string]interface{}

type SellExpiredRespMsgType string

var enumValues_SellExpiredRespMsgType = []interface{}{
	"sell_expired",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellExpiredRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellExpiredRespMsgType, v)
	}
	*j = SellExpiredRespMsgType(v)
	return nil
}

// The result of sell expired contract
type SellExpiredResp struct {
	// Echo of the request made.
	EchoReq SellExpiredRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SellExpiredRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Sell expired contract object containing count of contracts sold
	SellExpired *SellExpiredRespSellExpired `json:"sell_expired,omitempty"`
}

const SellExpiredRespMsgTypeSellExpired SellExpiredRespMsgType = "sell_expired"

// Sell expired contract object containing count of contracts sold
type SellExpiredRespSellExpired struct {
	// The number of contracts that has been sold.
	Count *int `json:"count,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in SellExpiredResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in SellExpiredResp: required")
	}
	type Plain SellExpiredResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellExpiredResp(plain)
	return nil
}
