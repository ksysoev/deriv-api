// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Check if name and date of birth match an existing account.
type NewAccountCheckDuplicateNameAndDob struct {
	// Date of birth format: yyyy-mm-dd
	DateOfBirth string `json:"date_of_birth"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName string `json:"first_name"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName string `json:"last_name"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Set to 1 to check for duplicate name and date of birth.
	NewAccountCheckDuplicateNameAndDob NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob `json:"new_account_check_duplicate_name_and_dob"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewAccountCheckDuplicateNameAndDobPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob int

var enumValues_NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob, v)
	}
	*j = NewAccountCheckDuplicateNameAndDobNewAccountCheckDuplicateNameAndDob(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewAccountCheckDuplicateNameAndDobPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDob) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["date_of_birth"]; raw != nil && !ok {
		return fmt.Errorf("field date_of_birth in NewAccountCheckDuplicateNameAndDob: required")
	}
	if _, ok := raw["first_name"]; raw != nil && !ok {
		return fmt.Errorf("field first_name in NewAccountCheckDuplicateNameAndDob: required")
	}
	if _, ok := raw["last_name"]; raw != nil && !ok {
		return fmt.Errorf("field last_name in NewAccountCheckDuplicateNameAndDob: required")
	}
	if _, ok := raw["new_account_check_duplicate_name_and_dob"]; raw != nil && !ok {
		return fmt.Errorf("field new_account_check_duplicate_name_and_dob in NewAccountCheckDuplicateNameAndDob: required")
	}
	type Plain NewAccountCheckDuplicateNameAndDob
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountCheckDuplicateNameAndDob(plain)
	return nil
}
