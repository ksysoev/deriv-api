// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Returns the questionnaire structure defining the financial assessment questions
// and logic
type FinancialAssessmentQuestionsResp struct {
	// Echo of the request made.
	EchoReq FinancialAssessmentQuestionsRespEchoReq `json:"echo_req"`

	// The financial assessment questionnaire structure
	FinancialAssessmentQuestions *FinancialAssessmentQuestionsRespFinancialAssessmentQuestions `json:"financial_assessment_questions,omitempty"`

	// Action name of the request made.
	MsgType FinancialAssessmentQuestionsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type FinancialAssessmentQuestionsRespEchoReq map[string]interface{}

// The financial assessment questionnaire structure
type FinancialAssessmentQuestionsRespFinancialAssessmentQuestions struct {
	// Object containing the questions and possible answers
	Questions FinancialAssessmentQuestionsRespFinancialAssessmentQuestionsQuestions `json:"questions,omitempty"`

	// The version of the financial assessment questionnaire.
	Version *string `json:"version,omitempty"`
}

// Object containing the questions and possible answers
type FinancialAssessmentQuestionsRespFinancialAssessmentQuestionsQuestions map[string]interface{}

type FinancialAssessmentQuestionsRespMsgType string

const FinancialAssessmentQuestionsRespMsgTypeFinancialAssessmentQuestions FinancialAssessmentQuestionsRespMsgType = "financial_assessment_questions"

var enumValues_FinancialAssessmentQuestionsRespMsgType = []interface{}{
	"financial_assessment_questions",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FinancialAssessmentQuestionsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_FinancialAssessmentQuestionsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_FinancialAssessmentQuestionsRespMsgType, v)
	}
	*j = FinancialAssessmentQuestionsRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FinancialAssessmentQuestionsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in FinancialAssessmentQuestionsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in FinancialAssessmentQuestionsResp: required")
	}
	type Plain FinancialAssessmentQuestionsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FinancialAssessmentQuestionsResp(plain)
	return nil
}
