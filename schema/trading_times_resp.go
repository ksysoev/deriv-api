// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// A message with Trading Times
type TradingTimesResp struct {
	// Echo of the request made.
	EchoReq TradingTimesRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingTimesRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// The trading times structure is a hierarchy as follows: Market -> SubMarket ->
	// Underlyings
	TradingTimes *TradingTimesRespTradingTimes `json:"trading_times,omitempty"`
}

// Echo of the request made.
type TradingTimesRespEchoReq map[string]interface{}

type TradingTimesRespMsgType string

const TradingTimesRespMsgTypeTradingTimes TradingTimesRespMsgType = "trading_times"

// The trading times structure is a hierarchy as follows: Market -> SubMarket ->
// Underlyings
type TradingTimesRespTradingTimes struct {
	// An array of markets
	Markets []TradingTimesRespTradingTimesMarketsElem `json:"markets"`
}

type TradingTimesRespTradingTimesMarketsElem struct {
	// Market name
	Name string `json:"name"`

	// An array of submarkets
	Submarkets []TradingTimesRespTradingTimesMarketsElemSubmarketsElem `json:"submarkets,omitempty"`
}

type TradingTimesRespTradingTimesMarketsElemSubmarketsElem struct {
	// Submarket name
	Name string `json:"name"`

	// Symbols array
	Symbols []TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElem `json:"symbols,omitempty"`
}

type TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElem struct {
	// Events
	Events []interface{} `json:"events,omitempty"`

	// Symbol name
	Name string `json:"name"`

	// Symbol shortcode
	Symbol string `json:"symbol"`

	// Open, close and settlement times
	Times TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTimes `json:"times,omitempty"`

	// Trading days
	TradingDays []TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem `json:"trading_days,omitempty"`
}

// Open, close and settlement times
type TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTimes map[string]interface{}

type TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem string

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem, v)
	}
	*j = TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem(v)
	return nil
}

const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemTue TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Tue"
const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemWed TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Wed"
const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemThu TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Thu"
const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemFri TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Fri"
const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemSat TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Sat"
const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemSun TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Sun"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElem(plain)
	return nil
}

const TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElemMon TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = "Mon"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespTradingTimesMarketsElemSubmarketsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain TradingTimesRespTradingTimesMarketsElemSubmarketsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesRespTradingTimesMarketsElemSubmarketsElem(plain)
	return nil
}

var enumValues_TradingTimesRespTradingTimesMarketsElemSubmarketsElemSymbolsElemTradingDaysElem = []interface{}{
	"Sun",
	"Mon",
	"Tue",
	"Wed",
	"Thu",
	"Fri",
	"Sat",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespTradingTimesMarketsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain TradingTimesRespTradingTimesMarketsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesRespTradingTimesMarketsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingTimesRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingTimesRespMsgType, v)
	}
	*j = TradingTimesRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesRespTradingTimes) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["markets"]; !ok || v == nil {
		return fmt.Errorf("field markets: required")
	}
	type Plain TradingTimesRespTradingTimes
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesRespTradingTimes(plain)
	return nil
}

var enumValues_TradingTimesRespMsgType = []interface{}{
	"trading_times",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingTimesResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain TradingTimesResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingTimesResp(plain)
	return nil
}
