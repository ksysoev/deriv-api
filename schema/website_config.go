// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Request server config.
type WebsiteConfig struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough WebsiteConfigPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	WebsiteConfig WebsiteConfigWebsiteConfig `json:"website_config"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type WebsiteConfigPassthrough map[string]interface{}

type WebsiteConfigWebsiteConfig int

var enumValues_WebsiteConfigWebsiteConfig = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfigWebsiteConfig) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WebsiteConfigWebsiteConfig {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WebsiteConfigWebsiteConfig, v)
	}
	*j = WebsiteConfigWebsiteConfig(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WebsiteConfig) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["website_config"]; raw != nil && !ok {
		return fmt.Errorf("field website_config in WebsiteConfig: required")
	}
	type Plain WebsiteConfig
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = WebsiteConfig(plain)
	return nil
}
