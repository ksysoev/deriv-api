// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type Mt5PasswordCheckMt5PasswordCheck int

var enumValues_Mt5PasswordCheckMt5PasswordCheck = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckMt5PasswordCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordCheckMt5PasswordCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordCheckMt5PasswordCheck, v)
	}
	*j = Mt5PasswordCheckMt5PasswordCheck(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5PasswordCheckPassthrough map[string]interface{}

type Mt5PasswordCheckPasswordType string

var enumValues_Mt5PasswordCheckPasswordType = []interface{}{
	"main",
	"investor",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheckPasswordType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordCheckPasswordType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordCheckPasswordType, v)
	}
	*j = Mt5PasswordCheckPasswordType(v)
	return nil
}

// This call validates the main password for the MT5 user
type Mt5PasswordCheck struct {
	// MT5 user login
	Login string `json:"login"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	Mt5PasswordCheck Mt5PasswordCheckMt5PasswordCheck `json:"mt5_password_check"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5PasswordCheckPassthrough `json:"passthrough,omitempty"`

	// The password of the account.
	Password string `json:"password"`

	// [Optional] Type of the password to check.
	PasswordType Mt5PasswordCheckPasswordType `json:"password_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

const Mt5PasswordCheckPasswordTypeInvestor Mt5PasswordCheckPasswordType = "investor"
const Mt5PasswordCheckPasswordTypeMain Mt5PasswordCheckPasswordType = "main"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordCheck) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login in Mt5PasswordCheck: required")
	}
	if v, ok := raw["mt5_password_check"]; !ok || v == nil {
		return fmt.Errorf("field mt5_password_check in Mt5PasswordCheck: required")
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password in Mt5PasswordCheck: required")
	}
	type Plain Mt5PasswordCheck
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["password_type"]; !ok || v == nil {
		plain.PasswordType = "main"
	}
	*j = Mt5PasswordCheck(plain)
	return nil
}
