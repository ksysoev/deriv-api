// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get latest price (and other information) for a contract in the user's portfolio
type ProposalOpenContract struct {
	// [Optional] Contract ID received from a `portfolio` request. If not set, you
	// will receive stream of all open contracts.
	ContractId *int `json:"contract_id,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ProposalOpenContractPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	ProposalOpenContract ProposalOpenContractProposalOpenContract `json:"proposal_open_contract"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] `1` to stream.
	Subscribe *ProposalOpenContractSubscribe `json:"subscribe,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ProposalOpenContractPassthrough map[string]interface{}

type ProposalOpenContractProposalOpenContract int

var enumValues_ProposalOpenContractProposalOpenContract = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractProposalOpenContract) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractProposalOpenContract {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractProposalOpenContract, v)
	}
	*j = ProposalOpenContractProposalOpenContract(v)
	return nil
}

type ProposalOpenContractSubscribe int

var enumValues_ProposalOpenContractSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContractSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProposalOpenContractSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProposalOpenContractSubscribe, v)
	}
	*j = ProposalOpenContractSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProposalOpenContract) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["proposal_open_contract"]; raw != nil && !ok {
		return fmt.Errorf("field proposal_open_contract in ProposalOpenContract: required")
	}
	type Plain ProposalOpenContract
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ProposalOpenContract(plain)
	return nil
}
