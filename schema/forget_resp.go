// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type ForgetRespEchoReq map[string]interface{}

type ForgetRespForget int

var enumValues_ForgetRespForget = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetRespForget) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetRespForget {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetRespForget, v)
	}
	*j = ForgetRespForget(v)
	return nil
}

type ForgetRespMsgType string

var enumValues_ForgetRespMsgType = []interface{}{
	"forget",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetRespMsgType, v)
	}
	*j = ForgetRespMsgType(v)
	return nil
}

// The result of forget request made.
type ForgetResp struct {
	// Echo of the request made.
	EchoReq ForgetRespEchoReq `json:"echo_req"`

	// If set to 1, stream exited and stopped. If set to 0, stream did not exist.
	Forget *ForgetRespForget `json:"forget,omitempty"`

	// Action name of the request made.
	MsgType ForgetRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const ForgetRespMsgTypeForget ForgetRespMsgType = "forget"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ForgetResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetResp(plain)
	return nil
}
