// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// This call opens a new real-money account with the `maltainvest` Landing Company.
// This call can be made from a virtual-money account or real-money account at
// Deriv (Europe) Limited. If it is the latter, client information fields in this
// call will be ignored and data from your existing real-money account will be
// used.
type NewAccountMaltainvest struct {
	// Show whether client has accepted risk disclaimer.
	AcceptRisk *NewAccountMaltainvestAcceptRisk `json:"accept_risk,omitempty"`

	// [Optional] Purpose and reason for requesting the account opening.
	AccountOpeningReason *NewAccountMaltainvestAccountOpeningReason `json:"account_opening_reason,omitempty"`

	// [Optional] The anticipated account turnover.
	AccountTurnover *NewAccountMaltainvestAccountTurnover `json:"account_turnover,omitempty"`

	// Within 100 characters
	AddressCity string `json:"address_city"`

	// Within 70 characters, with no leading whitespaces and may contain
	// letters/numbers and/or any of following characters '.,:;()@#/-
	AddressLine1 string `json:"address_line_1"`

	// [Optional] Within 70 characters.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Within 20 characters and may not contain '+'.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Possible value receive from `states_list` call.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// How much experience do you have in CFD trading?
	CfdExperience *NewAccountMaltainvestCfdExperience `json:"cfd_experience,omitempty"`

	// How many CFD trades have you placed in the past 12 months?
	CfdFrequency *NewAccountMaltainvestCfdFrequency `json:"cfd_frequency,omitempty"`

	// In your understanding, CFD trading allows you to:
	CfdTradingDefinition *NewAccountMaltainvestCfdTradingDefinition `json:"cfd_trading_definition,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code. Possible value
	// receive from `residence_list` call.
	Citizen *string `json:"citizen,omitempty"`

	// [Optional] Indicates whether this is for a client requesting an account with
	// professional status.
	ClientType NewAccountMaltainvestClientType `json:"client_type,omitempty"`

	// [Optional] To set currency of the account. List of supported currencies can be
	// acquired with `payout_currencies` call.
	Currency *string `json:"currency,omitempty"`

	// Date of birth format: yyyy-mm-dd.
	DateOfBirth string `json:"date_of_birth"`

	// Level of Education
	EducationLevel *NewAccountMaltainvestEducationLevel `json:"education_level,omitempty"`

	// Industry of Employment.
	EmploymentIndustry *NewAccountMaltainvestEmploymentIndustry `json:"employment_industry,omitempty"`

	// Employment Status.
	EmploymentStatus NewAccountMaltainvestEmploymentStatus `json:"employment_status"`

	// Estimated Net Worth.
	EstimatedWorth *NewAccountMaltainvestEstimatedWorth `json:"estimated_worth,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName string `json:"first_name"`

	// Income Source.
	IncomeSource *NewAccountMaltainvestIncomeSource `json:"income_source,omitempty"`

	// Within 2-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName string `json:"last_name"`

	// How does leverage affect CFD trading?
	LeverageImpactTrading *NewAccountMaltainvestLeverageImpactTrading `json:"leverage_impact_trading,omitempty"`

	// Leverage trading is high-risk, so it's a good idea to use risk management
	// features such as stop loss. Stop loss allows you to
	LeverageTradingHighRiskStopLoss *NewAccountMaltainvestLeverageTradingHighRiskStopLoss `json:"leverage_trading_high_risk_stop_loss,omitempty"`

	// Net Annual Income.
	NetIncome *NewAccountMaltainvestNetIncome `json:"net_income,omitempty"`

	// Must be `1`
	NewAccountMaltainvest NewAccountMaltainvestNewAccountMaltainvest `json:"new_account_maltainvest"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA.
	NonPepDeclaration *int `json:"non_pep_declaration,omitempty"`

	// Occupation.
	Occupation *NewAccountMaltainvestOccupation `json:"occupation,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewAccountMaltainvestPassthrough `json:"passthrough,omitempty"`

	// [Optional] Starting with `+` followed by 9-35 digits, hyphens or space.
	Phone interface{} `json:"phone,omitempty"`

	// [Optional] Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// When would you be required to pay an initial margin?
	RequiredInitialMargin *NewAccountMaltainvestRequiredInitialMargin `json:"required_initial_margin,omitempty"`

	// 2-letter country code, possible value receive from `residence_list` call.
	Residence string `json:"residence"`

	// Do you understand that you could potentially lose 100% of the money you use to
	// trade?
	RiskTolerance *NewAccountMaltainvestRiskTolerance `json:"risk_tolerance,omitempty"`

	// Accept any value in enum list.
	Salutation NewAccountMaltainvestSalutation `json:"salutation"`

	// [Optional] Answer to secret question, within 4-50 characters.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list.
	SecretQuestion *NewAccountMaltainvestSecretQuestion `json:"secret_question,omitempty"`

	// How much knowledge and experience do you have in relation to online trading?
	SourceOfExperience *NewAccountMaltainvestSourceOfExperience `json:"source_of_experience,omitempty"`

	// [Optional] Source of wealth.
	SourceOfWealth *NewAccountMaltainvestSourceOfWealth `json:"source_of_wealth,omitempty"`

	// Tax identification number. Only applicable for real money account. Required for
	// `maltainvest` landing company.
	TaxIdentificationNumber string `json:"tax_identification_number"`

	// Residence for tax purpose. Comma separated iso country code if multiple
	// jurisdictions. Only applicable for real money account. Required for
	// `maltainvest` landing company.
	TaxResidence string `json:"tax_residence"`

	// How much experience do you have with other financial instruments?
	TradingExperienceFinancialInstruments *NewAccountMaltainvestTradingExperienceFinancialInstruments `json:"trading_experience_financial_instruments,omitempty"`

	// How many trades have you placed with other financial instruments in the past 12
	// months?
	TradingFrequencyFinancialInstruments *NewAccountMaltainvestTradingFrequencyFinancialInstruments `json:"trading_frequency_financial_instruments,omitempty"`
}

type NewAccountMaltainvestAcceptRisk int

type NewAccountMaltainvestAccountOpeningReason string

const NewAccountMaltainvestAccountOpeningReasonHedging NewAccountMaltainvestAccountOpeningReason = "Hedging"
const NewAccountMaltainvestAccountOpeningReasonIncomeEarning NewAccountMaltainvestAccountOpeningReason = "Income Earning"
const NewAccountMaltainvestAccountOpeningReasonSpeculative NewAccountMaltainvestAccountOpeningReason = "Speculative"

type NewAccountMaltainvestAccountTurnover string

const NewAccountMaltainvestAccountTurnoverA100001500000 NewAccountMaltainvestAccountTurnover = "$100,001 - $500,000"
const NewAccountMaltainvestAccountTurnoverA2500050000 NewAccountMaltainvestAccountTurnover = "$25,000 - $50,000"
const NewAccountMaltainvestAccountTurnoverA50001100000 NewAccountMaltainvestAccountTurnover = "$50,001 - $100,000"
const NewAccountMaltainvestAccountTurnoverLessThan25000 NewAccountMaltainvestAccountTurnover = "Less than $25,000"
const NewAccountMaltainvestAccountTurnoverOver500000 NewAccountMaltainvestAccountTurnover = "Over $500,000"

type NewAccountMaltainvestCfdExperience string

const NewAccountMaltainvestCfdExperienceA12Years NewAccountMaltainvestCfdExperience = "1 - 2 years"
const NewAccountMaltainvestCfdExperienceLessThanAYear NewAccountMaltainvestCfdExperience = "Less than a year"
const NewAccountMaltainvestCfdExperienceNoExperience NewAccountMaltainvestCfdExperience = "No experience"
const NewAccountMaltainvestCfdExperienceOver3Years NewAccountMaltainvestCfdExperience = "Over 3 years"

type NewAccountMaltainvestCfdFrequency string

const NewAccountMaltainvestCfdFrequencyA1139TransactionsInThePast12Months NewAccountMaltainvestCfdFrequency = "11 - 39 transactions in the past 12 months"
const NewAccountMaltainvestCfdFrequencyA15TransactionsInThePast12Months NewAccountMaltainvestCfdFrequency = "1 - 5 transactions in the past 12 months"
const NewAccountMaltainvestCfdFrequencyA40TransactionsOrMoreInThePast12Months NewAccountMaltainvestCfdFrequency = "40 transactions or more in the past 12 months"
const NewAccountMaltainvestCfdFrequencyA610TransactionsInThePast12Months NewAccountMaltainvestCfdFrequency = "6 - 10 transactions in the past 12 months"
const NewAccountMaltainvestCfdFrequencyNoTransactionsInThePast12Months NewAccountMaltainvestCfdFrequency = "No transactions in the past 12 months"

type NewAccountMaltainvestCfdTradingDefinition string

const NewAccountMaltainvestCfdTradingDefinitionMakeALongTermInvestment NewAccountMaltainvestCfdTradingDefinition = "Make a long-term investment."
const NewAccountMaltainvestCfdTradingDefinitionPlaceABetOnThePriceMovement NewAccountMaltainvestCfdTradingDefinition = "Place a bet on the price movement."
const NewAccountMaltainvestCfdTradingDefinitionPurchaseSharesOfACompanyOrPhysicalCommodities NewAccountMaltainvestCfdTradingDefinition = "Purchase shares of a company or physical commodities."
const NewAccountMaltainvestCfdTradingDefinitionSpeculateOnThePriceMovement NewAccountMaltainvestCfdTradingDefinition = "Speculate on the price movement."

type NewAccountMaltainvestClientType string

const NewAccountMaltainvestClientTypeProfessional NewAccountMaltainvestClientType = "professional"
const NewAccountMaltainvestClientTypeRetail NewAccountMaltainvestClientType = "retail"

type NewAccountMaltainvestEducationLevel string

const NewAccountMaltainvestEducationLevelPrimary NewAccountMaltainvestEducationLevel = "Primary"
const NewAccountMaltainvestEducationLevelSecondary NewAccountMaltainvestEducationLevel = "Secondary"
const NewAccountMaltainvestEducationLevelTertiary NewAccountMaltainvestEducationLevel = "Tertiary"

type NewAccountMaltainvestEmploymentIndustry string

const NewAccountMaltainvestEmploymentIndustryAgriculture NewAccountMaltainvestEmploymentIndustry = "Agriculture"
const NewAccountMaltainvestEmploymentIndustryConstruction NewAccountMaltainvestEmploymentIndustry = "Construction"
const NewAccountMaltainvestEmploymentIndustryEducation NewAccountMaltainvestEmploymentIndustry = "Education"
const NewAccountMaltainvestEmploymentIndustryFinance NewAccountMaltainvestEmploymentIndustry = "Finance"
const NewAccountMaltainvestEmploymentIndustryFoodServices NewAccountMaltainvestEmploymentIndustry = "Food Services"
const NewAccountMaltainvestEmploymentIndustryHealth NewAccountMaltainvestEmploymentIndustry = "Health"
const NewAccountMaltainvestEmploymentIndustryInformationCommunicationsTechnology NewAccountMaltainvestEmploymentIndustry = "Information & Communications Technology"
const NewAccountMaltainvestEmploymentIndustryLegal NewAccountMaltainvestEmploymentIndustry = "Legal"
const NewAccountMaltainvestEmploymentIndustryManufacturing NewAccountMaltainvestEmploymentIndustry = "Manufacturing"
const NewAccountMaltainvestEmploymentIndustryRealEstate NewAccountMaltainvestEmploymentIndustry = "Real Estate"
const NewAccountMaltainvestEmploymentIndustryScienceEngineering NewAccountMaltainvestEmploymentIndustry = "Science & Engineering"
const NewAccountMaltainvestEmploymentIndustrySocialCultural NewAccountMaltainvestEmploymentIndustry = "Social & Cultural"
const NewAccountMaltainvestEmploymentIndustryTourism NewAccountMaltainvestEmploymentIndustry = "Tourism"
const NewAccountMaltainvestEmploymentIndustryUnemployed NewAccountMaltainvestEmploymentIndustry = "Unemployed"

type NewAccountMaltainvestEmploymentStatus string

const NewAccountMaltainvestEmploymentStatusEmployed NewAccountMaltainvestEmploymentStatus = "Employed"
const NewAccountMaltainvestEmploymentStatusPensioner NewAccountMaltainvestEmploymentStatus = "Pensioner"
const NewAccountMaltainvestEmploymentStatusSelfEmployed NewAccountMaltainvestEmploymentStatus = "Self-Employed"
const NewAccountMaltainvestEmploymentStatusStudent NewAccountMaltainvestEmploymentStatus = "Student"
const NewAccountMaltainvestEmploymentStatusUnemployed NewAccountMaltainvestEmploymentStatus = "Unemployed"

type NewAccountMaltainvestEstimatedWorth string

const NewAccountMaltainvestEstimatedWorthA100000250000 NewAccountMaltainvestEstimatedWorth = "$100,000 - $250,000"
const NewAccountMaltainvestEstimatedWorthA250001500000 NewAccountMaltainvestEstimatedWorth = "$250,001 - $500,000"
const NewAccountMaltainvestEstimatedWorthA5000011000000 NewAccountMaltainvestEstimatedWorth = "$500,001 - $1,000,000"
const NewAccountMaltainvestEstimatedWorthLessThan100000 NewAccountMaltainvestEstimatedWorth = "Less than $100,000"
const NewAccountMaltainvestEstimatedWorthOver1000000 NewAccountMaltainvestEstimatedWorth = "Over $1,000,000"

type NewAccountMaltainvestIncomeSource string

const NewAccountMaltainvestIncomeSourceInvestmentsDividends NewAccountMaltainvestIncomeSource = "Investments & Dividends"
const NewAccountMaltainvestIncomeSourcePension NewAccountMaltainvestIncomeSource = "Pension"
const NewAccountMaltainvestIncomeSourceSalariedEmployee NewAccountMaltainvestIncomeSource = "Salaried Employee"
const NewAccountMaltainvestIncomeSourceSavingsInheritance NewAccountMaltainvestIncomeSource = "Savings & Inheritance"
const NewAccountMaltainvestIncomeSourceSelfEmployed NewAccountMaltainvestIncomeSource = "Self-Employed"
const NewAccountMaltainvestIncomeSourceStateBenefits NewAccountMaltainvestIncomeSource = "State Benefits"

type NewAccountMaltainvestLeverageImpactTrading string

const NewAccountMaltainvestLeverageImpactTradingLeverageGuaranteesProfits NewAccountMaltainvestLeverageImpactTrading = "Leverage guarantees profits."
const NewAccountMaltainvestLeverageImpactTradingLeverageIsARiskMitigationTechnique NewAccountMaltainvestLeverageImpactTrading = "Leverage is a risk mitigation technique."
const NewAccountMaltainvestLeverageImpactTradingLeverageLetsYouOpenLargerPositionsForAFractionOfTheTradeSValue NewAccountMaltainvestLeverageImpactTrading = "Leverage lets you open larger positions for a fraction of the trade's value."
const NewAccountMaltainvestLeverageImpactTradingLeveragePreventsYouFromOpeningLargePositions NewAccountMaltainvestLeverageImpactTrading = "Leverage prevents you from opening large positions."

type NewAccountMaltainvestLeverageTradingHighRiskStopLoss string

const NewAccountMaltainvestLeverageTradingHighRiskStopLossCancelYourTradeAtAnyTimeWithinAChosenTimeframe NewAccountMaltainvestLeverageTradingHighRiskStopLoss = "Cancel your trade at any time within a chosen timeframe."
const NewAccountMaltainvestLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheLossIsMoreThanOrEqualToASpecificAmount NewAccountMaltainvestLeverageTradingHighRiskStopLoss = "Close your trade automatically when the loss is more than or equal to a specific amount."
const NewAccountMaltainvestLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheProfitIsMoreThanOrEqualToASpecificAmount NewAccountMaltainvestLeverageTradingHighRiskStopLoss = "Close your trade automatically when the profit is more than or equal to a specific amount."
const NewAccountMaltainvestLeverageTradingHighRiskStopLossMakeAGuaranteedProfitOnYourTrade NewAccountMaltainvestLeverageTradingHighRiskStopLoss = "Make a guaranteed profit on your trade."

type NewAccountMaltainvestNetIncome string

const NewAccountMaltainvestNetIncomeA100001500000 NewAccountMaltainvestNetIncome = "$100,001 - $500,000"
const NewAccountMaltainvestNetIncomeA2500050000 NewAccountMaltainvestNetIncome = "$25,000 - $50,000"
const NewAccountMaltainvestNetIncomeA50001100000 NewAccountMaltainvestNetIncome = "$50,001 - $100,000"
const NewAccountMaltainvestNetIncomeLessThan25000 NewAccountMaltainvestNetIncome = "Less than $25,000"
const NewAccountMaltainvestNetIncomeOver500000 NewAccountMaltainvestNetIncome = "Over $500,000"

type NewAccountMaltainvestNewAccountMaltainvest int

type NewAccountMaltainvestOccupation string

const NewAccountMaltainvestOccupationAgriculturalForestryAndFisheryWorkers NewAccountMaltainvestOccupation = "Agricultural, Forestry and Fishery Workers"
const NewAccountMaltainvestOccupationArmedForces NewAccountMaltainvestOccupation = "Armed Forces"
const NewAccountMaltainvestOccupationChiefExecutivesSeniorOfficialsAndLegislators NewAccountMaltainvestOccupation = "Chief Executives, Senior Officials and Legislators"
const NewAccountMaltainvestOccupationCleanersAndHelpers NewAccountMaltainvestOccupation = "Cleaners and Helpers"
const NewAccountMaltainvestOccupationClerks NewAccountMaltainvestOccupation = "Clerks"
const NewAccountMaltainvestOccupationCraftMetalElectricalAndElectronicsWorkers NewAccountMaltainvestOccupation = "Craft, Metal, Electrical and Electronics Workers"
const NewAccountMaltainvestOccupationGovernmentOfficers NewAccountMaltainvestOccupation = "Government Officers"
const NewAccountMaltainvestOccupationManagers NewAccountMaltainvestOccupation = "Managers"
const NewAccountMaltainvestOccupationMiningConstructionManufacturingAndTransportWorkers NewAccountMaltainvestOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const NewAccountMaltainvestOccupationPersonalCareSalesAndServiceWorkers NewAccountMaltainvestOccupation = "Personal Care, Sales and Service Workers"
const NewAccountMaltainvestOccupationPlantAndMachineOperatorsAndAssemblers NewAccountMaltainvestOccupation = "Plant and Machine Operators and Assemblers"
const NewAccountMaltainvestOccupationProfessionals NewAccountMaltainvestOccupation = "Professionals"
const NewAccountMaltainvestOccupationStudents NewAccountMaltainvestOccupation = "Students"
const NewAccountMaltainvestOccupationUnemployed NewAccountMaltainvestOccupation = "Unemployed"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewAccountMaltainvestPassthrough map[string]interface{}

type NewAccountMaltainvestRequiredInitialMargin string

const NewAccountMaltainvestRequiredInitialMarginAllOfTheAbove NewAccountMaltainvestRequiredInitialMargin = "All of the above."
const NewAccountMaltainvestRequiredInitialMarginWhenBuyingSharesOfACompany NewAccountMaltainvestRequiredInitialMargin = "When buying shares of a company."
const NewAccountMaltainvestRequiredInitialMarginWhenOpeningALeveragedCFDTrade NewAccountMaltainvestRequiredInitialMargin = "When opening a Leveraged CFD trade."
const NewAccountMaltainvestRequiredInitialMarginWhenTradingMultipliers NewAccountMaltainvestRequiredInitialMargin = "When trading Multipliers."

type NewAccountMaltainvestRiskTolerance string

const NewAccountMaltainvestRiskToleranceNo NewAccountMaltainvestRiskTolerance = "No"
const NewAccountMaltainvestRiskToleranceYes NewAccountMaltainvestRiskTolerance = "Yes"

type NewAccountMaltainvestSalutation string

const NewAccountMaltainvestSalutationMiss NewAccountMaltainvestSalutation = "Miss"
const NewAccountMaltainvestSalutationMr NewAccountMaltainvestSalutation = "Mr"
const NewAccountMaltainvestSalutationMrs NewAccountMaltainvestSalutation = "Mrs"
const NewAccountMaltainvestSalutationMs NewAccountMaltainvestSalutation = "Ms"

type NewAccountMaltainvestSecretQuestion string

const NewAccountMaltainvestSecretQuestionBrandOfFirstCar NewAccountMaltainvestSecretQuestion = "Brand of first car"
const NewAccountMaltainvestSecretQuestionFavouriteArtist NewAccountMaltainvestSecretQuestion = "Favourite artist"
const NewAccountMaltainvestSecretQuestionFavouriteDish NewAccountMaltainvestSecretQuestion = "Favourite dish"
const NewAccountMaltainvestSecretQuestionMemorableDate NewAccountMaltainvestSecretQuestion = "Memorable date"
const NewAccountMaltainvestSecretQuestionMemorableTownCity NewAccountMaltainvestSecretQuestion = "Memorable town/city"
const NewAccountMaltainvestSecretQuestionMotherSMaidenName NewAccountMaltainvestSecretQuestion = "Mother's maiden name"
const NewAccountMaltainvestSecretQuestionNameOfFirstLove NewAccountMaltainvestSecretQuestion = "Name of first love"
const NewAccountMaltainvestSecretQuestionNameOfYourPet NewAccountMaltainvestSecretQuestion = "Name of your pet"

type NewAccountMaltainvestSourceOfExperience string

const NewAccountMaltainvestSourceOfExperienceIHaveAnAcademicDegreeProfessionalCertificationAndOrWorkExperience NewAccountMaltainvestSourceOfExperience = "I have an academic degree, professional certification, and/or work experience."
const NewAccountMaltainvestSourceOfExperienceIHaveAttendedSeminarsTrainingAndOrWorkshops NewAccountMaltainvestSourceOfExperience = "I have attended seminars, training, and/or workshops."
const NewAccountMaltainvestSourceOfExperienceIHaveLittleExperience NewAccountMaltainvestSourceOfExperience = "I have little experience."
const NewAccountMaltainvestSourceOfExperienceIHaveNoKnowledge NewAccountMaltainvestSourceOfExperience = "I have no knowledge."
const NewAccountMaltainvestSourceOfExperienceITradeForexCFDsAndOtherComplexFinancialInstruments NewAccountMaltainvestSourceOfExperience = "I trade forex CFDs and other complex financial instruments."

type NewAccountMaltainvestSourceOfWealth string

const NewAccountMaltainvestSourceOfWealthAccumulationOfIncomeSavings NewAccountMaltainvestSourceOfWealth = "Accumulation of Income/Savings"
const NewAccountMaltainvestSourceOfWealthCashBusiness NewAccountMaltainvestSourceOfWealth = "Cash Business"
const NewAccountMaltainvestSourceOfWealthCompanyOwnership NewAccountMaltainvestSourceOfWealth = "Company Ownership"
const NewAccountMaltainvestSourceOfWealthDivorceSettlement NewAccountMaltainvestSourceOfWealth = "Divorce Settlement"
const NewAccountMaltainvestSourceOfWealthInheritance NewAccountMaltainvestSourceOfWealth = "Inheritance"
const NewAccountMaltainvestSourceOfWealthInvestmentIncome NewAccountMaltainvestSourceOfWealth = "Investment Income"
const NewAccountMaltainvestSourceOfWealthSaleOfProperty NewAccountMaltainvestSourceOfWealth = "Sale of Property"

type NewAccountMaltainvestTradingExperienceFinancialInstruments string

const NewAccountMaltainvestTradingExperienceFinancialInstrumentsA12Years NewAccountMaltainvestTradingExperienceFinancialInstruments = "1 - 2 years"
const NewAccountMaltainvestTradingExperienceFinancialInstrumentsLessThanAYear NewAccountMaltainvestTradingExperienceFinancialInstruments = "Less than a year"
const NewAccountMaltainvestTradingExperienceFinancialInstrumentsNoExperience NewAccountMaltainvestTradingExperienceFinancialInstruments = "No experience"
const NewAccountMaltainvestTradingExperienceFinancialInstrumentsOver3Years NewAccountMaltainvestTradingExperienceFinancialInstruments = "Over 3 years"

type NewAccountMaltainvestTradingFrequencyFinancialInstruments string

const NewAccountMaltainvestTradingFrequencyFinancialInstrumentsA1139TransactionsInThePast12Months NewAccountMaltainvestTradingFrequencyFinancialInstruments = "11 - 39 transactions in the past 12 months"
const NewAccountMaltainvestTradingFrequencyFinancialInstrumentsA15TransactionsInThePast12Months NewAccountMaltainvestTradingFrequencyFinancialInstruments = "1 - 5 transactions in the past 12 months"
const NewAccountMaltainvestTradingFrequencyFinancialInstrumentsA40TransactionsOrMoreInThePast12Months NewAccountMaltainvestTradingFrequencyFinancialInstruments = "40 transactions or more in the past 12 months"
const NewAccountMaltainvestTradingFrequencyFinancialInstrumentsA610TransactionsInThePast12Months NewAccountMaltainvestTradingFrequencyFinancialInstruments = "6 - 10 transactions in the past 12 months"
const NewAccountMaltainvestTradingFrequencyFinancialInstrumentsNoTransactionsInThePast12Months NewAccountMaltainvestTradingFrequencyFinancialInstruments = "No transactions in the past 12 months"

var enumValues_NewAccountMaltainvestAcceptRisk = []interface{}{
	0,
	1,
}
var enumValues_NewAccountMaltainvestAccountOpeningReason = []interface{}{
	"Speculative",
	"Income Earning",
	"Hedging",
}
var enumValues_NewAccountMaltainvestAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_NewAccountMaltainvestCfdExperience = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}
var enumValues_NewAccountMaltainvestCfdFrequency = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_NewAccountMaltainvestCfdTradingDefinition = []interface{}{
	"Purchase shares of a company or physical commodities.",
	"Place a bet on the price movement.",
	"Speculate on the price movement.",
	"Make a long-term investment.",
}
var enumValues_NewAccountMaltainvestClientType = []interface{}{
	"professional",
	"retail",
}
var enumValues_NewAccountMaltainvestEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}
var enumValues_NewAccountMaltainvestEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}
var enumValues_NewAccountMaltainvestEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}
var enumValues_NewAccountMaltainvestEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}
var enumValues_NewAccountMaltainvestIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}
var enumValues_NewAccountMaltainvestLeverageImpactTrading = []interface{}{
	"Leverage is a risk mitigation technique.",
	"Leverage prevents you from opening large positions.",
	"Leverage guarantees profits.",
	"Leverage lets you open larger positions for a fraction of the trade's value.",
}
var enumValues_NewAccountMaltainvestLeverageTradingHighRiskStopLoss = []interface{}{
	"Cancel your trade at any time within a chosen timeframe.",
	"Close your trade automatically when the loss is more than or equal to a specific amount.",
	"Close your trade automatically when the profit is more than or equal to a specific amount.",
	"Make a guaranteed profit on your trade.",
}
var enumValues_NewAccountMaltainvestNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_NewAccountMaltainvestNewAccountMaltainvest = []interface{}{
	1,
}
var enumValues_NewAccountMaltainvestOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestCfdFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestCfdFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestCfdFrequency, v)
	}
	*j = NewAccountMaltainvestCfdFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestSourceOfExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestSourceOfExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestSourceOfExperience, v)
	}
	*j = NewAccountMaltainvestSourceOfExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestSecretQuestion, v)
	}
	*j = NewAccountMaltainvestSecretQuestion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRequiredInitialMargin) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRequiredInitialMargin {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRequiredInitialMargin, v)
	}
	*j = NewAccountMaltainvestRequiredInitialMargin(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestEstimatedWorth, v)
	}
	*j = NewAccountMaltainvestEstimatedWorth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestCfdTradingDefinition) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestCfdTradingDefinition {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestCfdTradingDefinition, v)
	}
	*j = NewAccountMaltainvestCfdTradingDefinition(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestEmploymentIndustry, v)
	}
	*j = NewAccountMaltainvestEmploymentIndustry(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestClientType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestClientType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestClientType, v)
	}
	*j = NewAccountMaltainvestClientType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestEmploymentStatus, v)
	}
	*j = NewAccountMaltainvestEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestSourceOfWealth, v)
	}
	*j = NewAccountMaltainvestSourceOfWealth(v)
	return nil
}

var enumValues_NewAccountMaltainvestSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestCfdExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestCfdExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestCfdExperience, v)
	}
	*j = NewAccountMaltainvestCfdExperience(v)
	return nil
}

var enumValues_NewAccountMaltainvestSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestEducationLevel, v)
	}
	*j = NewAccountMaltainvestEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestAccountTurnover, v)
	}
	*j = NewAccountMaltainvestAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestNetIncome, v)
	}
	*j = NewAccountMaltainvestNetIncome(v)
	return nil
}

var enumValues_NewAccountMaltainvestSourceOfExperience = []interface{}{
	"I have an academic degree, professional certification, and/or work experience.",
	"I trade forex CFDs and other complex financial instruments.",
	"I have attended seminars, training, and/or workshops.",
	"I have little experience.",
	"I have no knowledge.",
}
var enumValues_NewAccountMaltainvestRequiredInitialMargin = []interface{}{
	"When opening a Leveraged CFD trade.",
	"When trading Multipliers.",
	"When buying shares of a company.",
	"All of the above.",
}
var enumValues_NewAccountMaltainvestTradingExperienceFinancialInstruments = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestTradingExperienceFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestTradingExperienceFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestTradingExperienceFinancialInstruments, v)
	}
	*j = NewAccountMaltainvestTradingExperienceFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestSalutation, v)
	}
	*j = NewAccountMaltainvestSalutation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestIncomeSource, v)
	}
	*j = NewAccountMaltainvestIncomeSource(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestAcceptRisk) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestAcceptRisk {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestAcceptRisk, v)
	}
	*j = NewAccountMaltainvestAcceptRisk(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestLeverageImpactTrading) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestLeverageImpactTrading {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestLeverageImpactTrading, v)
	}
	*j = NewAccountMaltainvestLeverageImpactTrading(v)
	return nil
}

var enumValues_NewAccountMaltainvestRiskTolerance = []interface{}{
	"Yes",
	"No",
}
var enumValues_NewAccountMaltainvestTradingFrequencyFinancialInstruments = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestTradingFrequencyFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestTradingFrequencyFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestTradingFrequencyFinancialInstruments, v)
	}
	*j = NewAccountMaltainvestTradingFrequencyFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestOccupation, v)
	}
	*j = NewAccountMaltainvestOccupation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestAccountOpeningReason) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestAccountOpeningReason {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestAccountOpeningReason, v)
	}
	*j = NewAccountMaltainvestAccountOpeningReason(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestLeverageTradingHighRiskStopLoss) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestLeverageTradingHighRiskStopLoss {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestLeverageTradingHighRiskStopLoss, v)
	}
	*j = NewAccountMaltainvestLeverageTradingHighRiskStopLoss(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestNewAccountMaltainvest) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestNewAccountMaltainvest {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestNewAccountMaltainvest, v)
	}
	*j = NewAccountMaltainvestNewAccountMaltainvest(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvestRiskTolerance) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountMaltainvestRiskTolerance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountMaltainvestRiskTolerance, v)
	}
	*j = NewAccountMaltainvestRiskTolerance(v)
	return nil
}

var enumValues_NewAccountMaltainvestSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountMaltainvest) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["address_city"]; !ok || v == nil {
		return fmt.Errorf("field address_city: required")
	}
	if v, ok := raw["address_line_1"]; !ok || v == nil {
		return fmt.Errorf("field address_line_1: required")
	}
	if v, ok := raw["date_of_birth"]; !ok || v == nil {
		return fmt.Errorf("field date_of_birth: required")
	}
	if v, ok := raw["employment_status"]; !ok || v == nil {
		return fmt.Errorf("field employment_status: required")
	}
	if v, ok := raw["first_name"]; !ok || v == nil {
		return fmt.Errorf("field first_name: required")
	}
	if v, ok := raw["last_name"]; !ok || v == nil {
		return fmt.Errorf("field last_name: required")
	}
	if v, ok := raw["new_account_maltainvest"]; !ok || v == nil {
		return fmt.Errorf("field new_account_maltainvest: required")
	}
	if v, ok := raw["residence"]; !ok || v == nil {
		return fmt.Errorf("field residence: required")
	}
	if v, ok := raw["salutation"]; !ok || v == nil {
		return fmt.Errorf("field salutation: required")
	}
	if v, ok := raw["tax_identification_number"]; !ok || v == nil {
		return fmt.Errorf("field tax_identification_number: required")
	}
	if v, ok := raw["tax_residence"]; !ok || v == nil {
		return fmt.Errorf("field tax_residence: required")
	}
	type Plain NewAccountMaltainvest
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["client_type"]; !ok || v == nil {
		plain.ClientType = "retail"
	}
	*j = NewAccountMaltainvest(plain)
	return nil
}
