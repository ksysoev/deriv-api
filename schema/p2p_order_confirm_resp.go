// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Result of the P2P order confirmation.
type P2POrderConfirmResp struct {
	// Echo of the request made.
	EchoReq P2POrderConfirmRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderConfirmRespMsgType `json:"msg_type"`

	// Confirmation details
	P2POrderConfirm *P2POrderConfirmRespP2POrderConfirm `json:"p2p_order_confirm,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderConfirmRespEchoReq map[string]interface{}

type P2POrderConfirmRespMsgType string

const P2POrderConfirmRespMsgTypeP2POrderConfirm P2POrderConfirmRespMsgType = "p2p_order_confirm"

// Confirmation details
type P2POrderConfirmRespP2POrderConfirm struct {
	// The `dry_run` was successful.
	DryRun *P2POrderConfirmRespP2POrderConfirmDryRun `json:"dry_run,omitempty"`

	// The unique identifier for the order.
	Id string `json:"id"`

	// The new status of the order.
	Status *P2POrderConfirmRespP2POrderConfirmStatus `json:"status,omitempty"`
}

type P2POrderConfirmRespP2POrderConfirmDryRun int

type P2POrderConfirmRespP2POrderConfirmStatus string

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRespP2POrderConfirmDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmRespP2POrderConfirmDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmRespP2POrderConfirmDryRun, v)
	}
	*j = P2POrderConfirmRespP2POrderConfirmDryRun(v)
	return nil
}

var enumValues_P2POrderConfirmRespP2POrderConfirmDryRun = []interface{}{
	1,
}
var enumValues_P2POrderConfirmRespP2POrderConfirmStatus = []interface{}{
	"buyer-confirmed",
	"completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRespP2POrderConfirmStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmRespP2POrderConfirmStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmRespP2POrderConfirmStatus, v)
	}
	*j = P2POrderConfirmRespP2POrderConfirmStatus(v)
	return nil
}

const P2POrderConfirmRespP2POrderConfirmStatusBuyerConfirmed P2POrderConfirmRespP2POrderConfirmStatus = "buyer-confirmed"
const P2POrderConfirmRespP2POrderConfirmStatusCompleted P2POrderConfirmRespP2POrderConfirmStatus = "completed"

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderConfirmRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderConfirmRespMsgType, v)
	}
	*j = P2POrderConfirmRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmRespP2POrderConfirm) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in P2POrderConfirmRespP2POrderConfirm: required")
	}
	type Plain P2POrderConfirmRespP2POrderConfirm
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderConfirmRespP2POrderConfirm(plain)
	return nil
}

var enumValues_P2POrderConfirmRespMsgType = []interface{}{
	"p2p_order_confirm",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderConfirmResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in P2POrderConfirmResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in P2POrderConfirmResp: required")
	}
	type Plain P2POrderConfirmResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderConfirmResp(plain)
	return nil
}
