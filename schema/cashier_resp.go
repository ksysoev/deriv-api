// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type CashierRespEchoReq map[string]interface{}

type CashierRespMsgType string

var enumValues_CashierRespMsgType = []interface{}{
	"cashier",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CashierRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CashierRespMsgType, v)
	}
	*j = CashierRespMsgType(v)
	return nil
}

// Cashier information for the specified type.
type CashierResp struct {
	// Possible error codes are:
	// - `ASK_TNC_APPROVAL`: API call `tnc_approval`
	// - `ASK_AUTHENTICATE`
	// - `ASK_UK_FUNDS_PROTECTION`: API call `tnc_approval`
	// - `ASK_CURRENCY`: API call `set_account_currency`
	// - `ASK_EMAIL_VERIFY`: API call `verify_email`
	// - `ASK_FIX_DETAILS`: API call `set_settings`
	Cashier interface{} `json:"cashier,omitempty"`

	// Echo of the request made.
	EchoReq CashierRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CashierRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const CashierRespMsgTypeCashier CashierRespMsgType = "cashier"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CashierResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in CashierResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in CashierResp: required")
	}
	type Plain CashierResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CashierResp(plain)
	return nil
}
