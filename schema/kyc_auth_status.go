// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get KYC Authentication Status
type KycAuthStatus struct {
	// The country for which service availability is being verified, 2-letter country
	// code
	Country *string `json:"country,omitempty"`

	// Must be `1`
	KycAuthStatus KycAuthStatusKycAuthStatus `json:"kyc_auth_status"`

	// Indicates which landing companies to get the KYC authentication status for.
	LandingCompanies []KycAuthStatusLandingCompaniesElem `json:"landing_companies,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough KycAuthStatusPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type KycAuthStatusKycAuthStatus int

var enumValues_KycAuthStatusKycAuthStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KycAuthStatusKycAuthStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KycAuthStatusKycAuthStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KycAuthStatusKycAuthStatus, v)
	}
	*j = KycAuthStatusKycAuthStatus(v)
	return nil
}

type KycAuthStatusLandingCompaniesElem string

const KycAuthStatusLandingCompaniesElemBvi KycAuthStatusLandingCompaniesElem = "bvi"
const KycAuthStatusLandingCompaniesElemDsl KycAuthStatusLandingCompaniesElem = "dsl"
const KycAuthStatusLandingCompaniesElemIom KycAuthStatusLandingCompaniesElem = "iom"
const KycAuthStatusLandingCompaniesElemLabuan KycAuthStatusLandingCompaniesElem = "labuan"
const KycAuthStatusLandingCompaniesElemMalta KycAuthStatusLandingCompaniesElem = "malta"
const KycAuthStatusLandingCompaniesElemMaltainvest KycAuthStatusLandingCompaniesElem = "maltainvest"
const KycAuthStatusLandingCompaniesElemSamoa KycAuthStatusLandingCompaniesElem = "samoa"
const KycAuthStatusLandingCompaniesElemSamoaVirtual KycAuthStatusLandingCompaniesElem = "samoa-virtual"
const KycAuthStatusLandingCompaniesElemSvg KycAuthStatusLandingCompaniesElem = "svg"
const KycAuthStatusLandingCompaniesElemVanuatu KycAuthStatusLandingCompaniesElem = "vanuatu"
const KycAuthStatusLandingCompaniesElemVirtual KycAuthStatusLandingCompaniesElem = "virtual"

var enumValues_KycAuthStatusLandingCompaniesElem = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"labuan",
	"samoa",
	"samoa-virtual",
	"bvi",
	"dsl",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KycAuthStatusLandingCompaniesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_KycAuthStatusLandingCompaniesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_KycAuthStatusLandingCompaniesElem, v)
	}
	*j = KycAuthStatusLandingCompaniesElem(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type KycAuthStatusPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *KycAuthStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["kyc_auth_status"]; raw != nil && !ok {
		return fmt.Errorf("field kyc_auth_status in KycAuthStatus: required")
	}
	type Plain KycAuthStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = KycAuthStatus(plain)
	return nil
}
