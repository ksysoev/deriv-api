// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get historic tick data for a given symbol.
type TicksHistory struct {
	// [Optional] 1 - if the market is closed at the end time, or license limit is
	// before end time, adjust interval backwards to compensate.
	AdjustStartTime *TicksHistoryAdjustStartTime `json:"adjust_start_time,omitempty"`

	// [Optional] An upper limit on ticks to receive.
	Count int `json:"count,omitempty"`

	// Epoch value representing the latest boundary of the returned ticks. If `latest`
	// is specified, this will be the latest available timestamp.
	End string `json:"end"`

	// [Optional] Only applicable for style: `candles`. Candle time-dimension width
	// setting. (default: `60`).
	Granularity *TicksHistoryGranularity `json:"granularity,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough TicksHistoryPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Epoch value representing the earliest boundary of the returned
	// ticks.
	// - For `"style": "ticks"`: this will default to 1 day ago.
	// - For `"style": "candles"`: it will default to 1 day ago if count or
	// granularity is undefined.
	Start *int `json:"start,omitempty"`

	// [Optional] The tick-output style.
	Style TicksHistoryStyle `json:"style,omitempty"`

	// [Optional] 1 - to send updates whenever a new tick is received.
	Subscribe *TicksHistorySubscribe `json:"subscribe,omitempty"`

	// Short symbol name (obtained from the `active_symbols` call).
	TicksHistory string `json:"ticks_history"`
}

type TicksHistoryAdjustStartTime int

type TicksHistoryGranularity int

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type TicksHistoryPassthrough map[string]interface{}

type TicksHistoryStyle string

const TicksHistoryStyleCandles TicksHistoryStyle = "candles"
const TicksHistoryStyleTicks TicksHistoryStyle = "ticks"

type TicksHistorySubscribe int

var enumValues_TicksHistoryAdjustStartTime = []interface{}{
	1,
}
var enumValues_TicksHistoryGranularity = []interface{}{
	60,
	120,
	180,
	300,
	600,
	900,
	1800,
	3600,
	7200,
	14400,
	28800,
	86400,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryStyle) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryStyle {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryStyle, v)
	}
	*j = TicksHistoryStyle(v)
	return nil
}

var enumValues_TicksHistoryStyle = []interface{}{
	"candles",
	"ticks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryGranularity) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryGranularity {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryGranularity, v)
	}
	*j = TicksHistoryGranularity(v)
	return nil
}

var enumValues_TicksHistorySubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistorySubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistorySubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistorySubscribe, v)
	}
	*j = TicksHistorySubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistoryAdjustStartTime) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TicksHistoryAdjustStartTime {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TicksHistoryAdjustStartTime, v)
	}
	*j = TicksHistoryAdjustStartTime(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TicksHistory) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["end"]; !ok || v == nil {
		return fmt.Errorf("field end in TicksHistory: required")
	}
	if v, ok := raw["ticks_history"]; !ok || v == nil {
		return fmt.Errorf("field ticks_history in TicksHistory: required")
	}
	type Plain TicksHistory
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["count"]; !ok || v == nil {
		plain.Count = 5000.0
	}
	if v, ok := raw["style"]; !ok || v == nil {
		plain.Style = "ticks"
	}
	*j = TicksHistory(plain)
	return nil
}
