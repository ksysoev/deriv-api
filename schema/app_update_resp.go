// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Information of the updated application.
type AppUpdateRespAppUpdate struct {
	// Active.
	Active *int `json:"active,omitempty"`

	// Application ID.
	AppId *int `json:"app_id,omitempty"`

	// Markup added to contract prices (as a percentage of contract payout).
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Application's App Store URL.
	Appstore *string `json:"appstore,omitempty"`

	// Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// Application's Google Play URL.
	Googleplay *string `json:"googleplay,omitempty"`

	// Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// Application name.
	Name *string `json:"name,omitempty"`

	// The URL to redirect to after a successful login.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// Scope Details.
	Scopes []string `json:"scopes,omitempty"`

	// Used when `verify_email` called. If available, a URL containing the
	// verification token will be sent to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

// Echo of the request made.
type AppUpdateRespEchoReq map[string]interface{}

type AppUpdateRespMsgType string

var enumValues_AppUpdateRespMsgType = []interface{}{
	"app_update",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppUpdateRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppUpdateRespMsgType, v)
	}
	*j = AppUpdateRespMsgType(v)
	return nil
}

// A message with created application
type AppUpdateResp struct {
	// Information of the updated application.
	AppUpdate *AppUpdateRespAppUpdate `json:"app_update,omitempty"`

	// Echo of the request made.
	EchoReq AppUpdateRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AppUpdateRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const AppUpdateRespMsgTypeAppUpdate AppUpdateRespMsgType = "app_update"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in AppUpdateResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in AppUpdateResp: required")
	}
	type Plain AppUpdateResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppUpdateResp(plain)
	return nil
}
