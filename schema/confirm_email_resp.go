// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type ConfirmEmailRespConfirmEmail int

var enumValues_ConfirmEmailRespConfirmEmail = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailRespConfirmEmail) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfirmEmailRespConfirmEmail {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfirmEmailRespConfirmEmail, v)
	}
	*j = ConfirmEmailRespConfirmEmail(v)
	return nil
}

// Echo of the request made.
type ConfirmEmailRespEchoReq map[string]interface{}

type ConfirmEmailRespMsgType string

var enumValues_ConfirmEmailRespMsgType = []interface{}{
	"confirm_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfirmEmailRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfirmEmailRespMsgType, v)
	}
	*j = ConfirmEmailRespMsgType(v)
	return nil
}

// Confirm Email Response
type ConfirmEmailResp struct {
	// 1 for success (The verification code has been successfully verified)
	ConfirmEmail *ConfirmEmailRespConfirmEmail `json:"confirm_email,omitempty"`

	// Echo of the request made.
	EchoReq ConfirmEmailRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ConfirmEmailRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const ConfirmEmailRespMsgTypeConfirmEmail ConfirmEmailRespMsgType = "confirm_email"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfirmEmailResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in ConfirmEmailResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in ConfirmEmailResp: required")
	}
	type Plain ConfirmEmailResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConfirmEmailResp(plain)
	return nil
}
