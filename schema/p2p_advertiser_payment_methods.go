// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "encoding/json"
import "reflect"

type P2PAdvertiserPaymentMethodsCreateElem struct {
	// Payment method identifer.
	Method string `json:"method"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsCreateElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["method"]; !ok || v == nil {
		return fmt.Errorf("field method: required")
	}
	type Plain P2PAdvertiserPaymentMethodsCreateElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserPaymentMethodsCreateElem(plain)
	return nil
}

type P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods int

var enumValues_P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods, v)
	}
	*j = P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods(v)
	return nil
}

// Manage or list P2P advertiser payment methods.
type P2PAdvertiserPaymentMethods struct {
	// Contains new payment method entries.
	Create []P2PAdvertiserPaymentMethodsCreateElem `json:"create,omitempty"`

	// Contains payment methods to delete.
	Delete []float64 `json:"delete,omitempty"`

	// Must be 1
	P2PAdvertiserPaymentMethods P2PAdvertiserPaymentMethodsP2PAdvertiserPaymentMethods `json:"p2p_advertiser_payment_methods"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough P2PAdvertiserPaymentMethodsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Contains payment methods to update.
	Update P2PAdvertiserPaymentMethodsUpdate `json:"update,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type P2PAdvertiserPaymentMethodsPassthrough map[string]interface{}

// Contains payment methods to update.
type P2PAdvertiserPaymentMethodsUpdate map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserPaymentMethods) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_payment_methods"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_payment_methods: required")
	}
	type Plain P2PAdvertiserPaymentMethods
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserPaymentMethods(plain)
	return nil
}
