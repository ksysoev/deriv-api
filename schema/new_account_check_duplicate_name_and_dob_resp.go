// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Response for checking if name and date of birth match an existing account.
type NewAccountCheckDuplicateNameAndDobResp struct {
	// Echo of the request made.
	EchoReq NewAccountCheckDuplicateNameAndDobRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType NewAccountCheckDuplicateNameAndDobRespMsgType `json:"msg_type"`

	// The result of checking for duplicate name and date of birth
	NewAccountCheckDuplicateNameAndDob *NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob `json:"new_account_check_duplicate_name_and_dob,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type NewAccountCheckDuplicateNameAndDobRespEchoReq map[string]interface{}

type NewAccountCheckDuplicateNameAndDobRespMsgType string

const NewAccountCheckDuplicateNameAndDobRespMsgTypeNewAccountCheckDuplicateNameAndDob NewAccountCheckDuplicateNameAndDobRespMsgType = "new_account_check_duplicate_name_and_dob"

var enumValues_NewAccountCheckDuplicateNameAndDobRespMsgType = []interface{}{
	"new_account_check_duplicate_name_and_dob",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDobRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountCheckDuplicateNameAndDobRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountCheckDuplicateNameAndDobRespMsgType, v)
	}
	*j = NewAccountCheckDuplicateNameAndDobRespMsgType(v)
	return nil
}

// The result of checking for duplicate name and date of birth
type NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob struct {
	// 1 if a matching account was found, 0 if not
	HasDuplicate NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate `json:"has_duplicate"`
}

type NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate int

var enumValues_NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate, v)
	}
	*j = NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDobHasDuplicate(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["has_duplicate"]; raw != nil && !ok {
		return fmt.Errorf("field has_duplicate in NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob: required")
	}
	type Plain NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountCheckDuplicateNameAndDobRespNewAccountCheckDuplicateNameAndDob(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewAccountCheckDuplicateNameAndDobResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in NewAccountCheckDuplicateNameAndDobResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in NewAccountCheckDuplicateNameAndDobResp: required")
	}
	type Plain NewAccountCheckDuplicateNameAndDobResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = NewAccountCheckDuplicateNameAndDobResp(plain)
	return nil
}
