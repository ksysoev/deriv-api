// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "encoding/json"
import "reflect"

type CopytradingListRespCopytradingListCopiersElem struct {
	// The loginid of the copier's account.
	Loginid string `json:"loginid"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListRespCopytradingListCopiersElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	type Plain CopytradingListRespCopytradingListCopiersElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListRespCopytradingListCopiersElem(plain)
	return nil
}

// The trading information of copiers or traders.
type CopytradingListRespCopytradingList struct {
	// List of users who are currently copy trading the authenticated user
	Copiers []CopytradingListRespCopytradingListCopiersElem `json:"copiers"`

	// List of traders being followed by the authenticated user
	Traders []CopytradingListRespCopytradingListTradersElem `json:"traders"`
}

type CopytradingListRespCopytradingListTradersElem struct {
	// The list of assets to copy the trades of.
	Assets []string `json:"assets,omitempty"`

	// The loginid of the trader's account.
	Loginid *string `json:"loginid,omitempty"`

	// Maximum trading stake set for the trader.
	MaxTradeStake interface{} `json:"max_trade_stake,omitempty"`

	// Minimum trading stake set for the trader.
	MinTradeStake interface{} `json:"min_trade_stake,omitempty"`

	// The token provided for the trader.
	Token *string `json:"token,omitempty"`

	// The type of trades set.
	TradeTypes []string `json:"trade_types,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListRespCopytradingList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["copiers"]; !ok || v == nil {
		return fmt.Errorf("field copiers: required")
	}
	if v, ok := raw["traders"]; !ok || v == nil {
		return fmt.Errorf("field traders: required")
	}
	type Plain CopytradingListRespCopytradingList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListRespCopytradingList(plain)
	return nil
}

// Echo of the request made.
type CopytradingListRespEchoReq map[string]interface{}

type CopytradingListRespMsgType string

var enumValues_CopytradingListRespMsgType = []interface{}{
	"copytrading_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingListRespMsgType, v)
	}
	*j = CopytradingListRespMsgType(v)
	return nil
}

// Details of copiers and/or traders for Copy Trading
type CopytradingListResp struct {
	// The trading information of copiers or traders.
	CopytradingList *CopytradingListRespCopytradingList `json:"copytrading_list,omitempty"`

	// Echo of the request made.
	EchoReq CopytradingListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopytradingListRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const CopytradingListRespMsgTypeCopytradingList CopytradingListRespMsgType = "copytrading_list"

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain CopytradingListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingListResp(plain)
	return nil
}
