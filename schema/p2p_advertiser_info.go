// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve information about a P2P advertiser.
type P2PAdvertiserInfo struct {
	// [Optional] The unique identifier for this advertiser. If not provided, returns
	// advertiser information about the current account.
	Id *string `json:"id,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// Must be 1
	P2PAdvertiserInfo P2PAdvertiserInfoP2PAdvertiserInfo `json:"p2p_advertiser_info"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserInfoPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to
	// advertiser
	Subscribe *P2PAdvertiserInfoSubscribe `json:"subscribe,omitempty"`
}

type P2PAdvertiserInfoP2PAdvertiserInfo int

var enumValues_P2PAdvertiserInfoP2PAdvertiserInfo = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoP2PAdvertiserInfo) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoP2PAdvertiserInfo {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoP2PAdvertiserInfo, v)
	}
	*j = P2PAdvertiserInfoP2PAdvertiserInfo(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserInfoPassthrough map[string]interface{}

type P2PAdvertiserInfoSubscribe int

var enumValues_P2PAdvertiserInfoSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfoSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserInfoSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserInfoSubscribe, v)
	}
	*j = P2PAdvertiserInfoSubscribe(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserInfo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["p2p_advertiser_info"]; raw != nil && !ok {
		return fmt.Errorf("field p2p_advertiser_info in P2PAdvertiserInfo: required")
	}
	type Plain P2PAdvertiserInfo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserInfo(plain)
	return nil
}
