// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve a list of all currently active symbols (underlying markets upon which
// contracts are available for trading).
type ActiveSymbols struct {
	// If you use `brief`, only a subset of fields will be returned.
	ActiveSymbols ActiveSymbolsActiveSymbols `json:"active_symbols"`

	// Deprecated - replaced by landing_company_short.
	LandingCompany *ActiveSymbolsLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If you specify this field, only symbols available for trading by
	// that landing company will be returned. If you are logged in, only symbols
	// available for trading by your landing company will be returned regardless of
	// what you specify in this field.
	LandingCompanyShort *ActiveSymbolsLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough ActiveSymbolsPassthrough `json:"passthrough,omitempty"`

	// [Optional] If you specify this field, only symbols that can be traded through
	// that product type will be returned.
	ProductType *ActiveSymbolsProductType `json:"product_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type ActiveSymbolsActiveSymbols string

const ActiveSymbolsActiveSymbolsBrief ActiveSymbolsActiveSymbols = "brief"
const ActiveSymbolsActiveSymbolsFull ActiveSymbolsActiveSymbols = "full"

type ActiveSymbolsLandingCompany string

const ActiveSymbolsLandingCompanyChampion ActiveSymbolsLandingCompany = "champion"
const ActiveSymbolsLandingCompanyChampionVirtual ActiveSymbolsLandingCompany = "champion-virtual"
const ActiveSymbolsLandingCompanyIom ActiveSymbolsLandingCompany = "iom"
const ActiveSymbolsLandingCompanyMalta ActiveSymbolsLandingCompany = "malta"
const ActiveSymbolsLandingCompanyMaltainvest ActiveSymbolsLandingCompany = "maltainvest"

type ActiveSymbolsLandingCompanyShort string

const ActiveSymbolsLandingCompanyShortChampion ActiveSymbolsLandingCompanyShort = "champion"
const ActiveSymbolsLandingCompanyShortChampionVirtual ActiveSymbolsLandingCompanyShort = "champion-virtual"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsLandingCompany, v)
	}
	*j = ActiveSymbolsLandingCompany(v)
	return nil
}

const ActiveSymbolsLandingCompanyShortVirtual ActiveSymbolsLandingCompanyShort = "virtual"

var enumValues_ActiveSymbolsLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsActiveSymbols) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsActiveSymbols {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsActiveSymbols, v)
	}
	*j = ActiveSymbolsActiveSymbols(v)
	return nil
}

var enumValues_ActiveSymbolsLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsLandingCompanyShort, v)
	}
	*j = ActiveSymbolsLandingCompanyShort(v)
	return nil
}

const ActiveSymbolsLandingCompanyShortIom ActiveSymbolsLandingCompanyShort = "iom"
const ActiveSymbolsLandingCompanyShortVanuatu ActiveSymbolsLandingCompanyShort = "vanuatu"
const ActiveSymbolsLandingCompanyShortMaltainvest ActiveSymbolsLandingCompanyShort = "maltainvest"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbols) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["active_symbols"]; !ok || v == nil {
		return fmt.Errorf("field active_symbols in ActiveSymbols: required")
	}
	type Plain ActiveSymbols
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ActiveSymbols(plain)
	return nil
}

const ActiveSymbolsLandingCompanyVanuatu ActiveSymbolsLandingCompany = "vanuatu"
const ActiveSymbolsLandingCompanyShortMalta ActiveSymbolsLandingCompanyShort = "malta"
const ActiveSymbolsLandingCompanyVirtual ActiveSymbolsLandingCompany = "virtual"
const ActiveSymbolsLandingCompanySvg ActiveSymbolsLandingCompany = "svg"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type ActiveSymbolsPassthrough map[string]interface{}

type ActiveSymbolsProductType string

var enumValues_ActiveSymbolsProductType = []interface{}{
	"basic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ActiveSymbolsProductType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ActiveSymbolsProductType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ActiveSymbolsProductType, v)
	}
	*j = ActiveSymbolsProductType(v)
	return nil
}

const ActiveSymbolsProductTypeBasic ActiveSymbolsProductType = "basic"

var enumValues_ActiveSymbolsActiveSymbols = []interface{}{
	"brief",
	"full",
}

const ActiveSymbolsLandingCompanyShortSvg ActiveSymbolsLandingCompanyShort = "svg"
