// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// All orders matching the requested criteria.
type P2POrderListResp struct {
	// Echo of the request made.
	EchoReq P2POrderListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderListRespMsgType `json:"msg_type"`

	// List of P2P orders.
	P2POrderList *P2POrderListRespP2POrderList `json:"p2p_order_list,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *P2POrderListRespSubscription `json:"subscription,omitempty"`
}

// Echo of the request made.
type P2POrderListRespEchoReq map[string]interface{}

type P2POrderListRespMsgType string

const P2POrderListRespMsgTypeP2POrderList P2POrderListRespMsgType = "p2p_order_list"

// List of P2P orders.
type P2POrderListRespP2POrderList struct {
	// List of orders.
	List []P2POrderListRespP2POrderListListElem `json:"list"`
}

type P2POrderListRespP2POrderListListElem struct {
	// The currency to be bought or sold.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderListRespP2POrderListListElemAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderListRespP2POrderListListElemAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails *P2POrderListRespP2POrderListListElemClientDetails `json:"client_details,omitempty"`

	// The epoch time of the order completion.
	CompletionTime *int `json:"completion_time,omitempty"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderListRespP2POrderListListElemDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderListRespP2POrderListListElemIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderListRespP2POrderListListElemIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen *P2POrderListRespP2POrderListListElemIsSeen `json:"is_seen,omitempty"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Supported payment methods. Comma separated list of identifiers.
	PaymentMethod interface{} `json:"payment_method,omitempty"`

	// Names of supported payment methods.
	PaymentMethodNames []string `json:"payment_method_names,omitempty"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Details of the review you gave for this order, if any.
	ReviewDetails *P2POrderListRespP2POrderListListElemReviewDetails `json:"review_details,omitempty"`

	// Current order status.
	Status P2POrderListRespP2POrderListListElemStatus `json:"status"`

	// Whether this is a buy or a sell.
	Type P2POrderListRespP2POrderListListElemType `json:"type"`

	// If blocked for too many failed verification attempts, the epoch time that the
	// block will end.
	VerificationLockoutUntil *int `json:"verification_lockout_until,omitempty"`

	// If a verification request has already been made, the epoch time that another
	// verification request can be made.
	VerificationNextRequest *int `json:"verification_next_request,omitempty"`

	// Indicates that the seller in the process of confirming the order.
	VerificationPending *P2POrderListRespP2POrderListListElemVerificationPending `json:"verification_pending,omitempty"`

	// Epoch time that the current verification token will expire.
	VerificationTokenExpiry *int `json:"verification_token_expiry,omitempty"`
}

// Details of the advert for this order.
type P2POrderListRespP2POrderListListElemAdvertDetails struct {
	// Indicates if this is block trade advert or not.
	BlockTrade P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade `json:"block_trade"`

	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderListRespP2POrderListListElemAdvertDetailsType `json:"type"`
}

type P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade int

type P2POrderListRespP2POrderListListElemAdvertDetailsType string

const P2POrderListRespP2POrderListListElemAdvertDetailsTypeBuy P2POrderListRespP2POrderListListElemAdvertDetailsType = "buy"
const P2POrderListRespP2POrderListListElemAdvertDetailsTypeSell P2POrderListRespP2POrderListListElemAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderListRespP2POrderListListElemAdvertiserDetails struct {
	// The advertiser's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline `json:"is_online"`

	// Indicates that the advertiser was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline int

type P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended struct {
	Value interface{}
}

// Details of the client who created the order.
type P2POrderListRespP2POrderListListElemClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderListRespP2POrderListListElemClientDetailsIsOnline `json:"is_online"`

	// Indicates that the client was recommended in the most recent review by the
	// current user.
	IsRecommended *P2POrderListRespP2POrderListListElemClientDetailsIsRecommended `json:"is_recommended,omitempty"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderListRespP2POrderListListElemClientDetailsIsOnline int

type P2POrderListRespP2POrderListListElemClientDetailsIsRecommended struct {
	Value interface{}
}

// Details of the order dispute.
type P2POrderListRespP2POrderListListElemDisputeDetails struct {
	// The dispute reason
	DisputeReason interface{} `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid interface{} `json:"disputer_loginid"`
}

type P2POrderListRespP2POrderListListElemIsIncoming int

type P2POrderListRespP2POrderListListElemIsReviewable int

type P2POrderListRespP2POrderListListElemIsSeen int

// Details of the review you gave for this order, if any.
type P2POrderListRespP2POrderListListElemReviewDetails struct {
	// The epoch time of the review.
	CreatedTime int `json:"created_time"`

	// Rating for the transaction, 1 to 5.
	Rating int `json:"rating"`

	// `1` if the advertiser is recommended, `0` if not recommended.
	Recommended P2POrderListRespP2POrderListListElemReviewDetailsRecommended `json:"recommended"`
}

type P2POrderListRespP2POrderListListElemReviewDetailsRecommended struct {
	Value interface{}
}

type P2POrderListRespP2POrderListListElemStatus string

const P2POrderListRespP2POrderListListElemStatusBlocked P2POrderListRespP2POrderListListElemStatus = "blocked"
const P2POrderListRespP2POrderListListElemStatusBuyerConfirmed P2POrderListRespP2POrderListListElemStatus = "buyer-confirmed"
const P2POrderListRespP2POrderListListElemStatusCancelled P2POrderListRespP2POrderListListElemStatus = "cancelled"
const P2POrderListRespP2POrderListListElemStatusCompleted P2POrderListRespP2POrderListListElemStatus = "completed"
const P2POrderListRespP2POrderListListElemStatusDisputeCompleted P2POrderListRespP2POrderListListElemStatus = "dispute-completed"
const P2POrderListRespP2POrderListListElemStatusDisputeRefunded P2POrderListRespP2POrderListListElemStatus = "dispute-refunded"
const P2POrderListRespP2POrderListListElemStatusDisputed P2POrderListRespP2POrderListListElemStatus = "disputed"
const P2POrderListRespP2POrderListListElemStatusPending P2POrderListRespP2POrderListListElemStatus = "pending"
const P2POrderListRespP2POrderListListElemStatusRefunded P2POrderListRespP2POrderListListElemStatus = "refunded"
const P2POrderListRespP2POrderListListElemStatusTimedOut P2POrderListRespP2POrderListListElemStatus = "timed-out"

type P2POrderListRespP2POrderListListElemType string

const P2POrderListRespP2POrderListListElemTypeBuy P2POrderListRespP2POrderListListElemType = "buy"

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListRespP2POrderListListElemClientDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemIsIncoming, v)
	}
	*j = P2POrderListRespP2POrderListListElemIsIncoming(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemClientDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsRecommended, v.Value)
	}
	*j = P2POrderListRespP2POrderListListElemClientDetailsIsRecommended(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemIsReviewable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemIsReviewable, v)
	}
	*j = P2POrderListRespP2POrderListListElemIsReviewable(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}
var enumValues_P2POrderListRespP2POrderListListElemIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemIsSeen, v)
	}
	*j = P2POrderListRespP2POrderListListElemIsSeen(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsOnline, v)
	}
	*j = P2POrderListRespP2POrderListListElemClientDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended = []interface{}{
	nil,
	0,
	1,
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListRespP2POrderListListElemReviewDetailsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemClientDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemReviewDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["rating"]; !ok || v == nil {
		return fmt.Errorf("field rating: required")
	}
	if v, ok := raw["recommended"]; !ok || v == nil {
		return fmt.Errorf("field recommended: required")
	}
	type Plain P2POrderListRespP2POrderListListElemReviewDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElemReviewDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderListRespP2POrderListListElemAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElemAdvertiserDetails(plain)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemStatus = []interface{}{
	"pending",
	"buyer-confirmed",
	"cancelled",
	"timed-out",
	"blocked",
	"refunded",
	"completed",
	"disputed",
	"dispute-refunded",
	"dispute-completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemStatus, v)
	}
	*j = P2POrderListRespP2POrderListListElemStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended, v.Value)
	}
	*j = P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended(v)
	return nil
}

// MarshalJSON implements json.Marshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertiserDetailsIsRecommended) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}

var enumValues_P2POrderListRespP2POrderListListElemReviewDetailsRecommended = []interface{}{
	nil,
	0,
	1,
}
var enumValues_P2POrderListRespP2POrderListListElemIsIncoming = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemReviewDetailsRecommended) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemReviewDetailsRecommended {
		if reflect.DeepEqual(v.Value, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemReviewDetailsRecommended, v.Value)
	}
	*j = P2POrderListRespP2POrderListListElemReviewDetailsRecommended(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["block_trade"]; !ok || v == nil {
		return fmt.Errorf("field block_trade: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderListRespP2POrderListListElemAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElemAdvertDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsType, v)
	}
	*j = P2POrderListRespP2POrderListListElemAdvertDetailsType(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade, v)
	}
	*j = P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderListRespP2POrderListListElemDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElemDisputeDetails(plain)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemType, v)
	}
	*j = P2POrderListRespP2POrderListListElemType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderListRespP2POrderListListElemClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElemClientDetails(plain)
	return nil
}

const P2POrderListRespP2POrderListListElemTypeSell P2POrderListRespP2POrderListListElemType = "sell"

type P2POrderListRespP2POrderListListElemVerificationPending int

var enumValues_P2POrderListRespP2POrderListListElemVerificationPending = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElemVerificationPending) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespP2POrderListListElemVerificationPending {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespP2POrderListListElemVerificationPending, v)
	}
	*j = P2POrderListRespP2POrderListListElemVerificationPending(v)
	return nil
}

var enumValues_P2POrderListRespP2POrderListListElemAdvertDetailsBlockTrade = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderListListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderListRespP2POrderListListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderListListElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListRespMsgType, v)
	}
	*j = P2POrderListRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespP2POrderList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["list"]; !ok || v == nil {
		return fmt.Errorf("field list: required")
	}
	type Plain P2POrderListRespP2POrderList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespP2POrderList(plain)
	return nil
}

// For subscription requests only.
type P2POrderListRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain P2POrderListRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListRespSubscription(plain)
	return nil
}

var enumValues_P2POrderListRespMsgType = []interface{}{
	"p2p_order_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderListResp(plain)
	return nil
}
