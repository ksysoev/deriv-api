// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Echo of the request made.
type SellRespEchoReq map[string]interface{}

type SellRespMsgType string

var enumValues_SellRespMsgType = []interface{}{
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellRespMsgType, v)
	}
	*j = SellRespMsgType(v)
	return nil
}

// A message with transaction results is received
type SellResp struct {
	// Echo of the request made.
	EchoReq SellRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SellRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Receipt for the transaction
	Sell *SellRespSell `json:"sell,omitempty"`
}

const SellRespMsgTypeSell SellRespMsgType = "sell"

// Receipt for the transaction
type SellRespSell struct {
	// New account balance after completion of the sale
	BalanceAfter *float64 `json:"balance_after,omitempty"`

	// Internal contract identifier for the sold contract
	ContractId *int `json:"contract_id,omitempty"`

	// Internal transaction identifier for the corresponding buy transaction
	ReferenceId *int `json:"reference_id,omitempty"`

	// Actual effected sale price
	SoldFor *float64 `json:"sold_for,omitempty"`

	// Internal transaction identifier for the sale transaction
	TransactionId *int `json:"transaction_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in SellResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in SellResp: required")
	}
	type Plain SellResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellResp(plain)
	return nil
}
