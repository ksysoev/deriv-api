// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This gives summary of client's trades and account for reality check
type RealityCheckResp struct {
	// Echo of the request made.
	EchoReq RealityCheckRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType RealityCheckRespMsgType `json:"msg_type"`

	// Reality check summary of trades.
	RealityCheck *RealityCheckRespRealityCheck `json:"reality_check,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type RealityCheckRespEchoReq map[string]interface{}

type RealityCheckRespMsgType string

const RealityCheckRespMsgTypeRealityCheck RealityCheckRespMsgType = "reality_check"

var enumValues_RealityCheckRespMsgType = []interface{}{
	"reality_check",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RealityCheckRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RealityCheckRespMsgType, v)
	}
	*j = RealityCheckRespMsgType(v)
	return nil
}

// Reality check summary of trades.
type RealityCheckRespRealityCheck struct {
	// Total amount of contract purchased.
	BuyAmount *float64 `json:"buy_amount,omitempty"`

	// Total count of contract purchased.
	BuyCount *int `json:"buy_count,omitempty"`

	// Currency of client account i.e currency for trading
	Currency *string `json:"currency,omitempty"`

	// Client loginid.
	Loginid *string `json:"loginid,omitempty"`

	// Total count of contracts that are not yet expired.
	OpenContractCount *int `json:"open_contract_count,omitempty"`

	// Indicative profit of contract as per current market price.
	PotentialProfit *float64 `json:"potential_profit,omitempty"`

	// Total amount of contracts sold.
	SellAmount *float64 `json:"sell_amount,omitempty"`

	// Total count of contract sold.
	SellCount *int `json:"sell_count,omitempty"`

	// Reality check summary start time epoch
	StartTime *int `json:"start_time,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in RealityCheckResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in RealityCheckResp: required")
	}
	type Plain RealityCheckResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RealityCheckResp(plain)
	return nil
}
