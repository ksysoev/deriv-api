// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type P2POrderListActive float64

var enumValues_P2POrderListActive = []interface{}{
	0.0,
	1.0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListActive) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListActive {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListActive, v)
	}
	*j = P2POrderListActive(v)
	return nil
}

type P2POrderListP2POrderList int

var enumValues_P2POrderListP2POrderList = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListP2POrderList) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListP2POrderList {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListP2POrderList, v)
	}
	*j = P2POrderListP2POrderList(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type P2POrderListPassthrough map[string]interface{}

type P2POrderListSubscribe int

var enumValues_P2POrderListSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderListSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderListSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderListSubscribe, v)
	}
	*j = P2POrderListSubscribe(v)
	return nil
}

// List active orders.
type P2POrderList struct {
	// [Optional] Should be 1 to list active, 0 to list inactive (historical).
	Active *P2POrderListActive `json:"active,omitempty"`

	// [Optional] If present, lists orders applying to a specific advert.
	AdvertId *string `json:"advert_id,omitempty"`

	// [Optional] Used for paging.
	Limit int `json:"limit,omitempty"`

	// [Optional] Used for paging.
	Offset int `json:"offset,omitempty"`

	// Must be 1
	P2POrderList P2POrderListP2POrderList `json:"p2p_order_list"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough P2POrderListPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is a change to any
	// order belonging to you.
	Subscribe *P2POrderListSubscribe `json:"subscribe,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderList) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_order_list"]; !ok || v == nil {
		return fmt.Errorf("field p2p_order_list in P2POrderList: required")
	}
	type Plain P2POrderList
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50.0
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0.0
	}
	*j = P2POrderList(plain)
	return nil
}
