// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Returns all accounts belonging to the authorized user.
type AccountListResp struct {
	// List of accounts for current user. This is also available from the `authroize`
	// call.
	AccountList []AccountListRespAccountListElem `json:"account_list,omitempty"`

	// Echo of the request made.
	EchoReq AccountListRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType AccountListRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

type AccountListRespAccountListElem struct {
	// Account category.
	AccountCategory AccountListRespAccountListElemAccountCategory `json:"account_category"`

	// Account type.
	AccountType string `json:"account_type"`

	// 2 letter broker code.
	Broker *string `json:"broker,omitempty"`

	// Creation time of the account as epoch.
	CreatedAt int `json:"created_at"`

	// Currency of specified account.
	Currency string `json:"currency"`

	// Boolean value: 1 or 0, indicating whether the account is marked as disabled or
	// not.
	IsDisabled AccountListRespAccountListElemIsDisabled `json:"is_disabled"`

	// Boolean value: 1 or 0, indicating whether the account is a virtual-money
	// account.
	IsVirtual AccountListRespAccountListElemIsVirtual `json:"is_virtual"`

	// Landing company shortcode the account belongs to.
	LandingCompanyName string `json:"landing_company_name"`

	// Details of the list of Trading accounts linked to the Wallet account.
	LinkedTo []AccountListRespAccountListElemLinkedToElem `json:"linked_to"`

	// The account ID of specified account.
	Loginid string `json:"loginid"`
}

type AccountListRespAccountListElemAccountCategory string

const AccountListRespAccountListElemAccountCategoryTrading AccountListRespAccountListElemAccountCategory = "trading"
const AccountListRespAccountListElemAccountCategoryWallet AccountListRespAccountListElemAccountCategory = "wallet"

var enumValues_AccountListRespAccountListElemAccountCategory = []interface{}{
	"trading",
	"wallet",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespAccountListElemAccountCategory) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AccountListRespAccountListElemAccountCategory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AccountListRespAccountListElemAccountCategory, v)
	}
	*j = AccountListRespAccountListElemAccountCategory(v)
	return nil
}

type AccountListRespAccountListElemIsDisabled int

var enumValues_AccountListRespAccountListElemIsDisabled = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespAccountListElemIsDisabled) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AccountListRespAccountListElemIsDisabled {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AccountListRespAccountListElemIsDisabled, v)
	}
	*j = AccountListRespAccountListElemIsDisabled(v)
	return nil
}

type AccountListRespAccountListElemIsVirtual int

var enumValues_AccountListRespAccountListElemIsVirtual = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespAccountListElemIsVirtual) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AccountListRespAccountListElemIsVirtual {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AccountListRespAccountListElemIsVirtual, v)
	}
	*j = AccountListRespAccountListElemIsVirtual(v)
	return nil
}

type AccountListRespAccountListElemLinkedToElem struct {
	// Account ID.
	Loginid *string `json:"loginid,omitempty"`

	// Account platform name.
	Platform *AccountListRespAccountListElemLinkedToElemPlatform `json:"platform,omitempty"`
}

type AccountListRespAccountListElemLinkedToElemPlatform string

const AccountListRespAccountListElemLinkedToElemPlatformCtrader AccountListRespAccountListElemLinkedToElemPlatform = "ctrader"
const AccountListRespAccountListElemLinkedToElemPlatformDerivez AccountListRespAccountListElemLinkedToElemPlatform = "derivez"
const AccountListRespAccountListElemLinkedToElemPlatformDtrade AccountListRespAccountListElemLinkedToElemPlatform = "dtrade"
const AccountListRespAccountListElemLinkedToElemPlatformDwallet AccountListRespAccountListElemLinkedToElemPlatform = "dwallet"
const AccountListRespAccountListElemLinkedToElemPlatformDxtrade AccountListRespAccountListElemLinkedToElemPlatform = "dxtrade"
const AccountListRespAccountListElemLinkedToElemPlatformMt5 AccountListRespAccountListElemLinkedToElemPlatform = "mt5"

var enumValues_AccountListRespAccountListElemLinkedToElemPlatform = []interface{}{
	"ctrader",
	"derivez",
	"dtrade",
	"dwallet",
	"dxtrade",
	"mt5",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespAccountListElemLinkedToElemPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AccountListRespAccountListElemLinkedToElemPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AccountListRespAccountListElemLinkedToElemPlatform, v)
	}
	*j = AccountListRespAccountListElemLinkedToElemPlatform(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespAccountListElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["account_category"]; raw != nil && !ok {
		return fmt.Errorf("field account_category in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["account_type"]; raw != nil && !ok {
		return fmt.Errorf("field account_type in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["created_at"]; raw != nil && !ok {
		return fmt.Errorf("field created_at in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["currency"]; raw != nil && !ok {
		return fmt.Errorf("field currency in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["is_disabled"]; raw != nil && !ok {
		return fmt.Errorf("field is_disabled in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["is_virtual"]; raw != nil && !ok {
		return fmt.Errorf("field is_virtual in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["landing_company_name"]; raw != nil && !ok {
		return fmt.Errorf("field landing_company_name in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["linked_to"]; raw != nil && !ok {
		return fmt.Errorf("field linked_to in AccountListRespAccountListElem: required")
	}
	if _, ok := raw["loginid"]; raw != nil && !ok {
		return fmt.Errorf("field loginid in AccountListRespAccountListElem: required")
	}
	type Plain AccountListRespAccountListElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AccountListRespAccountListElem(plain)
	return nil
}

// Echo of the request made.
type AccountListRespEchoReq map[string]interface{}

type AccountListRespMsgType string

const AccountListRespMsgTypeAccountList AccountListRespMsgType = "account_list"

var enumValues_AccountListRespMsgType = []interface{}{
	"account_list",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AccountListRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AccountListRespMsgType, v)
	}
	*j = AccountListRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AccountListResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in AccountListResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in AccountListResp: required")
	}
	type Plain AccountListResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AccountListResp(plain)
	return nil
}
