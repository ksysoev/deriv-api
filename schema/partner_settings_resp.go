// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get Partner Settings (Partner Type, Company Details etc)
type PartnerSettingsResp struct {
	// Echo of the request made.
	EchoReq PartnerSettingsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType PartnerSettingsRespMsgType `json:"msg_type"`

	// Partner-specific information and settings.
	PartnerSettings *PartnerSettingsRespPartnerSettings `json:"partner_settings,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type PartnerSettingsRespEchoReq map[string]interface{}

type PartnerSettingsRespMsgType string

const PartnerSettingsRespMsgTypePartnerSettings PartnerSettingsRespMsgType = "partner_settings"

var enumValues_PartnerSettingsRespMsgType = []interface{}{
	"partner_settings",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsRespMsgType, v)
	}
	*j = PartnerSettingsRespMsgType(v)
	return nil
}

// Partner-specific information and settings.
type PartnerSettingsRespPartnerSettings struct {
	// [Optional] Company name. Only applicable for partners of type company.
	CompanyName *string `json:"company_name,omitempty"`

	// [Optional] Company registration number. Only applicable for partners of type
	// company.
	CompanyRegistrationNumber *string `json:"company_registration_number,omitempty"`

	// Defines whether this partner is an individual or a company.
	PartnerType *PartnerSettingsRespPartnerSettingsPartnerType `json:"partner_type,omitempty"`

	// Platform URL for Dynamic works dashboard to be redirected from Partners Hub
	// which will be set in BackOffice.
	PlatformURL *string `json:"platform_URL,omitempty"`

	// Defines the provider platform.
	Provider *PartnerSettingsRespPartnerSettingsProvider `json:"provider,omitempty"`

	// Partner's Website URI/Promotional Platform
	Website *string `json:"website,omitempty"`
}

type PartnerSettingsRespPartnerSettingsPartnerType string

const PartnerSettingsRespPartnerSettingsPartnerTypeCompany PartnerSettingsRespPartnerSettingsPartnerType = "company"
const PartnerSettingsRespPartnerSettingsPartnerTypeIndividual PartnerSettingsRespPartnerSettingsPartnerType = "individual"

var enumValues_PartnerSettingsRespPartnerSettingsPartnerType = []interface{}{
	"individual",
	"company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsRespPartnerSettingsPartnerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsRespPartnerSettingsPartnerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsRespPartnerSettingsPartnerType, v)
	}
	*j = PartnerSettingsRespPartnerSettingsPartnerType(v)
	return nil
}

type PartnerSettingsRespPartnerSettingsProvider string

const PartnerSettingsRespPartnerSettingsProviderDynamicworks PartnerSettingsRespPartnerSettingsProvider = "dynamicworks"
const PartnerSettingsRespPartnerSettingsProviderMyaffiliate PartnerSettingsRespPartnerSettingsProvider = "myaffiliate"

var enumValues_PartnerSettingsRespPartnerSettingsProvider = []interface{}{
	"myaffiliate",
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsRespPartnerSettingsProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsRespPartnerSettingsProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsRespPartnerSettingsProvider, v)
	}
	*j = PartnerSettingsRespPartnerSettingsProvider(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in PartnerSettingsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in PartnerSettingsResp: required")
	}
	type Plain PartnerSettingsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerSettingsResp(plain)
	return nil
}
