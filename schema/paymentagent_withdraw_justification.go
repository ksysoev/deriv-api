// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentWithdrawJustificationPassthrough map[string]interface{}

type PaymentagentWithdrawJustificationPaymentagentWithdrawJustification int

var enumValues_PaymentagentWithdrawJustificationPaymentagentWithdrawJustification = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustificationPaymentagentWithdrawJustification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentWithdrawJustificationPaymentagentWithdrawJustification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentWithdrawJustificationPaymentagentWithdrawJustification, v)
	}
	*j = PaymentagentWithdrawJustificationPaymentagentWithdrawJustification(v)
	return nil
}

// Provide justification to perform withdrawal using a Payment Agent.
type PaymentagentWithdrawJustification struct {
	// Reasons for needing to withdraw using a Payment Agent.
	Message *string `json:"message,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentWithdrawJustificationPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PaymentagentWithdrawJustification PaymentagentWithdrawJustificationPaymentagentWithdrawJustification `json:"paymentagent_withdraw_justification"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentWithdrawJustification) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["paymentagent_withdraw_justification"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_withdraw_justification: required")
	}
	type Plain PaymentagentWithdrawJustification
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentWithdrawJustification(plain)
	return nil
}
