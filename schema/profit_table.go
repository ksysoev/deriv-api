// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve a summary of account Profit Table, according to given search criteria
type ProfitTable struct {
	// Return only contracts of the specified types
	ContractType []ProfitTableContractTypeElem `json:"contract_type,omitempty"`

	// [Optional] Start date (epoch or YYYY-MM-DD)
	DateFrom *string `json:"date_from,omitempty"`

	// [Optional] End date (epoch or YYYY-MM-DD)
	DateTo *string `json:"date_to,omitempty"`

	// [Optional] If set to 1, will return full contracts description.
	Description *ProfitTableDescription `json:"description,omitempty"`

	// [Optional] Apply upper limit to count of transactions received.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Number of transactions to skip.
	Offset *int `json:"offset,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ProfitTablePassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	ProfitTable ProfitTableProfitTable `json:"profit_table"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Sort direction.
	Sort ProfitTableSort `json:"sort,omitempty"`
}

type ProfitTableContractTypeElem string

const ProfitTableContractTypeElemACCU ProfitTableContractTypeElem = "ACCU"
const ProfitTableContractTypeElemASIAND ProfitTableContractTypeElem = "ASIAND"
const ProfitTableContractTypeElemASIANU ProfitTableContractTypeElem = "ASIANU"
const ProfitTableContractTypeElemCALL ProfitTableContractTypeElem = "CALL"
const ProfitTableContractTypeElemCALLE ProfitTableContractTypeElem = "CALLE"
const ProfitTableContractTypeElemCALLSPREAD ProfitTableContractTypeElem = "CALLSPREAD"
const ProfitTableContractTypeElemDIGITDIFF ProfitTableContractTypeElem = "DIGITDIFF"
const ProfitTableContractTypeElemDIGITEVEN ProfitTableContractTypeElem = "DIGITEVEN"
const ProfitTableContractTypeElemDIGITMATCH ProfitTableContractTypeElem = "DIGITMATCH"
const ProfitTableContractTypeElemDIGITODD ProfitTableContractTypeElem = "DIGITODD"
const ProfitTableContractTypeElemDIGITOVER ProfitTableContractTypeElem = "DIGITOVER"
const ProfitTableContractTypeElemDIGITUNDER ProfitTableContractTypeElem = "DIGITUNDER"
const ProfitTableContractTypeElemEXPIRYMISS ProfitTableContractTypeElem = "EXPIRYMISS"
const ProfitTableContractTypeElemEXPIRYMISSE ProfitTableContractTypeElem = "EXPIRYMISSE"
const ProfitTableContractTypeElemEXPIRYRANGE ProfitTableContractTypeElem = "EXPIRYRANGE"
const ProfitTableContractTypeElemEXPIRYRANGEE ProfitTableContractTypeElem = "EXPIRYRANGEE"
const ProfitTableContractTypeElemLBFLOATCALL ProfitTableContractTypeElem = "LBFLOATCALL"
const ProfitTableContractTypeElemLBFLOATPUT ProfitTableContractTypeElem = "LBFLOATPUT"
const ProfitTableContractTypeElemLBHIGHLOW ProfitTableContractTypeElem = "LBHIGHLOW"
const ProfitTableContractTypeElemMULTDOWN ProfitTableContractTypeElem = "MULTDOWN"
const ProfitTableContractTypeElemMULTUP ProfitTableContractTypeElem = "MULTUP"
const ProfitTableContractTypeElemNOTOUCH ProfitTableContractTypeElem = "NOTOUCH"
const ProfitTableContractTypeElemONETOUCH ProfitTableContractTypeElem = "ONETOUCH"
const ProfitTableContractTypeElemPUT ProfitTableContractTypeElem = "PUT"
const ProfitTableContractTypeElemPUTE ProfitTableContractTypeElem = "PUTE"
const ProfitTableContractTypeElemPUTSPREAD ProfitTableContractTypeElem = "PUTSPREAD"
const ProfitTableContractTypeElemRANGE ProfitTableContractTypeElem = "RANGE"
const ProfitTableContractTypeElemRESETCALL ProfitTableContractTypeElem = "RESETCALL"
const ProfitTableContractTypeElemRESETPUT ProfitTableContractTypeElem = "RESETPUT"
const ProfitTableContractTypeElemRUNHIGH ProfitTableContractTypeElem = "RUNHIGH"
const ProfitTableContractTypeElemRUNLOW ProfitTableContractTypeElem = "RUNLOW"
const ProfitTableContractTypeElemTICKHIGH ProfitTableContractTypeElem = "TICKHIGH"
const ProfitTableContractTypeElemTICKLOW ProfitTableContractTypeElem = "TICKLOW"
const ProfitTableContractTypeElemTURBOSLONG ProfitTableContractTypeElem = "TURBOSLONG"
const ProfitTableContractTypeElemTURBOSSHORT ProfitTableContractTypeElem = "TURBOSSHORT"
const ProfitTableContractTypeElemUPORDOWN ProfitTableContractTypeElem = "UPORDOWN"
const ProfitTableContractTypeElemVANILLALONGCALL ProfitTableContractTypeElem = "VANILLALONGCALL"
const ProfitTableContractTypeElemVANILLALONGPUT ProfitTableContractTypeElem = "VANILLALONGPUT"

var enumValues_ProfitTableContractTypeElem = []interface{}{
	"ACCU",
	"ASIAND",
	"ASIANU",
	"CALL",
	"CALLE",
	"CALLSPREAD",
	"DIGITDIFF",
	"DIGITEVEN",
	"DIGITMATCH",
	"DIGITODD",
	"DIGITOVER",
	"DIGITUNDER",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"EXPIRYRANGE",
	"EXPIRYRANGEE",
	"LBFLOATCALL",
	"LBFLOATPUT",
	"LBHIGHLOW",
	"MULTDOWN",
	"MULTUP",
	"NOTOUCH",
	"ONETOUCH",
	"PUT",
	"PUTE",
	"PUTSPREAD",
	"RANGE",
	"RESETCALL",
	"RESETPUT",
	"RUNHIGH",
	"RUNLOW",
	"TICKHIGH",
	"TICKLOW",
	"UPORDOWN",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableContractTypeElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableContractTypeElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableContractTypeElem, v)
	}
	*j = ProfitTableContractTypeElem(v)
	return nil
}

type ProfitTableDescription int

var enumValues_ProfitTableDescription = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableDescription) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableDescription {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableDescription, v)
	}
	*j = ProfitTableDescription(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ProfitTablePassthrough map[string]interface{}

type ProfitTableProfitTable int

var enumValues_ProfitTableProfitTable = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableProfitTable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableProfitTable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableProfitTable, v)
	}
	*j = ProfitTableProfitTable(v)
	return nil
}

type ProfitTableSort string

const ProfitTableSortASC ProfitTableSort = "ASC"
const ProfitTableSortDESC ProfitTableSort = "DESC"

var enumValues_ProfitTableSort = []interface{}{
	"ASC",
	"DESC",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTableSort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ProfitTableSort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ProfitTableSort, v)
	}
	*j = ProfitTableSort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ProfitTable) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["profit_table"]; raw != nil && !ok {
		return fmt.Errorf("field profit_table in ProfitTable: required")
	}
	type Plain ProfitTable
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 50.0
	}
	if v, ok := raw["sort"]; !ok || v == nil {
		plain.Sort = "DESC"
	}
	*j = ProfitTable(plain)
	return nil
}
