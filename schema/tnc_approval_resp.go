// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The result of T&C approval request.
type TncApprovalResp struct {
	// Echo of the request made.
	EchoReq TncApprovalRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TncApprovalRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// Set terms and conditions 1: success
	TncApproval *TncApprovalRespTncApproval `json:"tnc_approval,omitempty"`
}

// Echo of the request made.
type TncApprovalRespEchoReq map[string]interface{}

type TncApprovalRespMsgType string

const TncApprovalRespMsgTypeTncApproval TncApprovalRespMsgType = "tnc_approval"

var enumValues_TncApprovalRespMsgType = []interface{}{
	"tnc_approval",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalRespMsgType, v)
	}
	*j = TncApprovalRespMsgType(v)
	return nil
}

type TncApprovalRespTncApproval int

var enumValues_TncApprovalRespTncApproval = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalRespTncApproval) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TncApprovalRespTncApproval {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TncApprovalRespTncApproval, v)
	}
	*j = TncApprovalRespTncApproval(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TncApprovalResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in TncApprovalResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in TncApprovalResp: required")
	}
	type Plain TncApprovalResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TncApprovalResp(plain)
	return nil
}
