// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Get MT5 user settings
type Mt5GetSettingsResp struct {
	// Echo of the request made.
	EchoReq Mt5GetSettingsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5GetSettingsRespMsgType `json:"msg_type"`

	// MT5 user account details
	Mt5GetSettings *Mt5GetSettingsRespMt5GetSettings `json:"mt5_get_settings,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type Mt5GetSettingsRespEchoReq map[string]interface{}

type Mt5GetSettingsRespMsgType string

const Mt5GetSettingsRespMsgTypeMt5GetSettings Mt5GetSettingsRespMsgType = "mt5_get_settings"

// MT5 user account details
type Mt5GetSettingsRespMt5GetSettings struct {
	// Account type.
	AccountType *Mt5GetSettingsRespMt5GetSettingsAccountType `json:"account_type,omitempty"`

	// The address of the user. The maximum length of the address is 128 characters.
	Address *string `json:"address,omitempty"`

	// Account balance.
	Balance *string `json:"balance,omitempty"`

	// User's city of residence.
	City *string `json:"city,omitempty"`

	// Name of the client's company. The maximum length of the company name is 64
	// characters.
	Company *string `json:"company,omitempty"`

	// 2-letter country code.
	Country *string `json:"country,omitempty"`

	// MT5 account currency (`USD` or `EUR`) that depends on the MT5 company
	// (`vanuatu`, `svg`, `malta`).
	Currency *string `json:"currency,omitempty"`

	// Email address.
	Email *string `json:"email,omitempty"`

	// The group where account belongs to.
	Group *string `json:"group,omitempty"`

	// Landing company shortcode of the MT5 account.
	LandingCompanyShort *Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort `json:"landing_company_short,omitempty"`

	// Client leverage (from 1 to 1000).
	Leverage *float64 `json:"leverage,omitempty"`

	// Login ID of the user's MT5 account.
	Login *string `json:"login,omitempty"`

	// Market type
	MarketType *Mt5GetSettingsRespMt5GetSettingsMarketType `json:"market_type,omitempty"`

	// Client's name. The maximum length of a client's symbol name is 128 characters.
	Name *string `json:"name,omitempty"`

	// User's phone number.
	Phone *string `json:"phone,omitempty"`

	// The user's phone password.
	PhonePassword *string `json:"phonePassword,omitempty"`

	// User's state (region) of residence.
	State *string `json:"state,omitempty"`

	// Sub account type
	SubAccountType *Mt5GetSettingsRespMt5GetSettingsSubAccountType `json:"sub_account_type,omitempty"`

	// User's zip code.
	ZipCode *string `json:"zipCode,omitempty"`
}

type Mt5GetSettingsRespMt5GetSettingsAccountType string

const Mt5GetSettingsRespMt5GetSettingsAccountTypeDemo Mt5GetSettingsRespMt5GetSettingsAccountType = "demo"
const Mt5GetSettingsRespMt5GetSettingsAccountTypeReal Mt5GetSettingsRespMt5GetSettingsAccountType = "real"

type Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort string

const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortBvi Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "bvi"
const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortLabuan Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "labuan"
const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortMalta Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "malta"
const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortMaltainvest Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "maltainvest"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRespMt5GetSettingsMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRespMt5GetSettingsMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRespMt5GetSettingsMarketType, v)
	}
	*j = Mt5GetSettingsRespMt5GetSettingsMarketType(v)
	return nil
}

var enumValues_Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = []interface{}{
	"bvi",
	"labuan",
	"malta",
	"maltainvest",
	"svg",
	"vanuatu",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRespMt5GetSettingsAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRespMt5GetSettingsAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRespMt5GetSettingsAccountType, v)
	}
	*j = Mt5GetSettingsRespMt5GetSettingsAccountType(v)
	return nil
}

var enumValues_Mt5GetSettingsRespMt5GetSettingsAccountType = []interface{}{
	"demo",
	"real",
}

const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortSvg Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "svg"
const Mt5GetSettingsRespMt5GetSettingsLandingCompanyShortVanuatu Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort = "vanuatu"

type Mt5GetSettingsRespMt5GetSettingsMarketType string

var enumValues_Mt5GetSettingsRespMt5GetSettingsMarketType = []interface{}{
	"financial",
	"synthetic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort, v)
	}
	*j = Mt5GetSettingsRespMt5GetSettingsLandingCompanyShort(v)
	return nil
}

const Mt5GetSettingsRespMt5GetSettingsMarketTypeFinancial Mt5GetSettingsRespMt5GetSettingsMarketType = "financial"
const Mt5GetSettingsRespMt5GetSettingsMarketTypeSynthetic Mt5GetSettingsRespMt5GetSettingsMarketType = "synthetic"

type Mt5GetSettingsRespMt5GetSettingsSubAccountType string

var enumValues_Mt5GetSettingsRespMt5GetSettingsSubAccountType = []interface{}{
	"financial",
	"financial_stp",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRespMt5GetSettingsSubAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRespMt5GetSettingsSubAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRespMt5GetSettingsSubAccountType, v)
	}
	*j = Mt5GetSettingsRespMt5GetSettingsSubAccountType(v)
	return nil
}

const Mt5GetSettingsRespMt5GetSettingsSubAccountTypeFinancial Mt5GetSettingsRespMt5GetSettingsSubAccountType = "financial"
const Mt5GetSettingsRespMt5GetSettingsSubAccountTypeFinancialStp Mt5GetSettingsRespMt5GetSettingsSubAccountType = "financial_stp"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5GetSettingsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5GetSettingsRespMsgType, v)
	}
	*j = Mt5GetSettingsRespMsgType(v)
	return nil
}

var enumValues_Mt5GetSettingsRespMsgType = []interface{}{
	"mt5_get_settings",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5GetSettingsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5GetSettingsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5GetSettingsResp(plain)
	return nil
}
