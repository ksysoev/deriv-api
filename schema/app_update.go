// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppUpdatePassthrough map[string]interface{}

type AppUpdateScopesElem string

var enumValues_AppUpdateScopesElem = []interface{}{
	"read",
	"trade",
	"trading_information",
	"payments",
	"admin",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdateScopesElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppUpdateScopesElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppUpdateScopesElem, v)
	}
	*j = AppUpdateScopesElem(v)
	return nil
}

// Update a new OAuth application
type AppUpdate struct {
	// [Optional] Markup to be added to contract prices (as a percentage of contract
	// payout). Max markup: 3%.
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// Application app_id.
	AppUpdate int `json:"app_update"`

	// [Optional] Application's App Store URL (if applicable).
	Appstore *string `json:"appstore,omitempty"`

	// [Optional] Application's GitHub page (for open-source projects).
	Github *string `json:"github,omitempty"`

	// [Optional] Application's Google Play URL (if applicable).
	Googleplay *string `json:"googleplay,omitempty"`

	// [Optional] Application's homepage URL.
	Homepage *string `json:"homepage,omitempty"`

	// Application name.
	Name string `json:"name"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppUpdatePassthrough `json:"passthrough,omitempty"`

	// [Optional] The URL to redirect to after a successful login. Required if
	// charging markup percentage.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Change scopes will revoke all user's grants and log them out.
	Scopes []AppUpdateScopesElem `json:"scopes"`

	// [Optional] Used when `verify_email` called. If available, a URL containing the
	// verification token will send to the client's email, otherwise only the token
	// will be sent.
	VerificationUri *string `json:"verification_uri,omitempty"`
}

const AppUpdateScopesElemAdmin AppUpdateScopesElem = "admin"
const AppUpdateScopesElemPayments AppUpdateScopesElem = "payments"
const AppUpdateScopesElemRead AppUpdateScopesElem = "read"
const AppUpdateScopesElemTrade AppUpdateScopesElem = "trade"
const AppUpdateScopesElemTradingInformation AppUpdateScopesElem = "trading_information"

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["app_update"]; !ok || v == nil {
		return fmt.Errorf("field app_update: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["scopes"]; !ok || v == nil {
		return fmt.Errorf("field scopes: required")
	}
	type Plain AppUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = AppUpdate(plain)
	return nil
}
