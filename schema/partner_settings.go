// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get Partner Settings (Partner Type, Company Details etc)
type PartnerSettings struct {
	// [Optional] The login id of the partner account. Mandatory when multiple tokens
	// were provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	PartnerSettings PartnerSettingsPartnerSettings `json:"partner_settings"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PartnerSettingsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type PartnerSettingsPartnerSettings int

var enumValues_PartnerSettingsPartnerSettings = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsPartnerSettings) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsPartnerSettings {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsPartnerSettings, v)
	}
	*j = PartnerSettingsPartnerSettings(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PartnerSettingsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettings) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["partner_settings"]; raw != nil && !ok {
		return fmt.Errorf("field partner_settings in PartnerSettings: required")
	}
	type Plain PartnerSettings
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerSettings(plain)
	return nil
}
