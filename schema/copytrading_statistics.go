// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve performance, trading, risk and copiers statistics of trader.
type CopytradingStatistics struct {
	// Must be `1`
	CopytradingStatistics CopytradingStatisticsCopytradingStatistics `json:"copytrading_statistics"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopytradingStatisticsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The ID of the target trader.
	TraderId string `json:"trader_id"`
}

type CopytradingStatisticsCopytradingStatistics int

var enumValues_CopytradingStatisticsCopytradingStatistics = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsCopytradingStatistics) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingStatisticsCopytradingStatistics {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingStatisticsCopytradingStatistics, v)
	}
	*j = CopytradingStatisticsCopytradingStatistics(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopytradingStatisticsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatistics) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["copytrading_statistics"]; raw != nil && !ok {
		return fmt.Errorf("field copytrading_statistics in CopytradingStatistics: required")
	}
	if _, ok := raw["trader_id"]; raw != nil && !ok {
		return fmt.Errorf("field trader_id in CopytradingStatistics: required")
	}
	type Plain CopytradingStatistics
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatistics(plain)
	return nil
}
