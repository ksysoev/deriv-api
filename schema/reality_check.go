// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type RealityCheckPassthrough map[string]interface{}

type RealityCheckRealityCheck int

var enumValues_RealityCheckRealityCheck = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheckRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_RealityCheckRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_RealityCheckRealityCheck, v)
	}
	*j = RealityCheckRealityCheck(v)
	return nil
}

// Retrieve summary of client's trades and account for the Reality Check facility.
// A 'reality check' means a display of time elapsed since the session began, and
// associated client profit/loss. The Reality Check facility is a regulatory
// requirement for certain landing companies.
type RealityCheck struct {
	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough RealityCheckPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	RealityCheck RealityCheckRealityCheck `json:"reality_check"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RealityCheck) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["reality_check"]; !ok || v == nil {
		return fmt.Errorf("field reality_check in RealityCheck: required")
	}
	type Plain RealityCheck
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = RealityCheck(plain)
	return nil
}
