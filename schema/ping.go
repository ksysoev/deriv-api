// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PingPassthrough map[string]interface{}

type PingPing int

var enumValues_PingPing = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PingPing) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PingPing {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PingPing, v)
	}
	*j = PingPing(v)
	return nil
}

// To send the ping request to the server. Mostly used to test the connection or to
// keep it alive.
type Ping struct {
	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PingPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	Ping PingPing `json:"ping"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Ping) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["ping"]; !ok || v == nil {
		return fmt.Errorf("field ping: required")
	}
	type Plain Ping
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Ping(plain)
	return nil
}
