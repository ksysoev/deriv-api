// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with User Settings
type GetSettingsResp struct {
	// Echo of the request made.
	EchoReq GetSettingsRespEchoReq `json:"echo_req"`

	// User information and settings.
	GetSettings *GetSettingsRespGetSettings `json:"get_settings,omitempty"`

	// Action name of the request made.
	MsgType GetSettingsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type GetSettingsRespEchoReq map[string]interface{}

// User information and settings.
type GetSettingsRespGetSettings struct {
	// Purpose and reason for requesting the account opening. Only applicable for real
	// money account.
	AccountOpeningReason *string `json:"account_opening_reason,omitempty"`

	// City (note: Only available for users who have at least one real account)
	AddressCity *string `json:"address_city,omitempty"`

	// Address line 1 (note: Only available for users who have at least one real
	// account)
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// Address line 2 (note: Only available for users who have at least one real
	// account)
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// Post Code (note: Only available for users who have at least one real account)
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// State (note: Only available for users who have at least one real account)
	AddressState *string `json:"address_state,omitempty"`

	// Boolean value 1 or 0, indicating permission to allow others to follow your
	// trades. Note: not applicable for Virtual account. Only allow for real money
	// account.
	AllowCopiers *GetSettingsRespGetSettingsAllowCopiers `json:"allow_copiers,omitempty"`

	// Country of legal citizenship, 2-letter country code.
	Citizen *string `json:"citizen,omitempty"`

	// Latest terms and conditions version accepted by client
	ClientTncStatus *string `json:"client_tnc_status,omitempty"`

	// Cooldown expiration epoch date when a client fails appropriateness tests
	CoolingOffExpirationDate *int `json:"cooling_off_expiration_date,omitempty"`

	// User Country (same as residence field) - deprecated
	Country *string `json:"country,omitempty"`

	// 2-letter country code ISO standard
	CountryCode *string `json:"country_code,omitempty"`

	// Epoch of user's birthday (note: Only available for users who have at least one
	// real account)
	DateOfBirth *int `json:"date_of_birth,omitempty"`

	// Boolean value 1 or 0, indicating if user email belong to dxtrade exception
	// list.
	DxtradeUserException *GetSettingsRespGetSettingsDxtradeUserException `json:"dxtrade_user_exception,omitempty"`

	// User Email
	Email *string `json:"email,omitempty"`

	// Boolean value 1 or 0, indicating permission to use email address for any
	// contact which may include marketing
	EmailConsent *GetSettingsRespGetSettingsEmailConsent `json:"email_consent,omitempty"`

	// Employment Status.
	EmploymentStatus *GetSettingsRespGetSettingsEmploymentStatus `json:"employment_status,omitempty"`

	// Indicates client's self-declaration for FATCA.
	FatcaDeclaration *int `json:"fatca_declaration,omitempty"`

	// Contains features that are enabled or disabled for this user
	FeatureFlag *GetSettingsRespGetSettingsFeatureFlag `json:"feature_flag,omitempty"`

	// First name (note: Only available for users who have at least one real account)
	FirstName *string `json:"first_name,omitempty"`

	// Returns 1 if the client has a secret answer, 0 otherwise.
	HasSecretAnswer *GetSettingsRespGetSettingsHasSecretAnswer `json:"has_secret_answer,omitempty"`

	// A list of profile fields which are immutable (read-only unless they are not set
	// yet) due to landing company regulations and the current status of the account.
	ImmutableFields []string `json:"immutable_fields,omitempty"`

	// Boolean value 1 or 0, indicating whether is payment agent (note: not applicable
	// for virtual money accounts)
	IsAuthenticatedPaymentAgent *GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent `json:"is_authenticated_payment_agent,omitempty"`

	// Last name (note: Only available for users who have at least one real account)
	LastName *string `json:"last_name,omitempty"`

	// Indicates client's self-declaration of not being a PEP/RCA (Politically Exposed
	// Person/Relatives and Close Associates). Note: returned for real accounts only.
	NonPepDeclaration *GetSettingsRespGetSettingsNonPepDeclaration `json:"non_pep_declaration,omitempty"`

	// Telephone (note: Only available for users who have at least one real account)
	Phone *string `json:"phone,omitempty"`

	// The status of the Phone Number Verification.
	PhoneNumberVerification *GetSettingsRespGetSettingsPhoneNumberVerification `json:"phone_number_verification,omitempty"`

	// Place of birth, 2-letter country code.
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`

	// User's preferred language, ISO standard code of language
	PreferredLanguage *string `json:"preferred_language,omitempty"`

	// Boolean value 1 or 0, indicating if client has requested professional status.
	RequestProfessionalStatus *GetSettingsRespGetSettingsRequestProfessionalStatus `json:"request_professional_status,omitempty"`

	// User Country
	Residence *string `json:"residence,omitempty"`

	// Salutation (note: Only available for users who have at least one real account)
	Salutation *string `json:"salutation,omitempty"`

	// Tax identification number. Only applicable for real money account.
	TaxIdentificationNumber *string `json:"tax_identification_number,omitempty"`

	// Residence for tax purpose. Comma separated iso country code if multiple
	// jurisdictions. Only applicable for real money account.
	TaxResidence *string `json:"tax_residence,omitempty"`

	// Boolean value 1 or 0, indicating if client has enabled the Trading Hub
	// dashboard
	TradingHub *int `json:"trading_hub,omitempty"`

	// Hash generated using user details to verify whether the user is legitimate for
	// our customer support system.
	UserHash *string `json:"user_hash,omitempty"`
}

type GetSettingsRespGetSettingsAllowCopiers int

var enumValues_GetSettingsRespGetSettingsAllowCopiers = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsAllowCopiers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsAllowCopiers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsAllowCopiers, v)
	}
	*j = GetSettingsRespGetSettingsAllowCopiers(v)
	return nil
}

type GetSettingsRespGetSettingsDxtradeUserException int

var enumValues_GetSettingsRespGetSettingsDxtradeUserException = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsDxtradeUserException) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsDxtradeUserException {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsDxtradeUserException, v)
	}
	*j = GetSettingsRespGetSettingsDxtradeUserException(v)
	return nil
}

type GetSettingsRespGetSettingsEmailConsent int

var enumValues_GetSettingsRespGetSettingsEmailConsent = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsEmailConsent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsEmailConsent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsEmailConsent, v)
	}
	*j = GetSettingsRespGetSettingsEmailConsent(v)
	return nil
}

type GetSettingsRespGetSettingsEmploymentStatus string

const GetSettingsRespGetSettingsEmploymentStatusEmployed GetSettingsRespGetSettingsEmploymentStatus = "Employed"
const GetSettingsRespGetSettingsEmploymentStatusPensioner GetSettingsRespGetSettingsEmploymentStatus = "Pensioner"
const GetSettingsRespGetSettingsEmploymentStatusSelfEmployed GetSettingsRespGetSettingsEmploymentStatus = "Self-Employed"
const GetSettingsRespGetSettingsEmploymentStatusStudent GetSettingsRespGetSettingsEmploymentStatus = "Student"
const GetSettingsRespGetSettingsEmploymentStatusUnemployed GetSettingsRespGetSettingsEmploymentStatus = "Unemployed"

var enumValues_GetSettingsRespGetSettingsEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsEmploymentStatus, v)
	}
	*j = GetSettingsRespGetSettingsEmploymentStatus(v)
	return nil
}

// Contains features that are enabled or disabled for this user
type GetSettingsRespGetSettingsFeatureFlag struct {
	// Boolean value 1 or 0 indicating whether his feature this enabled or not
	Wallet *GetSettingsRespGetSettingsFeatureFlagWallet `json:"wallet,omitempty"`
}

type GetSettingsRespGetSettingsFeatureFlagWallet int

var enumValues_GetSettingsRespGetSettingsFeatureFlagWallet = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsFeatureFlagWallet) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsFeatureFlagWallet {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsFeatureFlagWallet, v)
	}
	*j = GetSettingsRespGetSettingsFeatureFlagWallet(v)
	return nil
}

type GetSettingsRespGetSettingsHasSecretAnswer int

var enumValues_GetSettingsRespGetSettingsHasSecretAnswer = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsHasSecretAnswer) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsHasSecretAnswer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsHasSecretAnswer, v)
	}
	*j = GetSettingsRespGetSettingsHasSecretAnswer(v)
	return nil
}

type GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent int

var enumValues_GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent, v)
	}
	*j = GetSettingsRespGetSettingsIsAuthenticatedPaymentAgent(v)
	return nil
}

type GetSettingsRespGetSettingsNonPepDeclaration int

var enumValues_GetSettingsRespGetSettingsNonPepDeclaration = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsNonPepDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsNonPepDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsNonPepDeclaration, v)
	}
	*j = GetSettingsRespGetSettingsNonPepDeclaration(v)
	return nil
}

// The status of the Phone Number Verification.
type GetSettingsRespGetSettingsPhoneNumberVerification struct {
	// (Optional) Indicates the timestamp for the next verification attempt
	NextAttempt *int `json:"next_attempt,omitempty"`

	// Indicates the verification status of the client's phone number.
	Verified GetSettingsRespGetSettingsPhoneNumberVerificationVerified `json:"verified"`
}

type GetSettingsRespGetSettingsPhoneNumberVerificationVerified int

var enumValues_GetSettingsRespGetSettingsPhoneNumberVerificationVerified = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsPhoneNumberVerificationVerified) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsPhoneNumberVerificationVerified {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsPhoneNumberVerificationVerified, v)
	}
	*j = GetSettingsRespGetSettingsPhoneNumberVerificationVerified(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsPhoneNumberVerification) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["verified"]; raw != nil && !ok {
		return fmt.Errorf("field verified in GetSettingsRespGetSettingsPhoneNumberVerification: required")
	}
	type Plain GetSettingsRespGetSettingsPhoneNumberVerification
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSettingsRespGetSettingsPhoneNumberVerification(plain)
	return nil
}

type GetSettingsRespGetSettingsRequestProfessionalStatus int

var enumValues_GetSettingsRespGetSettingsRequestProfessionalStatus = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespGetSettingsRequestProfessionalStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespGetSettingsRequestProfessionalStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespGetSettingsRequestProfessionalStatus, v)
	}
	*j = GetSettingsRespGetSettingsRequestProfessionalStatus(v)
	return nil
}

type GetSettingsRespMsgType string

const GetSettingsRespMsgTypeGetSettings GetSettingsRespMsgType = "get_settings"

var enumValues_GetSettingsRespMsgType = []interface{}{
	"get_settings",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetSettingsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetSettingsRespMsgType, v)
	}
	*j = GetSettingsRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetSettingsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in GetSettingsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in GetSettingsResp: required")
	}
	type Plain GetSettingsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetSettingsResp(plain)
	return nil
}
