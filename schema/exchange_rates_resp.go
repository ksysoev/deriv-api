// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type ExchangeRatesRespEchoReq map[string]interface{}

// Exchange rate values from base to all other currencies
type ExchangeRatesRespExchangeRates struct {
	// Base currency
	BaseCurrency *string `json:"base_currency,omitempty"`

	// Date retrieval epoch time represented as an integer number
	Date *int `json:"date,omitempty"`

	// Rates of exchanging a unit of base currency into the target currencies
	Rates ExchangeRatesRespExchangeRatesRates `json:"rates,omitempty"`
}

// Rates of exchanging a unit of base currency into the target currencies
type ExchangeRatesRespExchangeRatesRates map[string]interface{}

type ExchangeRatesRespMsgType string

var enumValues_ExchangeRatesRespMsgType = []interface{}{
	"exchange_rates",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeRatesRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeRatesRespMsgType, v)
	}
	*j = ExchangeRatesRespMsgType(v)
	return nil
}

const ExchangeRatesRespMsgTypeExchangeRates ExchangeRatesRespMsgType = "exchange_rates"

// For subscription requests only.
type ExchangeRatesRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	type Plain ExchangeRatesRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeRatesRespSubscription(plain)
	return nil
}

// The exchange rate values from the specified base currency to all currencies
// supported by the system.
type ExchangeRatesResp struct {
	// Echo of the request made.
	EchoReq ExchangeRatesRespEchoReq `json:"echo_req"`

	// Exchange rate values from base to all other currencies
	ExchangeRates *ExchangeRatesRespExchangeRates `json:"exchange_rates,omitempty"`

	// Action name of the request made.
	MsgType ExchangeRatesRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *ExchangeRatesRespSubscription `json:"subscription,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeRatesResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ExchangeRatesResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeRatesResp(plain)
	return nil
}
