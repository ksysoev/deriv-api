// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Immediately cancel the real-time streams of messages of given type.
type ForgetAll struct {
	// Cancel all streams by type. The value can be either a single type e.g.
	// `"ticks"`, or an array of multiple types e.g. `["candles", "ticks"]`.
	ForgetAll interface{} `json:"forget_all"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough ForgetAllPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type ForgetAllPassthrough map[string]interface{}

type StreamTypes string

const StreamTypesBalance StreamTypes = "balance"
const StreamTypesCandles StreamTypes = "candles"
const StreamTypesCashierPayments StreamTypes = "cashier_payments"
const StreamTypesCryptoEstimations StreamTypes = "crypto_estimations"
const StreamTypesP2PAdvert StreamTypes = "p2p_advert"
const StreamTypesP2PAdvertiser StreamTypes = "p2p_advertiser"
const StreamTypesP2POrder StreamTypes = "p2p_order"
const StreamTypesP2PSettings StreamTypes = "p2p_settings"
const StreamTypesProposal StreamTypes = "proposal"
const StreamTypesProposalOpenContract StreamTypes = "proposal_open_contract"
const StreamTypesTicks StreamTypes = "ticks"
const StreamTypesTradingPlatformAssetListing StreamTypes = "trading_platform_asset_listing"
const StreamTypesTransaction StreamTypes = "transaction"
const StreamTypesWebsiteStatus StreamTypes = "website_status"

// UnmarshalJSON implements json.Unmarshaler.
func (j *StreamTypes) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_StreamTypes {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_StreamTypes, v)
	}
	*j = StreamTypes(v)
	return nil
}

var enumValues_StreamTypes = []interface{}{
	"balance",
	"candles",
	"cashier_payments",
	"p2p_advert",
	"p2p_advertiser",
	"p2p_order",
	"proposal",
	"proposal_open_contract",
	"ticks",
	"transaction",
	"trading_platform_asset_listing",
	"website_status",
	"p2p_settings",
	"crypto_estimations",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAll) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["forget_all"]; !ok || v == nil {
		return fmt.Errorf("field forget_all in ForgetAll: required")
	}
	type Plain ForgetAll
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetAll(plain)
	return nil
}
