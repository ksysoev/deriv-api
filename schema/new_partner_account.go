// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This call opens a new Real-Partner Account
type NewPartnerAccount struct {
	// [Optional] The anticipated account turnover.
	AccountTurnover *NewPartnerAccountAccountTurnover `json:"account_turnover,omitempty"`

	// [Optional] Within 100 characters.
	AddressCity *string `json:"address_city,omitempty"`

	// Within 70 characters, with no leading whitespaces and may contain
	// letters/numbers and/or any of following characters '.,:;()@#/-
	AddressLine1 *string `json:"address_line_1,omitempty"`

	// [Optional] Within 70 characters.
	AddressLine2 *string `json:"address_line_2,omitempty"`

	// [Optional] Within 20 characters and may not contain '+'.
	AddressPostcode *string `json:"address_postcode,omitempty"`

	// [Optional] Possible value receive from `states_list` call.
	AddressState *string `json:"address_state,omitempty"`

	// [Optional] The phone's calling country code. Don't include the `+` sign. Up to
	// 4 digits.
	CallingCountryCode *string `json:"calling_country_code,omitempty"`

	// [Optional] Country of legal citizenship, 2-letter country code.
	Citizen *string `json:"citizen,omitempty"`

	// [Optional] Indicates whether this is for a client requesting an account with
	// professional status.
	ClientType NewPartnerAccountClientType `json:"client_type,omitempty"`

	// [Optional] Company name. Only applicable for partners of type company.
	CompanyName *string `json:"company_name,omitempty"`

	// [Optional] Company registration number. Only applicable for partners of type
	// company.
	CompanyRegistrationNo *string `json:"company_registration_no,omitempty"`

	// [Optional] To set currency of the account. List of supported currencies can be
	// acquired with `payout_currencies` call.
	Currency *string `json:"currency,omitempty"`

	// Date of birth format: `yyyy-mm-dd`.
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// [Optional] Indicates client's self-declaration of FATCA.
	FatcaDeclaration *NewPartnerAccountFatcaDeclaration `json:"fatca_declaration,omitempty"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	FirstName *string `json:"first_name,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *NewPartnerAccountLandingCompanyShort `json:"landing_company_short,omitempty"`

	// Within 1-50 characters, use only letters, spaces, hyphens, full-stops or
	// apostrophes.
	LastName *string `json:"last_name,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	NewPartnerAccount NewPartnerAccountNewPartnerAccount `json:"new_partner_account"`

	// [Optional] Indicates client's self-declaration of not being a PEP/RCA
	// (Politically Exposed Person/Relatives and Close Associates).
	NonPepDeclaration *int `json:"non_pep_declaration,omitempty"`

	// Defines whether this partner is an individual or a company. Only applicable for
	// partners
	PartnerType NewPartnerAccountPartnerType `json:"partner_type"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough NewPartnerAccountPassthrough `json:"passthrough,omitempty"`

	// [Optional] The phone's national format in 8-35 digits, don't include the `+`
	// sign nor the calling country code.
	Phone *string `json:"phone,omitempty"`

	// [Optional] Name  of the provider platform.
	Provider *NewPartnerAccountProvider `json:"provider,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// 2-letter country code, possible value receive from `residence_list` call.
	Residence *string `json:"residence,omitempty"`

	// [Optional] Accept any value in enum list.
	Salutation *NewPartnerAccountSalutation `json:"salutation,omitempty"`

	// [Optional] Answer to secret question, within 4-50 characters. Required for new
	// account and existing client details will be used if client open another
	// account.
	SecretAnswer *string `json:"secret_answer,omitempty"`

	// [Optional] Accept any value in enum list. Required for new account and existing
	// client details will be used if client open another account.
	SecretQuestion *NewPartnerAccountSecretQuestion `json:"secret_question,omitempty"`

	// Partner's Website URI/Promotional Platform
	Website string `json:"website"`
}

type NewPartnerAccountAccountTurnover string

const NewPartnerAccountAccountTurnoverA100001500000 NewPartnerAccountAccountTurnover = "$100,001 - $500,000"
const NewPartnerAccountAccountTurnoverA2500050000 NewPartnerAccountAccountTurnover = "$25,000 - $50,000"
const NewPartnerAccountAccountTurnoverA50001100000 NewPartnerAccountAccountTurnover = "$50,001 - $100,000"
const NewPartnerAccountAccountTurnoverLessThan25000 NewPartnerAccountAccountTurnover = "Less than $25,000"
const NewPartnerAccountAccountTurnoverOver500000 NewPartnerAccountAccountTurnover = "Over $500,000"

var enumValues_NewPartnerAccountAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountAccountTurnover, v)
	}
	*j = NewPartnerAccountAccountTurnover(v)
	return nil
}

type NewPartnerAccountClientType string

const NewPartnerAccountClientTypeProfessional NewPartnerAccountClientType = "professional"
const NewPartnerAccountClientTypeRetail NewPartnerAccountClientType = "retail"

var enumValues_NewPartnerAccountClientType = []interface{}{
	"professional",
	"retail",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountClientType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountClientType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountClientType, v)
	}
	*j = NewPartnerAccountClientType(v)
	return nil
}

type NewPartnerAccountFatcaDeclaration int

var enumValues_NewPartnerAccountFatcaDeclaration = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountFatcaDeclaration) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountFatcaDeclaration {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountFatcaDeclaration, v)
	}
	*j = NewPartnerAccountFatcaDeclaration(v)
	return nil
}

type NewPartnerAccountLandingCompanyShort string

const NewPartnerAccountLandingCompanyShortMaltainvest NewPartnerAccountLandingCompanyShort = "maltainvest"
const NewPartnerAccountLandingCompanyShortSvg NewPartnerAccountLandingCompanyShort = "svg"

var enumValues_NewPartnerAccountLandingCompanyShort = []interface{}{
	"maltainvest",
	"svg",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountLandingCompanyShort, v)
	}
	*j = NewPartnerAccountLandingCompanyShort(v)
	return nil
}

type NewPartnerAccountNewPartnerAccount int

var enumValues_NewPartnerAccountNewPartnerAccount = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountNewPartnerAccount) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountNewPartnerAccount {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountNewPartnerAccount, v)
	}
	*j = NewPartnerAccountNewPartnerAccount(v)
	return nil
}

type NewPartnerAccountPartnerType string

const NewPartnerAccountPartnerTypeCompany NewPartnerAccountPartnerType = "company"
const NewPartnerAccountPartnerTypeIndividual NewPartnerAccountPartnerType = "individual"

var enumValues_NewPartnerAccountPartnerType = []interface{}{
	"individual",
	"company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountPartnerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountPartnerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountPartnerType, v)
	}
	*j = NewPartnerAccountPartnerType(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type NewPartnerAccountPassthrough map[string]interface{}

type NewPartnerAccountProvider string

const NewPartnerAccountProviderDynamicworks NewPartnerAccountProvider = "dynamicworks"
const NewPartnerAccountProviderMyaffiliate NewPartnerAccountProvider = "myaffiliate"

var enumValues_NewPartnerAccountProvider = []interface{}{
	"myaffiliate",
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountProvider, v)
	}
	*j = NewPartnerAccountProvider(v)
	return nil
}

type NewPartnerAccountSalutation string

const NewPartnerAccountSalutationMiss NewPartnerAccountSalutation = "Miss"
const NewPartnerAccountSalutationMr NewPartnerAccountSalutation = "Mr"
const NewPartnerAccountSalutationMrs NewPartnerAccountSalutation = "Mrs"
const NewPartnerAccountSalutationMs NewPartnerAccountSalutation = "Ms"

var enumValues_NewPartnerAccountSalutation = []interface{}{
	"Mr",
	"Ms",
	"Miss",
	"Mrs",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountSalutation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountSalutation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountSalutation, v)
	}
	*j = NewPartnerAccountSalutation(v)
	return nil
}

type NewPartnerAccountSecretQuestion string

const NewPartnerAccountSecretQuestionBrandOfFirstCar NewPartnerAccountSecretQuestion = "Brand of first car"
const NewPartnerAccountSecretQuestionFavouriteArtist NewPartnerAccountSecretQuestion = "Favourite artist"
const NewPartnerAccountSecretQuestionFavouriteDish NewPartnerAccountSecretQuestion = "Favourite dish"
const NewPartnerAccountSecretQuestionMemorableDate NewPartnerAccountSecretQuestion = "Memorable date"
const NewPartnerAccountSecretQuestionMemorableTownCity NewPartnerAccountSecretQuestion = "Memorable town/city"
const NewPartnerAccountSecretQuestionMotherSMaidenName NewPartnerAccountSecretQuestion = "Mother's maiden name"
const NewPartnerAccountSecretQuestionNameOfFirstLove NewPartnerAccountSecretQuestion = "Name of first love"
const NewPartnerAccountSecretQuestionNameOfYourPet NewPartnerAccountSecretQuestion = "Name of your pet"

var enumValues_NewPartnerAccountSecretQuestion = []interface{}{
	"Mother's maiden name",
	"Name of your pet",
	"Name of first love",
	"Memorable town/city",
	"Memorable date",
	"Favourite dish",
	"Brand of first car",
	"Favourite artist",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccountSecretQuestion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_NewPartnerAccountSecretQuestion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_NewPartnerAccountSecretQuestion, v)
	}
	*j = NewPartnerAccountSecretQuestion(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *NewPartnerAccount) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["new_partner_account"]; raw != nil && !ok {
		return fmt.Errorf("field new_partner_account in NewPartnerAccount: required")
	}
	if _, ok := raw["partner_type"]; raw != nil && !ok {
		return fmt.Errorf("field partner_type in NewPartnerAccount: required")
	}
	if _, ok := raw["website"]; raw != nil && !ok {
		return fmt.Errorf("field website in NewPartnerAccount: required")
	}
	type Plain NewPartnerAccount
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["client_type"]; !ok || v == nil {
		plain.ClientType = "retail"
	}
	if plain.SecretAnswer != nil && len(*plain.SecretAnswer) < 4 {
		return fmt.Errorf("field %s length: must be >= %d", "secret_answer", 4)
	}
	if plain.SecretAnswer != nil && len(*plain.SecretAnswer) > 50 {
		return fmt.Errorf("field %s length: must be <= %d", "secret_answer", 50)
	}
	*j = NewPartnerAccount(plain)
	return nil
}
