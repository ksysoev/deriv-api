// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type PaymentagentTransferDryRun int

var enumValues_PaymentagentTransferDryRun = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferDryRun) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferDryRun {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferDryRun, v)
	}
	*j = PaymentagentTransferDryRun(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PaymentagentTransferPassthrough map[string]interface{}

type PaymentagentTransferPaymentagentTransfer int

var enumValues_PaymentagentTransferPaymentagentTransfer = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransferPaymentagentTransfer) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PaymentagentTransferPaymentagentTransfer {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PaymentagentTransferPaymentagentTransfer, v)
	}
	*j = PaymentagentTransferPaymentagentTransfer(v)
	return nil
}

// Payment Agent Transfer - this call is available only to accounts that are
// approved Payment Agents.
type PaymentagentTransfer struct {
	// The amount to transfer.
	Amount float64 `json:"amount"`

	// Currency code.
	Currency string `json:"currency"`

	// [Optional] Remarks about the transfer.
	Description *string `json:"description,omitempty"`

	// [Optional] If set to `1`, just do validation.
	DryRun *PaymentagentTransferDryRun `json:"dry_run,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PaymentagentTransferPassthrough `json:"passthrough,omitempty"`

	// Must be `1`
	PaymentagentTransfer PaymentagentTransferPaymentagentTransfer `json:"paymentagent_transfer"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// The loginid of the recipient account.
	TransferTo string `json:"transfer_to"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PaymentagentTransfer) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount in PaymentagentTransfer: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency in PaymentagentTransfer: required")
	}
	if v, ok := raw["paymentagent_transfer"]; !ok || v == nil {
		return fmt.Errorf("field paymentagent_transfer in PaymentagentTransfer: required")
	}
	if v, ok := raw["transfer_to"]; !ok || v == nil {
		return fmt.Errorf("field transfer_to in PaymentagentTransfer: required")
	}
	type Plain PaymentagentTransfer
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PaymentagentTransfer(plain)
	return nil
}
