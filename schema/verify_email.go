// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Verify an email address for various purposes. The system will send an email to
// the address containing a security code for verification.
type VerifyEmail struct {
	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough VerifyEmailPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Purpose of email verification, request_email and reset_password are the only
	// two types restricted from all unoffical apps
	Type VerifyEmailType `json:"type"`

	// [Optional] Extra parameters that can be attached to the verify email link URL.
	UrlParameters *VerifyEmailUrlParameters `json:"url_parameters,omitempty"`

	// Email address to be verified.
	VerifyEmail string `json:"verify_email"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type VerifyEmailPassthrough map[string]interface{}

type VerifyEmailType string

const VerifyEmailTypeAccountOpening VerifyEmailType = "account_opening"
const VerifyEmailTypePartnerAccountOpening VerifyEmailType = "partner_account_opening"
const VerifyEmailTypePaymentWithdraw VerifyEmailType = "payment_withdraw"
const VerifyEmailTypePaymentagentWithdraw VerifyEmailType = "paymentagent_withdraw"
const VerifyEmailTypeRequestEmail VerifyEmailType = "request_email"
const VerifyEmailTypeResetPassword VerifyEmailType = "reset_password"
const VerifyEmailTypeTradingPlatformDxtradePasswordReset VerifyEmailType = "trading_platform_dxtrade_password_reset"
const VerifyEmailTypeTradingPlatformInvestorPasswordReset VerifyEmailType = "trading_platform_investor_password_reset"
const VerifyEmailTypeTradingPlatformMt5PasswordReset VerifyEmailType = "trading_platform_mt5_password_reset"

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailType, v)
	}
	*j = VerifyEmailType(v)
	return nil
}

type VerifyEmailUrlParametersSignupDevice string

var enumValues_VerifyEmailUrlParametersSignupDevice = []interface{}{
	"desktop",
	"mobile",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmailUrlParametersSignupDevice) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VerifyEmailUrlParametersSignupDevice {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VerifyEmailUrlParametersSignupDevice, v)
	}
	*j = VerifyEmailUrlParametersSignupDevice(v)
	return nil
}

// [Optional] Extra parameters that can be attached to the verify email link URL.
type VerifyEmailUrlParameters struct {
	// [Optional] Affiliate token, within 32 characters.
	AffiliateToken *string `json:"affiliate_token,omitempty"`

	// [Optional] Date of first contact, format: yyyy-mm-dd in GMT timezone.
	DateFirstContact *string `json:"date_first_contact,omitempty"`

	// [Optional] Google Click Identifier to track source.
	GclidUrl *string `json:"gclid_url,omitempty"`

	// [Optional] The amount to withdraw to the payment agent. Only allowed for
	// payment agent withdraw.
	PaAmount *float64 `json:"pa_amount,omitempty"`

	// [Optional] The currency code. Only allowed for payment agent withdraw.
	PaCurrency *string `json:"pa_currency,omitempty"`

	// [Optional] The payment agent loginid received from the `paymentagent_list`
	// call. Only allowed for payment agent withdraw.
	PaLoginid *string `json:"pa_loginid,omitempty"`

	// [Optional] Remarks about the withdraw. Only letters, numbers, space, period,
	// comma, - ' are allowed. Only allowed for payment agent withdraw.
	PaRemarks *string `json:"pa_remarks,omitempty"`

	// [Optional] The page ID to redirect to
	RedirectTo *int `json:"redirect_to,omitempty"`

	// [Optional] Show whether user has used mobile or desktop.
	SignupDevice *VerifyEmailUrlParametersSignupDevice `json:"signup_device,omitempty"`

	// [Optional] Identifier of particular ad. Value must match Regex pattern to be
	// recorded
	UtmAdId interface{} `json:"utm_ad_id,omitempty"`

	// [Optional] Identifier of ad group in the campaign. Value must match Regex
	// pattern to be recorded
	UtmAdgroupId interface{} `json:"utm_adgroup_id,omitempty"`

	// [Optional] Unique identifier of click on AdRoll ads platform. Value must match
	// Regex pattern to be recorded
	UtmAdrollclkId interface{} `json:"utm_adrollclk_id,omitempty"`

	// [Optional] Identifies a specific product promotion or strategic campaign such
	// as a spring sale or other promotions. Value must match Regex pattern to be
	// recorded
	UtmCampaign interface{} `json:"utm_campaign,omitempty"`

	// [Optional] Identifier of paid ad campaign. Value must match Regex pattern to be
	// recorded
	UtmCampaignId interface{} `json:"utm_campaign_id,omitempty"`

	// [Optional] Used to differentiate similar content, or links within the same ad.
	// Value must match Regex pattern to be recorded
	UtmContent interface{} `json:"utm_content,omitempty"`

	// [Optional] Unique identifier of click on Facebook ads platform. Value must
	// match Regex pattern to be recorded
	UtmFbclId interface{} `json:"utm_fbcl_id,omitempty"`

	// [Optional] Unique visitor identifier on Google Ads platform. Value must match
	// Regex pattern to be recorded
	UtmGlClientId interface{} `json:"utm_gl_client_id,omitempty"`

	// [Optional] Identifies the medium the link was used upon such as: email, CPC, or
	// other methods of sharing. Value must match Regex pattern to be recorded
	UtmMedium interface{} `json:"utm_medium,omitempty"`

	// [Optional] Unique click identifier on Microsoft Bing ads platform. Value must
	// match Regex pattern to be recorded
	UtmMsclkId interface{} `json:"utm_msclk_id,omitempty"`

	// [Optional] Identifies the source of traffic such as: search engine, newsletter,
	// or other referral. Value must match Regex pattern to be recorded
	UtmSource interface{} `json:"utm_source,omitempty"`

	// [Optional] Used to send information related to the campaign term like paid
	// search keywords. Value must match Regex pattern to be recorded
	UtmTerm interface{} `json:"utm_term,omitempty"`
}

const VerifyEmailUrlParametersSignupDeviceDesktop VerifyEmailUrlParametersSignupDevice = "desktop"
const VerifyEmailUrlParametersSignupDeviceMobile VerifyEmailUrlParametersSignupDevice = "mobile"

var enumValues_VerifyEmailType = []interface{}{
	"partner_account_opening",
	"account_opening",
	"reset_password",
	"paymentagent_withdraw",
	"payment_withdraw",
	"trading_platform_dxtrade_password_reset",
	"trading_platform_mt5_password_reset",
	"trading_platform_investor_password_reset",
	"request_email",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VerifyEmail) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in VerifyEmail: required")
	}
	if v, ok := raw["verify_email"]; !ok || v == nil {
		return fmt.Errorf("field verify_email in VerifyEmail: required")
	}
	type Plain VerifyEmail
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = VerifyEmail(plain)
	return nil
}
