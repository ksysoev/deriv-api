// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This call sets the financial assessment details based on the client's answers to
// analyze whether they possess the experience and knowledge to understand the
// risks involved with binary options trading.
type SetFinancialAssessment struct {
	// [Optional] The anticipated account turnover.
	AccountTurnover *SetFinancialAssessmentAccountTurnover `json:"account_turnover,omitempty"`

	// [Optional] Binary options trading experience.
	BinaryOptionsTradingExperience *SetFinancialAssessmentBinaryOptionsTradingExperience `json:"binary_options_trading_experience,omitempty"`

	// [Optional] Binary options trading frequency.
	BinaryOptionsTradingFrequency *SetFinancialAssessmentBinaryOptionsTradingFrequency `json:"binary_options_trading_frequency,omitempty"`

	// [Optional] CFDs trading experience.
	CfdTradingExperience *SetFinancialAssessmentCfdTradingExperience `json:"cfd_trading_experience,omitempty"`

	// [Optional] CFDs trading frequency.
	CfdTradingFrequency *SetFinancialAssessmentCfdTradingFrequency `json:"cfd_trading_frequency,omitempty"`

	// [Optional] Level of Education.
	EducationLevel *SetFinancialAssessmentEducationLevel `json:"education_level,omitempty"`

	// [Optional] Industry of Employment.
	EmploymentIndustry *SetFinancialAssessmentEmploymentIndustry `json:"employment_industry,omitempty"`

	// [Optional] Employment Status.
	EmploymentStatus *SetFinancialAssessmentEmploymentStatus `json:"employment_status,omitempty"`

	// [Optional] Estimated Net Worth.
	EstimatedWorth *SetFinancialAssessmentEstimatedWorth `json:"estimated_worth,omitempty"`

	// [Optional] The financial information of a client
	FinancialInformation *SetFinancialAssessmentFinancialInformation `json:"financial_information,omitempty"`

	// [Optional] Forex trading experience.
	ForexTradingExperience *SetFinancialAssessmentForexTradingExperience `json:"forex_trading_experience,omitempty"`

	// [Optional] Forex trading frequency.
	ForexTradingFrequency *SetFinancialAssessmentForexTradingFrequency `json:"forex_trading_frequency,omitempty"`

	// [Optional] Income Source.
	IncomeSource *SetFinancialAssessmentIncomeSource `json:"income_source,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Net Annual Income.
	NetIncome *SetFinancialAssessmentNetIncome `json:"net_income,omitempty"`

	// [Optional] Occupation.
	Occupation *SetFinancialAssessmentOccupation `json:"occupation,omitempty"`

	// [Optional] Trading experience in other financial instruments.
	OtherInstrumentsTradingExperience *SetFinancialAssessmentOtherInstrumentsTradingExperience `json:"other_instruments_trading_experience,omitempty"`

	// [Optional] Trading frequency in other financial instruments.
	OtherInstrumentsTradingFrequency *SetFinancialAssessmentOtherInstrumentsTradingFrequency `json:"other_instruments_trading_frequency,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SetFinancialAssessmentPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SetFinancialAssessment SetFinancialAssessmentSetFinancialAssessment `json:"set_financial_assessment"`

	// [Optional] Source of wealth.
	SourceOfWealth *SetFinancialAssessmentSourceOfWealth `json:"source_of_wealth,omitempty"`

	// [Optional] The trading experience of a client
	TradingExperience *SetFinancialAssessmentTradingExperience `json:"trading_experience,omitempty"`

	// [Optional] The trading experience of a `maltainvest` client
	TradingExperienceRegulated *SetFinancialAssessmentTradingExperienceRegulated `json:"trading_experience_regulated,omitempty"`
}

type SetFinancialAssessmentAccountTurnover string

const SetFinancialAssessmentAccountTurnoverA100001500000 SetFinancialAssessmentAccountTurnover = "$100,001 - $500,000"
const SetFinancialAssessmentAccountTurnoverA2500050000 SetFinancialAssessmentAccountTurnover = "$25,000 - $50,000"
const SetFinancialAssessmentAccountTurnoverA50001100000 SetFinancialAssessmentAccountTurnover = "$50,001 - $100,000"
const SetFinancialAssessmentAccountTurnoverLessThan25000 SetFinancialAssessmentAccountTurnover = "Less than $25,000"
const SetFinancialAssessmentAccountTurnoverOver500000 SetFinancialAssessmentAccountTurnover = "Over $500,000"

type SetFinancialAssessmentBinaryOptionsTradingExperience string

const SetFinancialAssessmentBinaryOptionsTradingExperienceA01Year SetFinancialAssessmentBinaryOptionsTradingExperience = "0-1 year"
const SetFinancialAssessmentBinaryOptionsTradingExperienceA12Years SetFinancialAssessmentBinaryOptionsTradingExperience = "1-2 years"
const SetFinancialAssessmentBinaryOptionsTradingExperienceOver3Years SetFinancialAssessmentBinaryOptionsTradingExperience = "Over 3 years"

type SetFinancialAssessmentBinaryOptionsTradingFrequency string

const SetFinancialAssessmentBinaryOptionsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentBinaryOptionsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentBinaryOptionsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentBinaryOptionsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentBinaryOptionsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentBinaryOptionsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentBinaryOptionsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentBinaryOptionsTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentCfdTradingExperience string

const SetFinancialAssessmentCfdTradingExperienceA01Year SetFinancialAssessmentCfdTradingExperience = "0-1 year"
const SetFinancialAssessmentCfdTradingExperienceA12Years SetFinancialAssessmentCfdTradingExperience = "1-2 years"
const SetFinancialAssessmentCfdTradingExperienceOver3Years SetFinancialAssessmentCfdTradingExperience = "Over 3 years"

type SetFinancialAssessmentCfdTradingFrequency string

const SetFinancialAssessmentCfdTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentCfdTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentCfdTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentCfdTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentCfdTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentCfdTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentCfdTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentCfdTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentEducationLevel string

const SetFinancialAssessmentEducationLevelPrimary SetFinancialAssessmentEducationLevel = "Primary"
const SetFinancialAssessmentEducationLevelSecondary SetFinancialAssessmentEducationLevel = "Secondary"
const SetFinancialAssessmentEducationLevelTertiary SetFinancialAssessmentEducationLevel = "Tertiary"

type SetFinancialAssessmentEmploymentIndustry string

const SetFinancialAssessmentEmploymentIndustryAgriculture SetFinancialAssessmentEmploymentIndustry = "Agriculture"
const SetFinancialAssessmentEmploymentIndustryConstruction SetFinancialAssessmentEmploymentIndustry = "Construction"
const SetFinancialAssessmentEmploymentIndustryEducation SetFinancialAssessmentEmploymentIndustry = "Education"
const SetFinancialAssessmentEmploymentIndustryFinance SetFinancialAssessmentEmploymentIndustry = "Finance"
const SetFinancialAssessmentEmploymentIndustryFoodServices SetFinancialAssessmentEmploymentIndustry = "Food Services"
const SetFinancialAssessmentEmploymentIndustryHealth SetFinancialAssessmentEmploymentIndustry = "Health"
const SetFinancialAssessmentEmploymentIndustryInformationCommunicationsTechnology SetFinancialAssessmentEmploymentIndustry = "Information & Communications Technology"
const SetFinancialAssessmentEmploymentIndustryLegal SetFinancialAssessmentEmploymentIndustry = "Legal"
const SetFinancialAssessmentEmploymentIndustryManufacturing SetFinancialAssessmentEmploymentIndustry = "Manufacturing"
const SetFinancialAssessmentEmploymentIndustryRealEstate SetFinancialAssessmentEmploymentIndustry = "Real Estate"
const SetFinancialAssessmentEmploymentIndustryScienceEngineering SetFinancialAssessmentEmploymentIndustry = "Science & Engineering"
const SetFinancialAssessmentEmploymentIndustrySocialCultural SetFinancialAssessmentEmploymentIndustry = "Social & Cultural"
const SetFinancialAssessmentEmploymentIndustryTourism SetFinancialAssessmentEmploymentIndustry = "Tourism"
const SetFinancialAssessmentEmploymentIndustryUnemployed SetFinancialAssessmentEmploymentIndustry = "Unemployed"

type SetFinancialAssessmentEmploymentStatus string

const SetFinancialAssessmentEmploymentStatusEmployed SetFinancialAssessmentEmploymentStatus = "Employed"
const SetFinancialAssessmentEmploymentStatusPensioner SetFinancialAssessmentEmploymentStatus = "Pensioner"
const SetFinancialAssessmentEmploymentStatusSelfEmployed SetFinancialAssessmentEmploymentStatus = "Self-Employed"
const SetFinancialAssessmentEmploymentStatusStudent SetFinancialAssessmentEmploymentStatus = "Student"
const SetFinancialAssessmentEmploymentStatusUnemployed SetFinancialAssessmentEmploymentStatus = "Unemployed"

type SetFinancialAssessmentEstimatedWorth string

const SetFinancialAssessmentEstimatedWorthA100000250000 SetFinancialAssessmentEstimatedWorth = "$100,000 - $250,000"
const SetFinancialAssessmentEstimatedWorthA250001500000 SetFinancialAssessmentEstimatedWorth = "$250,001 - $500,000"
const SetFinancialAssessmentEstimatedWorthA5000011000000 SetFinancialAssessmentEstimatedWorth = "$500,001 - $1,000,000"
const SetFinancialAssessmentEstimatedWorthLessThan100000 SetFinancialAssessmentEstimatedWorth = "Less than $100,000"
const SetFinancialAssessmentEstimatedWorthOver1000000 SetFinancialAssessmentEstimatedWorth = "Over $1,000,000"

// [Optional] The financial information of a client
type SetFinancialAssessmentFinancialInformation struct {
	// [Optional] The anticipated account turnover.
	AccountTurnover *SetFinancialAssessmentFinancialInformationAccountTurnover `json:"account_turnover,omitempty"`

	// Level of Education.
	EducationLevel SetFinancialAssessmentFinancialInformationEducationLevel `json:"education_level"`

	// Industry of Employment.
	EmploymentIndustry SetFinancialAssessmentFinancialInformationEmploymentIndustry `json:"employment_industry"`

	// [Optional] Employment Status.
	EmploymentStatus *SetFinancialAssessmentFinancialInformationEmploymentStatus `json:"employment_status,omitempty"`

	// Estimated Net Worth.
	EstimatedWorth SetFinancialAssessmentFinancialInformationEstimatedWorth `json:"estimated_worth"`

	// Income Source.
	IncomeSource SetFinancialAssessmentFinancialInformationIncomeSource `json:"income_source"`

	// Net Annual Income.
	NetIncome SetFinancialAssessmentFinancialInformationNetIncome `json:"net_income"`

	// Occupation.
	Occupation *SetFinancialAssessmentFinancialInformationOccupation `json:"occupation,omitempty"`

	// [Optional] Source of wealth.
	SourceOfWealth *SetFinancialAssessmentFinancialInformationSourceOfWealth `json:"source_of_wealth,omitempty"`
}

type SetFinancialAssessmentFinancialInformationAccountTurnover string

const SetFinancialAssessmentFinancialInformationAccountTurnoverA100001500000 SetFinancialAssessmentFinancialInformationAccountTurnover = "$100,001 - $500,000"
const SetFinancialAssessmentFinancialInformationAccountTurnoverA2500050000 SetFinancialAssessmentFinancialInformationAccountTurnover = "$25,000 - $50,000"
const SetFinancialAssessmentFinancialInformationAccountTurnoverA50001100000 SetFinancialAssessmentFinancialInformationAccountTurnover = "$50,001 - $100,000"
const SetFinancialAssessmentFinancialInformationAccountTurnoverLessThan25000 SetFinancialAssessmentFinancialInformationAccountTurnover = "Less than $25,000"
const SetFinancialAssessmentFinancialInformationAccountTurnoverOver500000 SetFinancialAssessmentFinancialInformationAccountTurnover = "Over $500,000"

type SetFinancialAssessmentFinancialInformationEducationLevel string

const SetFinancialAssessmentFinancialInformationEducationLevelPrimary SetFinancialAssessmentFinancialInformationEducationLevel = "Primary"
const SetFinancialAssessmentFinancialInformationEducationLevelSecondary SetFinancialAssessmentFinancialInformationEducationLevel = "Secondary"
const SetFinancialAssessmentFinancialInformationEducationLevelTertiary SetFinancialAssessmentFinancialInformationEducationLevel = "Tertiary"

type SetFinancialAssessmentFinancialInformationEmploymentIndustry string

const SetFinancialAssessmentFinancialInformationEmploymentIndustryAgriculture SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Agriculture"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryConstruction SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Construction"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryEducation SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Education"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryFinance SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Finance"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryFoodServices SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Food Services"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryHealth SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Health"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryInformationCommunicationsTechnology SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Information & Communications Technology"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryLegal SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Legal"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryManufacturing SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Manufacturing"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryRealEstate SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Real Estate"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryScienceEngineering SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Science & Engineering"
const SetFinancialAssessmentFinancialInformationEmploymentIndustrySocialCultural SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Social & Cultural"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryTourism SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Tourism"
const SetFinancialAssessmentFinancialInformationEmploymentIndustryUnemployed SetFinancialAssessmentFinancialInformationEmploymentIndustry = "Unemployed"

type SetFinancialAssessmentFinancialInformationEmploymentStatus string

const SetFinancialAssessmentFinancialInformationEmploymentStatusEmployed SetFinancialAssessmentFinancialInformationEmploymentStatus = "Employed"
const SetFinancialAssessmentFinancialInformationEmploymentStatusPensioner SetFinancialAssessmentFinancialInformationEmploymentStatus = "Pensioner"
const SetFinancialAssessmentFinancialInformationEmploymentStatusSelfEmployed SetFinancialAssessmentFinancialInformationEmploymentStatus = "Self-Employed"
const SetFinancialAssessmentFinancialInformationEmploymentStatusStudent SetFinancialAssessmentFinancialInformationEmploymentStatus = "Student"
const SetFinancialAssessmentFinancialInformationEmploymentStatusUnemployed SetFinancialAssessmentFinancialInformationEmploymentStatus = "Unemployed"

type SetFinancialAssessmentFinancialInformationEstimatedWorth string

const SetFinancialAssessmentFinancialInformationEstimatedWorthA100000250000 SetFinancialAssessmentFinancialInformationEstimatedWorth = "$100,000 - $250,000"
const SetFinancialAssessmentFinancialInformationEstimatedWorthA250001500000 SetFinancialAssessmentFinancialInformationEstimatedWorth = "$250,001 - $500,000"
const SetFinancialAssessmentFinancialInformationEstimatedWorthA5000011000000 SetFinancialAssessmentFinancialInformationEstimatedWorth = "$500,001 - $1,000,000"
const SetFinancialAssessmentFinancialInformationEstimatedWorthLessThan100000 SetFinancialAssessmentFinancialInformationEstimatedWorth = "Less than $100,000"
const SetFinancialAssessmentFinancialInformationEstimatedWorthOver1000000 SetFinancialAssessmentFinancialInformationEstimatedWorth = "Over $1,000,000"

type SetFinancialAssessmentFinancialInformationIncomeSource string

const SetFinancialAssessmentFinancialInformationIncomeSourceInvestmentsDividends SetFinancialAssessmentFinancialInformationIncomeSource = "Investments & Dividends"
const SetFinancialAssessmentFinancialInformationIncomeSourcePension SetFinancialAssessmentFinancialInformationIncomeSource = "Pension"
const SetFinancialAssessmentFinancialInformationIncomeSourceSalariedEmployee SetFinancialAssessmentFinancialInformationIncomeSource = "Salaried Employee"
const SetFinancialAssessmentFinancialInformationIncomeSourceSavingsInheritance SetFinancialAssessmentFinancialInformationIncomeSource = "Savings & Inheritance"
const SetFinancialAssessmentFinancialInformationIncomeSourceSelfEmployed SetFinancialAssessmentFinancialInformationIncomeSource = "Self-Employed"
const SetFinancialAssessmentFinancialInformationIncomeSourceStateBenefits SetFinancialAssessmentFinancialInformationIncomeSource = "State Benefits"

type SetFinancialAssessmentFinancialInformationNetIncome string

const SetFinancialAssessmentFinancialInformationNetIncomeA100001500000 SetFinancialAssessmentFinancialInformationNetIncome = "$100,001 - $500,000"
const SetFinancialAssessmentFinancialInformationNetIncomeA2500050000 SetFinancialAssessmentFinancialInformationNetIncome = "$25,000 - $50,000"
const SetFinancialAssessmentFinancialInformationNetIncomeA50001100000 SetFinancialAssessmentFinancialInformationNetIncome = "$50,001 - $100,000"
const SetFinancialAssessmentFinancialInformationNetIncomeLessThan25000 SetFinancialAssessmentFinancialInformationNetIncome = "Less than $25,000"
const SetFinancialAssessmentFinancialInformationNetIncomeOver500000 SetFinancialAssessmentFinancialInformationNetIncome = "Over $500,000"

type SetFinancialAssessmentFinancialInformationOccupation string

const SetFinancialAssessmentFinancialInformationOccupationAgriculturalForestryAndFisheryWorkers SetFinancialAssessmentFinancialInformationOccupation = "Agricultural, Forestry and Fishery Workers"
const SetFinancialAssessmentFinancialInformationOccupationArmedForces SetFinancialAssessmentFinancialInformationOccupation = "Armed Forces"
const SetFinancialAssessmentFinancialInformationOccupationChiefExecutivesSeniorOfficialsAndLegislators SetFinancialAssessmentFinancialInformationOccupation = "Chief Executives, Senior Officials and Legislators"
const SetFinancialAssessmentFinancialInformationOccupationCleanersAndHelpers SetFinancialAssessmentFinancialInformationOccupation = "Cleaners and Helpers"
const SetFinancialAssessmentFinancialInformationOccupationClerks SetFinancialAssessmentFinancialInformationOccupation = "Clerks"
const SetFinancialAssessmentFinancialInformationOccupationCraftMetalElectricalAndElectronicsWorkers SetFinancialAssessmentFinancialInformationOccupation = "Craft, Metal, Electrical and Electronics Workers"
const SetFinancialAssessmentFinancialInformationOccupationGovernmentOfficers SetFinancialAssessmentFinancialInformationOccupation = "Government Officers"
const SetFinancialAssessmentFinancialInformationOccupationManagers SetFinancialAssessmentFinancialInformationOccupation = "Managers"
const SetFinancialAssessmentFinancialInformationOccupationMiningConstructionManufacturingAndTransportWorkers SetFinancialAssessmentFinancialInformationOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const SetFinancialAssessmentFinancialInformationOccupationPersonalCareSalesAndServiceWorkers SetFinancialAssessmentFinancialInformationOccupation = "Personal Care, Sales and Service Workers"
const SetFinancialAssessmentFinancialInformationOccupationPlantAndMachineOperatorsAndAssemblers SetFinancialAssessmentFinancialInformationOccupation = "Plant and Machine Operators and Assemblers"
const SetFinancialAssessmentFinancialInformationOccupationProfessionals SetFinancialAssessmentFinancialInformationOccupation = "Professionals"
const SetFinancialAssessmentFinancialInformationOccupationStudents SetFinancialAssessmentFinancialInformationOccupation = "Students"
const SetFinancialAssessmentFinancialInformationOccupationUnemployed SetFinancialAssessmentFinancialInformationOccupation = "Unemployed"

type SetFinancialAssessmentFinancialInformationSourceOfWealth string

const SetFinancialAssessmentFinancialInformationSourceOfWealthAccumulationOfIncomeSavings SetFinancialAssessmentFinancialInformationSourceOfWealth = "Accumulation of Income/Savings"
const SetFinancialAssessmentFinancialInformationSourceOfWealthCashBusiness SetFinancialAssessmentFinancialInformationSourceOfWealth = "Cash Business"
const SetFinancialAssessmentFinancialInformationSourceOfWealthCompanyOwnership SetFinancialAssessmentFinancialInformationSourceOfWealth = "Company Ownership"
const SetFinancialAssessmentFinancialInformationSourceOfWealthDivorceSettlement SetFinancialAssessmentFinancialInformationSourceOfWealth = "Divorce Settlement"
const SetFinancialAssessmentFinancialInformationSourceOfWealthInheritance SetFinancialAssessmentFinancialInformationSourceOfWealth = "Inheritance"
const SetFinancialAssessmentFinancialInformationSourceOfWealthInvestmentIncome SetFinancialAssessmentFinancialInformationSourceOfWealth = "Investment Income"
const SetFinancialAssessmentFinancialInformationSourceOfWealthSaleOfProperty SetFinancialAssessmentFinancialInformationSourceOfWealth = "Sale of Property"

type SetFinancialAssessmentForexTradingExperience string

const SetFinancialAssessmentForexTradingExperienceA01Year SetFinancialAssessmentForexTradingExperience = "0-1 year"
const SetFinancialAssessmentForexTradingExperienceA12Years SetFinancialAssessmentForexTradingExperience = "1-2 years"
const SetFinancialAssessmentForexTradingExperienceOver3Years SetFinancialAssessmentForexTradingExperience = "Over 3 years"

type SetFinancialAssessmentForexTradingFrequency string

const SetFinancialAssessmentForexTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentForexTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentForexTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentForexTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentForexTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentForexTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentForexTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentForexTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentIncomeSource string

const SetFinancialAssessmentIncomeSourceInvestmentsDividends SetFinancialAssessmentIncomeSource = "Investments & Dividends"
const SetFinancialAssessmentIncomeSourcePension SetFinancialAssessmentIncomeSource = "Pension"
const SetFinancialAssessmentIncomeSourceSalariedEmployee SetFinancialAssessmentIncomeSource = "Salaried Employee"
const SetFinancialAssessmentIncomeSourceSavingsInheritance SetFinancialAssessmentIncomeSource = "Savings & Inheritance"
const SetFinancialAssessmentIncomeSourceSelfEmployed SetFinancialAssessmentIncomeSource = "Self-Employed"
const SetFinancialAssessmentIncomeSourceStateBenefits SetFinancialAssessmentIncomeSource = "State Benefits"

type SetFinancialAssessmentNetIncome string

const SetFinancialAssessmentNetIncomeA100001500000 SetFinancialAssessmentNetIncome = "$100,001 - $500,000"
const SetFinancialAssessmentNetIncomeA2500050000 SetFinancialAssessmentNetIncome = "$25,000 - $50,000"
const SetFinancialAssessmentNetIncomeA50001100000 SetFinancialAssessmentNetIncome = "$50,001 - $100,000"
const SetFinancialAssessmentNetIncomeLessThan25000 SetFinancialAssessmentNetIncome = "Less than $25,000"
const SetFinancialAssessmentNetIncomeOver500000 SetFinancialAssessmentNetIncome = "Over $500,000"

type SetFinancialAssessmentOccupation string

const SetFinancialAssessmentOccupationAgriculturalForestryAndFisheryWorkers SetFinancialAssessmentOccupation = "Agricultural, Forestry and Fishery Workers"
const SetFinancialAssessmentOccupationArmedForces SetFinancialAssessmentOccupation = "Armed Forces"
const SetFinancialAssessmentOccupationChiefExecutivesSeniorOfficialsAndLegislators SetFinancialAssessmentOccupation = "Chief Executives, Senior Officials and Legislators"
const SetFinancialAssessmentOccupationCleanersAndHelpers SetFinancialAssessmentOccupation = "Cleaners and Helpers"
const SetFinancialAssessmentOccupationClerks SetFinancialAssessmentOccupation = "Clerks"
const SetFinancialAssessmentOccupationCraftMetalElectricalAndElectronicsWorkers SetFinancialAssessmentOccupation = "Craft, Metal, Electrical and Electronics Workers"
const SetFinancialAssessmentOccupationGovernmentOfficers SetFinancialAssessmentOccupation = "Government Officers"
const SetFinancialAssessmentOccupationManagers SetFinancialAssessmentOccupation = "Managers"
const SetFinancialAssessmentOccupationMiningConstructionManufacturingAndTransportWorkers SetFinancialAssessmentOccupation = "Mining, Construction, Manufacturing and Transport Workers"
const SetFinancialAssessmentOccupationPersonalCareSalesAndServiceWorkers SetFinancialAssessmentOccupation = "Personal Care, Sales and Service Workers"
const SetFinancialAssessmentOccupationPlantAndMachineOperatorsAndAssemblers SetFinancialAssessmentOccupation = "Plant and Machine Operators and Assemblers"
const SetFinancialAssessmentOccupationProfessionals SetFinancialAssessmentOccupation = "Professionals"
const SetFinancialAssessmentOccupationStudents SetFinancialAssessmentOccupation = "Students"
const SetFinancialAssessmentOccupationUnemployed SetFinancialAssessmentOccupation = "Unemployed"

type SetFinancialAssessmentOtherInstrumentsTradingExperience string

const SetFinancialAssessmentOtherInstrumentsTradingExperienceA01Year SetFinancialAssessmentOtherInstrumentsTradingExperience = "0-1 year"
const SetFinancialAssessmentOtherInstrumentsTradingExperienceA12Years SetFinancialAssessmentOtherInstrumentsTradingExperience = "1-2 years"
const SetFinancialAssessmentOtherInstrumentsTradingExperienceOver3Years SetFinancialAssessmentOtherInstrumentsTradingExperience = "Over 3 years"

type SetFinancialAssessmentOtherInstrumentsTradingFrequency string

const SetFinancialAssessmentOtherInstrumentsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentOtherInstrumentsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentOtherInstrumentsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentOtherInstrumentsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentOtherInstrumentsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentOtherInstrumentsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentOtherInstrumentsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentOtherInstrumentsTradingFrequency = "6-10 transactions in the past 12 months"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SetFinancialAssessmentPassthrough map[string]interface{}

type SetFinancialAssessmentSetFinancialAssessment int

type SetFinancialAssessmentSourceOfWealth string

const SetFinancialAssessmentSourceOfWealthAccumulationOfIncomeSavings SetFinancialAssessmentSourceOfWealth = "Accumulation of Income/Savings"
const SetFinancialAssessmentSourceOfWealthCashBusiness SetFinancialAssessmentSourceOfWealth = "Cash Business"
const SetFinancialAssessmentSourceOfWealthCompanyOwnership SetFinancialAssessmentSourceOfWealth = "Company Ownership"
const SetFinancialAssessmentSourceOfWealthDivorceSettlement SetFinancialAssessmentSourceOfWealth = "Divorce Settlement"
const SetFinancialAssessmentSourceOfWealthInheritance SetFinancialAssessmentSourceOfWealth = "Inheritance"
const SetFinancialAssessmentSourceOfWealthInvestmentIncome SetFinancialAssessmentSourceOfWealth = "Investment Income"
const SetFinancialAssessmentSourceOfWealthSaleOfProperty SetFinancialAssessmentSourceOfWealth = "Sale of Property"

// [Optional] The trading experience of a client
type SetFinancialAssessmentTradingExperience struct {
	// [Optional] Binary options trading experience.
	BinaryOptionsTradingExperience *SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience `json:"binary_options_trading_experience,omitempty"`

	// [Optional] Binary options trading frequency.
	BinaryOptionsTradingFrequency *SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency `json:"binary_options_trading_frequency,omitempty"`

	// [Optional] CFDs trading experience.
	CfdTradingExperience *SetFinancialAssessmentTradingExperienceCfdTradingExperience `json:"cfd_trading_experience,omitempty"`

	// [Optional] CFDs trading frequency.
	CfdTradingFrequency *SetFinancialAssessmentTradingExperienceCfdTradingFrequency `json:"cfd_trading_frequency,omitempty"`

	// [Optional] Forex trading experience.
	ForexTradingExperience *SetFinancialAssessmentTradingExperienceForexTradingExperience `json:"forex_trading_experience,omitempty"`

	// [Optional] Forex trading frequency.
	ForexTradingFrequency *SetFinancialAssessmentTradingExperienceForexTradingFrequency `json:"forex_trading_frequency,omitempty"`

	// [Optional] Trading experience in other financial instruments.
	OtherInstrumentsTradingExperience *SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience `json:"other_instruments_trading_experience,omitempty"`

	// [Optional] Trading frequency in other financial instruments.
	OtherInstrumentsTradingFrequency *SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency `json:"other_instruments_trading_frequency,omitempty"`
}

type SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience string

const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperienceA01Year SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience = "0-1 year"
const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperienceA12Years SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience = "1-2 years"
const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperienceOver3Years SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience = "Over 3 years"

type SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency string

const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentTradingExperienceCfdTradingExperience string

const SetFinancialAssessmentTradingExperienceCfdTradingExperienceA01Year SetFinancialAssessmentTradingExperienceCfdTradingExperience = "0-1 year"
const SetFinancialAssessmentTradingExperienceCfdTradingExperienceA12Years SetFinancialAssessmentTradingExperienceCfdTradingExperience = "1-2 years"
const SetFinancialAssessmentTradingExperienceCfdTradingExperienceOver3Years SetFinancialAssessmentTradingExperienceCfdTradingExperience = "Over 3 years"

type SetFinancialAssessmentTradingExperienceCfdTradingFrequency string

const SetFinancialAssessmentTradingExperienceCfdTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceCfdTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceCfdTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceCfdTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceCfdTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceCfdTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceCfdTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceCfdTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentTradingExperienceForexTradingExperience string

const SetFinancialAssessmentTradingExperienceForexTradingExperienceA01Year SetFinancialAssessmentTradingExperienceForexTradingExperience = "0-1 year"
const SetFinancialAssessmentTradingExperienceForexTradingExperienceA12Years SetFinancialAssessmentTradingExperienceForexTradingExperience = "1-2 years"
const SetFinancialAssessmentTradingExperienceForexTradingExperienceOver3Years SetFinancialAssessmentTradingExperienceForexTradingExperience = "Over 3 years"

type SetFinancialAssessmentTradingExperienceForexTradingFrequency string

const SetFinancialAssessmentTradingExperienceForexTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceForexTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceForexTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceForexTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceForexTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceForexTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceForexTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceForexTradingFrequency = "6-10 transactions in the past 12 months"

type SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience string

const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperienceA01Year SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience = "0-1 year"
const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperienceA12Years SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience = "1-2 years"
const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperienceOver3Years SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience = "Over 3 years"

type SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency string

const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequencyA05TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency = "0-5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency = "11-39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency = "6-10 transactions in the past 12 months"

// [Optional] The trading experience of a `maltainvest` client
type SetFinancialAssessmentTradingExperienceRegulated struct {
	// How much experience do you have in CFD trading?
	CfdExperience SetFinancialAssessmentTradingExperienceRegulatedCfdExperience `json:"cfd_experience"`

	// How many CFD trades have you placed in the past 12 months?
	CfdFrequency SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency `json:"cfd_frequency"`

	// In your understanding, CFD trading allows you to:
	CfdTradingDefinition SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition `json:"cfd_trading_definition"`

	// How does leverage affect CFD trading?
	LeverageImpactTrading SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading `json:"leverage_impact_trading"`

	// Leverage trading is high-risk, so it's a good idea to use risk management
	// features such as stop loss. Stop loss allows you to
	LeverageTradingHighRiskStopLoss SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss `json:"leverage_trading_high_risk_stop_loss"`

	// When would you be required to pay an initial margin?
	RequiredInitialMargin SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin `json:"required_initial_margin"`

	// Do you understand that you could potentially lose 100% of the money you use to
	// trade?
	RiskTolerance SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance `json:"risk_tolerance"`

	// How much knowledge and experience do you have in relation to online trading?
	SourceOfExperience SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience `json:"source_of_experience"`

	// How much experience do you have with other financial instruments?
	TradingExperienceFinancialInstruments SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments `json:"trading_experience_financial_instruments"`

	// How many trades have you placed with other financial instruments in the past 12
	// months?
	TradingFrequencyFinancialInstruments SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments `json:"trading_frequency_financial_instruments"`
}

type SetFinancialAssessmentTradingExperienceRegulatedCfdExperience string

const SetFinancialAssessmentTradingExperienceRegulatedCfdExperienceA12Years SetFinancialAssessmentTradingExperienceRegulatedCfdExperience = "1 - 2 years"
const SetFinancialAssessmentTradingExperienceRegulatedCfdExperienceLessThanAYear SetFinancialAssessmentTradingExperienceRegulatedCfdExperience = "Less than a year"
const SetFinancialAssessmentTradingExperienceRegulatedCfdExperienceNoExperience SetFinancialAssessmentTradingExperienceRegulatedCfdExperience = "No experience"
const SetFinancialAssessmentTradingExperienceRegulatedCfdExperienceOver3Years SetFinancialAssessmentTradingExperienceRegulatedCfdExperience = "Over 3 years"

type SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency string

const SetFinancialAssessmentTradingExperienceRegulatedCfdFrequencyA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = "11 - 39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedCfdFrequencyA15TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = "1 - 5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedCfdFrequencyA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedCfdFrequencyA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = "6 - 10 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedCfdFrequencyNoTransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = "No transactions in the past 12 months"

type SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition string

const SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinitionMakeALongTermInvestment SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition = "Make a long-term investment."
const SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinitionPlaceABetOnThePriceMovement SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition = "Place a bet on the price movement."
const SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinitionPurchaseSharesOfACompanyOrPhysicalCommodities SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition = "Purchase shares of a company or physical commodities."
const SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinitionSpeculateOnThePriceMovement SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition = "Speculate on the price movement."

type SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading string

const SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTradingLeverageGuaranteesProfits SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading = "Leverage guarantees profits."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTradingLeverageIsARiskMitigationTechnique SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading = "Leverage is a risk mitigation technique."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTradingLeverageLetsYouOpenLargerPositionsForAFractionOfTheTradeSValue SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading = "Leverage lets you open larger positions for a fraction of the trade's value."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTradingLeveragePreventsYouFromOpeningLargePositions SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading = "Leverage prevents you from opening large positions."

type SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss string

const SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLossCancelYourTradeAtAnyTimeWithinAChosenTimeframe SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Cancel your trade at any time within a chosen timeframe."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheLossIsMoreThanOrEqualToASpecificAmount SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Close your trade automatically when the loss is more than or equal to a specific amount."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLossCloseYourTradeAutomaticallyWhenTheProfitIsMoreThanOrEqualToASpecificAmount SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Close your trade automatically when the profit is more than or equal to a specific amount."
const SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLossMakeAGuaranteedProfitOnYourTrade SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = "Make a guaranteed profit on your trade."

type SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin string

const SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMarginAllOfTheAbove SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin = "All of the above."
const SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMarginWhenBuyingSharesOfACompany SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin = "When buying shares of a company."
const SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMarginWhenOpeningALeveragedCFDTrade SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin = "When opening a Leveraged CFD trade."
const SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMarginWhenTradingMultipliers SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin = "When trading Multipliers."

type SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance string

const SetFinancialAssessmentTradingExperienceRegulatedRiskToleranceNo SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance = "No"
const SetFinancialAssessmentTradingExperienceRegulatedRiskToleranceYes SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance = "Yes"

type SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience string

const SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperienceIHaveAnAcademicDegreeProfessionalCertificationAndOrWorkExperience SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = "I have an academic degree, professional certification, and/or work experience."
const SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperienceIHaveAttendedSeminarsTrainingAndOrWorkshops SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = "I have attended seminars, training, and/or workshops."
const SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperienceIHaveLittleExperience SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = "I have little experience."
const SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperienceIHaveNoKnowledge SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = "I have no knowledge."
const SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperienceITradeForexCFDsAndOtherComplexFinancialInstruments SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = "I trade forex CFDs and other complex financial instruments."

type SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments string

const SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstrumentsA12Years SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments = "1 - 2 years"
const SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstrumentsLessThanAYear SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments = "Less than a year"
const SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstrumentsNoExperience SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments = "No experience"
const SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstrumentsOver3Years SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments = "Over 3 years"

type SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments string

const SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA1139TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "11 - 39 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA15TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "1 - 5 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA40TransactionsOrMoreInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "40 transactions or more in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsA610TransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "6 - 10 transactions in the past 12 months"
const SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstrumentsNoTransactionsInThePast12Months SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = "No transactions in the past 12 months"

var enumValues_SetFinancialAssessmentAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_SetFinancialAssessmentBinaryOptionsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentBinaryOptionsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentCfdTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentCfdTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}
var enumValues_SetFinancialAssessmentEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}
var enumValues_SetFinancialAssessmentFinancialInformationAccountTurnover = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_SetFinancialAssessmentFinancialInformationEducationLevel = []interface{}{
	"Primary",
	"Secondary",
	"Tertiary",
}
var enumValues_SetFinancialAssessmentFinancialInformationEmploymentIndustry = []interface{}{
	"Construction",
	"Education",
	"Finance",
	"Health",
	"Tourism",
	"Information & Communications Technology",
	"Science & Engineering",
	"Legal",
	"Social & Cultural",
	"Agriculture",
	"Real Estate",
	"Food Services",
	"Manufacturing",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentFinancialInformationEmploymentStatus = []interface{}{
	"Employed",
	"Pensioner",
	"Self-Employed",
	"Student",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentFinancialInformationEstimatedWorth = []interface{}{
	"Less than $100,000",
	"$100,000 - $250,000",
	"$250,001 - $500,000",
	"$500,001 - $1,000,000",
	"Over $1,000,000",
}
var enumValues_SetFinancialAssessmentFinancialInformationIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}
var enumValues_SetFinancialAssessmentFinancialInformationNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_SetFinancialAssessmentFinancialInformationOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentFinancialInformationSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}
var enumValues_SetFinancialAssessmentForexTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentForexTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentIncomeSource = []interface{}{
	"Salaried Employee",
	"Self-Employed",
	"Investments & Dividends",
	"Pension",
	"State Benefits",
	"Savings & Inheritance",
}
var enumValues_SetFinancialAssessmentNetIncome = []interface{}{
	"Less than $25,000",
	"$25,000 - $50,000",
	"$50,001 - $100,000",
	"$100,001 - $500,000",
	"Over $500,000",
}
var enumValues_SetFinancialAssessmentOccupation = []interface{}{
	"Chief Executives, Senior Officials and Legislators",
	"Managers",
	"Professionals",
	"Clerks",
	"Personal Care, Sales and Service Workers",
	"Agricultural, Forestry and Fishery Workers",
	"Craft, Metal, Electrical and Electronics Workers",
	"Plant and Machine Operators and Assemblers",
	"Cleaners and Helpers",
	"Mining, Construction, Manufacturing and Transport Workers",
	"Armed Forces",
	"Government Officers",
	"Students",
	"Unemployed",
}
var enumValues_SetFinancialAssessmentOtherInstrumentsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentOtherInstrumentsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentSetFinancialAssessment = []interface{}{
	1,
}
var enumValues_SetFinancialAssessmentSourceOfWealth = []interface{}{
	"Accumulation of Income/Savings",
	"Cash Business",
	"Company Ownership",
	"Divorce Settlement",
	"Inheritance",
	"Investment Income",
	"Sale of Property",
}
var enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentTradingExperienceCfdTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdFrequency = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedCfdExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedCfdExperience(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdExperience = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}
var enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition = []interface{}{
	"Purchase shares of a company or physical commodities.",
	"Place a bet on the price movement.",
	"Speculate on the price movement.",
	"Make a long-term investment.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedCfdTradingDefinition(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceOtherInstrumentsTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceForexTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceForexTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceForexTradingFrequency, v)
	}
	*j = SetFinancialAssessmentTradingExperienceForexTradingFrequency(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading = []interface{}{
	"Leverage is a risk mitigation technique.",
	"Leverage prevents you from opening large positions.",
	"Leverage guarantees profits.",
	"Leverage lets you open larger positions for a fraction of the trade's value.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedLeverageImpactTrading(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceForexTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceForexTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceForexTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceForexTradingExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceForexTradingExperience(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceForexTradingExperience = []interface{}{
	"0-1 year",
	"1-2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceCfdTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceCfdTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceCfdTradingFrequency, v)
	}
	*j = SetFinancialAssessmentTradingExperienceCfdTradingFrequency(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceCfdTradingFrequency = []interface{}{
	"0-5 transactions in the past 12 months",
	"6-10 transactions in the past 12 months",
	"11-39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}
var enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss = []interface{}{
	"Cancel your trade at any time within a chosen timeframe.",
	"Close your trade automatically when the loss is more than or equal to a specific amount.",
	"Close your trade automatically when the profit is more than or equal to a specific amount.",
	"Make a guaranteed profit on your trade.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedLeverageTradingHighRiskStopLoss(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceCfdTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceCfdTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceCfdTradingExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceCfdTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationOccupation, v)
	}
	*j = SetFinancialAssessmentFinancialInformationOccupation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentTradingExperienceBinaryOptionsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceBinaryOptionsTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentSourceOfWealth, v)
	}
	*j = SetFinancialAssessmentSourceOfWealth(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin = []interface{}{
	"When opening a Leveraged CFD trade.",
	"When trading Multipliers.",
	"When buying shares of a company.",
	"All of the above.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedRequiredInitialMargin(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentSetFinancialAssessment) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentSetFinancialAssessment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentSetFinancialAssessment, v)
	}
	*j = SetFinancialAssessmentSetFinancialAssessment(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentOtherInstrumentsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentOtherInstrumentsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentOtherInstrumentsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentOtherInstrumentsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentOtherInstrumentsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentOtherInstrumentsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentOtherInstrumentsTradingExperience, v)
	}
	*j = SetFinancialAssessmentOtherInstrumentsTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentOccupation) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentOccupation {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentOccupation, v)
	}
	*j = SetFinancialAssessmentOccupation(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentNetIncome, v)
	}
	*j = SetFinancialAssessmentNetIncome(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance = []interface{}{
	"Yes",
	"No",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedRiskTolerance(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentAccountTurnover, v)
	}
	*j = SetFinancialAssessmentAccountTurnover(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentIncomeSource, v)
	}
	*j = SetFinancialAssessmentIncomeSource(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentBinaryOptionsTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentBinaryOptionsTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentBinaryOptionsTradingExperience, v)
	}
	*j = SetFinancialAssessmentBinaryOptionsTradingExperience(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience = []interface{}{
	"I have an academic degree, professional certification, and/or work experience.",
	"I trade forex CFDs and other complex financial instruments.",
	"I have attended seminars, training, and/or workshops.",
	"I have little experience.",
	"I have no knowledge.",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedSourceOfExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentBinaryOptionsTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentBinaryOptionsTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentBinaryOptionsTradingFrequency, v)
	}
	*j = SetFinancialAssessmentBinaryOptionsTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentCfdTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentCfdTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentCfdTradingExperience, v)
	}
	*j = SetFinancialAssessmentCfdTradingExperience(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentForexTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentForexTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentForexTradingFrequency, v)
	}
	*j = SetFinancialAssessmentForexTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentCfdTradingFrequency) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentCfdTradingFrequency {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentCfdTradingFrequency, v)
	}
	*j = SetFinancialAssessmentCfdTradingFrequency(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentEducationLevel, v)
	}
	*j = SetFinancialAssessmentEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentForexTradingExperience) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentForexTradingExperience {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentForexTradingExperience, v)
	}
	*j = SetFinancialAssessmentForexTradingExperience(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments = []interface{}{
	"No experience",
	"Less than a year",
	"1 - 2 years",
	"Over 3 years",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedTradingExperienceFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformation) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["education_level"]; !ok || v == nil {
		return fmt.Errorf("field education_level in SetFinancialAssessmentFinancialInformation: required")
	}
	if v, ok := raw["employment_industry"]; !ok || v == nil {
		return fmt.Errorf("field employment_industry in SetFinancialAssessmentFinancialInformation: required")
	}
	if v, ok := raw["estimated_worth"]; !ok || v == nil {
		return fmt.Errorf("field estimated_worth in SetFinancialAssessmentFinancialInformation: required")
	}
	if v, ok := raw["income_source"]; !ok || v == nil {
		return fmt.Errorf("field income_source in SetFinancialAssessmentFinancialInformation: required")
	}
	if v, ok := raw["net_income"]; !ok || v == nil {
		return fmt.Errorf("field net_income in SetFinancialAssessmentFinancialInformation: required")
	}
	type Plain SetFinancialAssessmentFinancialInformation
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentFinancialInformation(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentEmploymentIndustry, v)
	}
	*j = SetFinancialAssessmentEmploymentIndustry(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentEmploymentStatus, v)
	}
	*j = SetFinancialAssessmentEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentEstimatedWorth, v)
	}
	*j = SetFinancialAssessmentEstimatedWorth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationAccountTurnover) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationAccountTurnover {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationAccountTurnover, v)
	}
	*j = SetFinancialAssessmentFinancialInformationAccountTurnover(v)
	return nil
}

var enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments = []interface{}{
	"No transactions in the past 12 months",
	"1 - 5 transactions in the past 12 months",
	"6 - 10 transactions in the past 12 months",
	"11 - 39 transactions in the past 12 months",
	"40 transactions or more in the past 12 months",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments, v)
	}
	*j = SetFinancialAssessmentTradingExperienceRegulatedTradingFrequencyFinancialInstruments(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationSourceOfWealth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationSourceOfWealth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationSourceOfWealth, v)
	}
	*j = SetFinancialAssessmentFinancialInformationSourceOfWealth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationEducationLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationEducationLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationEducationLevel, v)
	}
	*j = SetFinancialAssessmentFinancialInformationEducationLevel(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationEmploymentIndustry) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationEmploymentIndustry {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationEmploymentIndustry, v)
	}
	*j = SetFinancialAssessmentFinancialInformationEmploymentIndustry(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationEmploymentStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationEmploymentStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationEmploymentStatus, v)
	}
	*j = SetFinancialAssessmentFinancialInformationEmploymentStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationEstimatedWorth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationEstimatedWorth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationEstimatedWorth, v)
	}
	*j = SetFinancialAssessmentFinancialInformationEstimatedWorth(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationIncomeSource) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationIncomeSource {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationIncomeSource, v)
	}
	*j = SetFinancialAssessmentFinancialInformationIncomeSource(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentTradingExperienceRegulated) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["cfd_experience"]; !ok || v == nil {
		return fmt.Errorf("field cfd_experience in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["cfd_frequency"]; !ok || v == nil {
		return fmt.Errorf("field cfd_frequency in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["cfd_trading_definition"]; !ok || v == nil {
		return fmt.Errorf("field cfd_trading_definition in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["leverage_impact_trading"]; !ok || v == nil {
		return fmt.Errorf("field leverage_impact_trading in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["leverage_trading_high_risk_stop_loss"]; !ok || v == nil {
		return fmt.Errorf("field leverage_trading_high_risk_stop_loss in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["required_initial_margin"]; !ok || v == nil {
		return fmt.Errorf("field required_initial_margin in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["risk_tolerance"]; !ok || v == nil {
		return fmt.Errorf("field risk_tolerance in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["source_of_experience"]; !ok || v == nil {
		return fmt.Errorf("field source_of_experience in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["trading_experience_financial_instruments"]; !ok || v == nil {
		return fmt.Errorf("field trading_experience_financial_instruments in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	if v, ok := raw["trading_frequency_financial_instruments"]; !ok || v == nil {
		return fmt.Errorf("field trading_frequency_financial_instruments in SetFinancialAssessmentTradingExperienceRegulated: required")
	}
	type Plain SetFinancialAssessmentTradingExperienceRegulated
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessmentTradingExperienceRegulated(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessmentFinancialInformationNetIncome) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetFinancialAssessmentFinancialInformationNetIncome {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetFinancialAssessmentFinancialInformationNetIncome, v)
	}
	*j = SetFinancialAssessmentFinancialInformationNetIncome(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetFinancialAssessment) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["set_financial_assessment"]; !ok || v == nil {
		return fmt.Errorf("field set_financial_assessment in SetFinancialAssessment: required")
	}
	type Plain SetFinancialAssessment
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetFinancialAssessment(plain)
	return nil
}
