// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type P2PAdvertiserUpdateIsListed int

var enumValues_P2PAdvertiserUpdateIsListed = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateIsListed) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateIsListed {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateIsListed, v)
	}
	*j = P2PAdvertiserUpdateIsListed(v)
	return nil
}

type P2PAdvertiserUpdateP2PAdvertiserUpdate int

var enumValues_P2PAdvertiserUpdateP2PAdvertiserUpdate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateP2PAdvertiserUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateP2PAdvertiserUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateP2PAdvertiserUpdate, v)
	}
	*j = P2PAdvertiserUpdateP2PAdvertiserUpdate(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type P2PAdvertiserUpdatePassthrough map[string]interface{}

type P2PAdvertiserUpdateShowName int

var enumValues_P2PAdvertiserUpdateShowName = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateShowName) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateShowName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateShowName, v)
	}
	*j = P2PAdvertiserUpdateShowName(v)
	return nil
}

type P2PAdvertiserUpdateUpgradeLimits int

var enumValues_P2PAdvertiserUpdateUpgradeLimits = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdateUpgradeLimits) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2PAdvertiserUpdateUpgradeLimits {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2PAdvertiserUpdateUpgradeLimits, v)
	}
	*j = P2PAdvertiserUpdateUpgradeLimits(v)
	return nil
}

// Update the information of the P2P advertiser for the current account. Can only
// be used by an approved P2P advertiser.
type P2PAdvertiserUpdate struct {
	// [Optional] Advertiser's contact information, to be used as a default for new
	// sell adverts.
	ContactInfo *string `json:"contact_info,omitempty"`

	// [Optional] Default description that can be used every time an advert is
	// created.
	DefaultAdvertDescription *string `json:"default_advert_description,omitempty"`

	// [Optional] Used to set if the advertiser's adverts could be listed. When `0`,
	// adverts won't be listed regardless of they are active or not. This doesn't
	// change the `is_active` of each individual advert.
	IsListed *P2PAdvertiserUpdateIsListed `json:"is_listed,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// Must be 1
	P2PAdvertiserUpdate P2PAdvertiserUpdateP2PAdvertiserUpdate `json:"p2p_advertiser_update"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough P2PAdvertiserUpdatePassthrough `json:"passthrough,omitempty"`

	// [Optional] Advertiser's payment information, to be used as a default for new
	// sell adverts.
	PaymentInfo *string `json:"payment_info,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] When `1`, the advertiser's real name will be displayed on to other
	// users on adverts and orders.
	ShowName *P2PAdvertiserUpdateShowName `json:"show_name,omitempty"`

	// [Optional] Used to upgrade daily limits of eligible advertiser.
	UpgradeLimits *P2PAdvertiserUpdateUpgradeLimits `json:"upgrade_limits,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2PAdvertiserUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["p2p_advertiser_update"]; !ok || v == nil {
		return fmt.Errorf("field p2p_advertiser_update in P2PAdvertiserUpdate: required")
	}
	type Plain P2PAdvertiserUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2PAdvertiserUpdate(plain)
	return nil
}
