// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Buy a Contract for multiple Accounts specified by the `tokens` parameter. Note,
// although this is an authorized call, the contract is not bought for the
// authorized account.
type BuyContractForMultipleAccounts struct {
	// Either the ID received from a Price Proposal (`proposal` call), or `1` if
	// contract buy parameters are passed in the `parameters` field.
	BuyContractForMultipleAccounts string `json:"buy_contract_for_multiple_accounts"`

	// [Optional] Used to pass the parameters for contract buy.
	Parameters *BuyContractForMultipleAccountsParameters `json:"parameters,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough BuyContractForMultipleAccountsPassthrough `json:"passthrough,omitempty"`

	// Maximum price at which to purchase the contract.
	Price float64 `json:"price"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// List of API tokens identifying the accounts for which the contract is bought.
	// Note: If the same token appears multiple times or if multiple tokens designate
	// the same account, the contract is bought multiple times for this account.
	Tokens []string `json:"tokens"`
}

// [Optional] Used to pass the parameters for contract buy.
type BuyContractForMultipleAccountsParameters struct {
	// [Optional] Proposed `payout` or `stake` value
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Markup added to contract prices (as a percentage of contract payout)
	AppMarkupPercentage *float64 `json:"app_markup_percentage,omitempty"`

	// [Optional] Barrier for the contract (or last digit prediction for digit
	// contracts). Contracts less than 24 hours in duration would need a relative
	// barrier (barriers which need +/-), where entry spot would be adjusted
	// accordingly with that amount to define a barrier, except for Synthetic Indices
	// as they support both relative and absolute barriers.
	Barrier *string `json:"barrier,omitempty"`

	// [Optional] Low barrier for the contract (for contracts with two barriers).
	// Contracts less than 24 hours in duration would need a relative barrier
	// (barriers which need +/-), where entry spot would be adjusted accordingly with
	// that amount to define a barrier, except for Synthetic Indices as they support
	// both relative and absolute barriers.
	Barrier2 *string `json:"barrier2,omitempty"`

	// [Optional] Indicate whether amount is 'payout' or 'stake'.
	Basis *BuyContractForMultipleAccountsParametersBasis `json:"basis,omitempty"`

	// A valid contract-type
	ContractType BuyContractForMultipleAccountsParametersContractType `json:"contract_type"`

	// This can only be the account-holder's currency
	Currency string `json:"currency"`

	// [Optional] Epoch value of the expiry time of the contract. You must either
	// specify `date_expiry` or `duration`.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// [Optional] For forward-starting contracts, epoch value of the starting time of
	// the contract.
	DateStart *int `json:"date_start,omitempty"`

	// [Optional] Duration quantity
	Duration *int `json:"duration,omitempty"`

	// [Optional] Duration unit is `s`: seconds, `m`: minutes, `h`: hours, `d`: days,
	// `t`: ticks
	DurationUnit *BuyContractForMultipleAccountsParametersDurationUnit `json:"duration_unit,omitempty"`

	// [Optional] The multiplier for non-binary options. E.g. lookbacks.
	Multiplier *float64 `json:"multiplier,omitempty"`

	// [Optional] The tick that is predicted to have the highest/lowest value - for
	// tickhigh and ticklow contracts.
	SelectedTick *int `json:"selected_tick,omitempty"`

	// Symbol code
	Symbol string `json:"symbol"`
}

type BuyContractForMultipleAccountsParametersBasis string

const BuyContractForMultipleAccountsParametersBasisPayout BuyContractForMultipleAccountsParametersBasis = "payout"
const BuyContractForMultipleAccountsParametersBasisStake BuyContractForMultipleAccountsParametersBasis = "stake"

type BuyContractForMultipleAccountsParametersContractType string

const BuyContractForMultipleAccountsParametersContractTypeASIAND BuyContractForMultipleAccountsParametersContractType = "ASIAND"
const BuyContractForMultipleAccountsParametersContractTypeASIANU BuyContractForMultipleAccountsParametersContractType = "ASIANU"
const BuyContractForMultipleAccountsParametersContractTypeCALL BuyContractForMultipleAccountsParametersContractType = "CALL"
const BuyContractForMultipleAccountsParametersContractTypeCALLE BuyContractForMultipleAccountsParametersContractType = "CALLE"
const BuyContractForMultipleAccountsParametersContractTypeCALLSPREAD BuyContractForMultipleAccountsParametersContractType = "CALLSPREAD"
const BuyContractForMultipleAccountsParametersContractTypeDIGITDIFF BuyContractForMultipleAccountsParametersContractType = "DIGITDIFF"
const BuyContractForMultipleAccountsParametersContractTypeDIGITEVEN BuyContractForMultipleAccountsParametersContractType = "DIGITEVEN"
const BuyContractForMultipleAccountsParametersContractTypeDIGITMATCH BuyContractForMultipleAccountsParametersContractType = "DIGITMATCH"
const BuyContractForMultipleAccountsParametersContractTypeDIGITODD BuyContractForMultipleAccountsParametersContractType = "DIGITODD"
const BuyContractForMultipleAccountsParametersContractTypeDIGITOVER BuyContractForMultipleAccountsParametersContractType = "DIGITOVER"
const BuyContractForMultipleAccountsParametersContractTypeDIGITUNDER BuyContractForMultipleAccountsParametersContractType = "DIGITUNDER"
const BuyContractForMultipleAccountsParametersContractTypeEXPIRYMISS BuyContractForMultipleAccountsParametersContractType = "EXPIRYMISS"
const BuyContractForMultipleAccountsParametersContractTypeEXPIRYMISSE BuyContractForMultipleAccountsParametersContractType = "EXPIRYMISSE"
const BuyContractForMultipleAccountsParametersContractTypeEXPIRYRANGE BuyContractForMultipleAccountsParametersContractType = "EXPIRYRANGE"
const BuyContractForMultipleAccountsParametersContractTypeEXPIRYRANGEE BuyContractForMultipleAccountsParametersContractType = "EXPIRYRANGEE"
const BuyContractForMultipleAccountsParametersContractTypeLBFLOATCALL BuyContractForMultipleAccountsParametersContractType = "LBFLOATCALL"
const BuyContractForMultipleAccountsParametersContractTypeLBFLOATPUT BuyContractForMultipleAccountsParametersContractType = "LBFLOATPUT"
const BuyContractForMultipleAccountsParametersContractTypeLBHIGHLOW BuyContractForMultipleAccountsParametersContractType = "LBHIGHLOW"
const BuyContractForMultipleAccountsParametersContractTypeMULTDOWN BuyContractForMultipleAccountsParametersContractType = "MULTDOWN"
const BuyContractForMultipleAccountsParametersContractTypeMULTUP BuyContractForMultipleAccountsParametersContractType = "MULTUP"
const BuyContractForMultipleAccountsParametersContractTypeNOTOUCH BuyContractForMultipleAccountsParametersContractType = "NOTOUCH"
const BuyContractForMultipleAccountsParametersContractTypeONETOUCH BuyContractForMultipleAccountsParametersContractType = "ONETOUCH"
const BuyContractForMultipleAccountsParametersContractTypePUT BuyContractForMultipleAccountsParametersContractType = "PUT"
const BuyContractForMultipleAccountsParametersContractTypePUTE BuyContractForMultipleAccountsParametersContractType = "PUTE"
const BuyContractForMultipleAccountsParametersContractTypePUTSPREAD BuyContractForMultipleAccountsParametersContractType = "PUTSPREAD"
const BuyContractForMultipleAccountsParametersContractTypeRANGE BuyContractForMultipleAccountsParametersContractType = "RANGE"
const BuyContractForMultipleAccountsParametersContractTypeRESETCALL BuyContractForMultipleAccountsParametersContractType = "RESETCALL"
const BuyContractForMultipleAccountsParametersContractTypeRESETPUT BuyContractForMultipleAccountsParametersContractType = "RESETPUT"
const BuyContractForMultipleAccountsParametersContractTypeRUNHIGH BuyContractForMultipleAccountsParametersContractType = "RUNHIGH"
const BuyContractForMultipleAccountsParametersContractTypeRUNLOW BuyContractForMultipleAccountsParametersContractType = "RUNLOW"
const BuyContractForMultipleAccountsParametersContractTypeTICKHIGH BuyContractForMultipleAccountsParametersContractType = "TICKHIGH"
const BuyContractForMultipleAccountsParametersContractTypeTICKLOW BuyContractForMultipleAccountsParametersContractType = "TICKLOW"
const BuyContractForMultipleAccountsParametersContractTypeTURBOSLONG BuyContractForMultipleAccountsParametersContractType = "TURBOSLONG"
const BuyContractForMultipleAccountsParametersContractTypeTURBOSSHORT BuyContractForMultipleAccountsParametersContractType = "TURBOSSHORT"
const BuyContractForMultipleAccountsParametersContractTypeUPORDOWN BuyContractForMultipleAccountsParametersContractType = "UPORDOWN"
const BuyContractForMultipleAccountsParametersContractTypeVANILLALONGCALL BuyContractForMultipleAccountsParametersContractType = "VANILLALONGCALL"
const BuyContractForMultipleAccountsParametersContractTypeVANILLALONGPUT BuyContractForMultipleAccountsParametersContractType = "VANILLALONGPUT"

type BuyContractForMultipleAccountsParametersDurationUnit string

const BuyContractForMultipleAccountsParametersDurationUnitD BuyContractForMultipleAccountsParametersDurationUnit = "d"
const BuyContractForMultipleAccountsParametersDurationUnitH BuyContractForMultipleAccountsParametersDurationUnit = "h"

var enumValues_BuyContractForMultipleAccountsParametersDurationUnit = []interface{}{
	"d",
	"m",
	"s",
	"h",
	"t",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsParametersDurationUnit) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsParametersDurationUnit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsParametersDurationUnit, v)
	}
	*j = BuyContractForMultipleAccountsParametersDurationUnit(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsParametersContractType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsParametersContractType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsParametersContractType, v)
	}
	*j = BuyContractForMultipleAccountsParametersContractType(v)
	return nil
}

const BuyContractForMultipleAccountsParametersDurationUnitM BuyContractForMultipleAccountsParametersDurationUnit = "m"
const BuyContractForMultipleAccountsParametersDurationUnitS BuyContractForMultipleAccountsParametersDurationUnit = "s"
const BuyContractForMultipleAccountsParametersDurationUnitT BuyContractForMultipleAccountsParametersDurationUnit = "t"

var enumValues_BuyContractForMultipleAccountsParametersContractType = []interface{}{
	"MULTUP",
	"MULTDOWN",
	"UPORDOWN",
	"EXPIRYRANGE",
	"ONETOUCH",
	"CALLE",
	"LBHIGHLOW",
	"ASIAND",
	"EXPIRYRANGEE",
	"DIGITDIFF",
	"DIGITMATCH",
	"DIGITOVER",
	"PUTE",
	"DIGITUNDER",
	"NOTOUCH",
	"CALL",
	"RANGE",
	"LBFLOATPUT",
	"DIGITODD",
	"PUT",
	"ASIANU",
	"LBFLOATCALL",
	"EXPIRYMISSE",
	"EXPIRYMISS",
	"DIGITEVEN",
	"TICKHIGH",
	"TICKLOW",
	"RESETCALL",
	"RESETPUT",
	"CALLSPREAD",
	"PUTSPREAD",
	"RUNHIGH",
	"RUNLOW",
	"VANILLALONGCALL",
	"VANILLALONGPUT",
	"TURBOSLONG",
	"TURBOSSHORT",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsParametersBasis) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyContractForMultipleAccountsParametersBasis {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyContractForMultipleAccountsParametersBasis, v)
	}
	*j = BuyContractForMultipleAccountsParametersBasis(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccountsParameters) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_type"]; !ok || v == nil {
		return fmt.Errorf("field contract_type: required")
	}
	if v, ok := raw["currency"]; !ok || v == nil {
		return fmt.Errorf("field currency: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol: required")
	}
	type Plain BuyContractForMultipleAccountsParameters
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccountsParameters(plain)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type BuyContractForMultipleAccountsPassthrough map[string]interface{}

var enumValues_BuyContractForMultipleAccountsParametersBasis = []interface{}{
	"payout",
	"stake",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyContractForMultipleAccounts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["buy_contract_for_multiple_accounts"]; !ok || v == nil {
		return fmt.Errorf("field buy_contract_for_multiple_accounts: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["tokens"]; !ok || v == nil {
		return fmt.Errorf("field tokens: required")
	}
	type Plain BuyContractForMultipleAccounts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyContractForMultipleAccounts(plain)
	return nil
}
