// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type TransferBetweenAccountsAccounts string

var enumValues_TransferBetweenAccountsAccounts = []interface{}{
	"all",
	"brief",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsAccounts) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsAccounts, v)
	}
	*j = TransferBetweenAccountsAccounts(v)
	return nil
}

const TransferBetweenAccountsAccountsAll TransferBetweenAccountsAccounts = "all"
const TransferBetweenAccountsAccountsBrief TransferBetweenAccountsAccounts = "brief"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TransferBetweenAccountsPassthrough map[string]interface{}

type TransferBetweenAccountsTransferBetweenAccounts int

var enumValues_TransferBetweenAccountsTransferBetweenAccounts = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccountsTransferBetweenAccounts) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransferBetweenAccountsTransferBetweenAccounts {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransferBetweenAccountsTransferBetweenAccounts, v)
	}
	*j = TransferBetweenAccountsTransferBetweenAccounts(v)
	return nil
}

// This call allows transfers between accounts held by a given user. Transfer funds
// between your fiat and cryptocurrency accounts (for a fee). Please note that
// account_from should be same as current authorized account.
type TransferBetweenAccounts struct {
	// [Optional] The loginid of the account to transfer funds from.
	AccountFrom *string `json:"account_from,omitempty"`

	// [Optional] The loginid of the account to transfer funds to.
	AccountTo *string `json:"account_to,omitempty"`

	// [Optional] To control the list of accounts returned when `account_from` or
	// `account_to` is not provided. `brief` (default value) means that accounts with
	// `mt5` account_type will be excluded; it will run faster. `all` means that all
	// accounts with any account_type (including `mt5`) will be returned.
	Accounts TransferBetweenAccountsAccounts `json:"accounts,omitempty"`

	// [Optional] The amount to transfer.
	Amount *float64 `json:"amount,omitempty"`

	// [Optional] Currency code.
	Currency *string `json:"currency,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TransferBetweenAccountsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// If `account_from` or `account_to` is not provided, it just returns the
	// available accounts.
	TransferBetweenAccounts TransferBetweenAccountsTransferBetweenAccounts `json:"transfer_between_accounts"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransferBetweenAccounts) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["transfer_between_accounts"]; !ok || v == nil {
		return fmt.Errorf("field transfer_between_accounts in TransferBetweenAccounts: required")
	}
	type Plain TransferBetweenAccounts
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["accounts"]; !ok || v == nil {
		plain.Accounts = "brief"
	}
	*j = TransferBetweenAccounts(plain)
	return nil
}
