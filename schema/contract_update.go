// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type ContractUpdateContractUpdate int

var enumValues_ContractUpdateContractUpdate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateContractUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateContractUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateContractUpdate, v)
	}
	*j = ContractUpdateContractUpdate(v)
	return nil
}

// Update a contract condition.
type ContractUpdate struct {
	// Internal unique contract identifier.
	ContractId int `json:"contract_id"`

	// Must be `1`
	ContractUpdate ContractUpdateContractUpdate `json:"contract_update"`

	// Specify limit order to update.
	LimitOrder ContractUpdateLimitOrder `json:"limit_order"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough ContractUpdatePassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// Specify limit order to update.
type ContractUpdateLimitOrder struct {
	// New stop loss value for a contract. To cancel, pass `null`.
	StopLoss *float64 `json:"stop_loss,omitempty"`

	// New take profit value for a contract. To cancel, pass `null`.
	TakeProfit *float64 `json:"take_profit,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type ContractUpdatePassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id in ContractUpdate: required")
	}
	if v, ok := raw["contract_update"]; !ok || v == nil {
		return fmt.Errorf("field contract_update in ContractUpdate: required")
	}
	if v, ok := raw["limit_order"]; !ok || v == nil {
		return fmt.Errorf("field limit_order in ContractUpdate: required")
	}
	type Plain ContractUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ContractUpdate(plain)
	return nil
}
