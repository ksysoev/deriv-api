// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The result of copy from v1 user to v2 client
type ConnectCopyResp struct {
	// Information for the connect_copy
	ConnectCopy *ConnectCopyRespConnectCopy `json:"connect_copy,omitempty"`

	// Echo of the request made.
	EchoReq ConnectCopyRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType ConnectCopyRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Information for the connect_copy
type ConnectCopyRespConnectCopy struct {
	// Status of copy from v1 to v2
	Status *ConnectCopyRespConnectCopyStatus `json:"status,omitempty"`
}

type ConnectCopyRespConnectCopyStatus string

const ConnectCopyRespConnectCopyStatusComplete ConnectCopyRespConnectCopyStatus = "complete"
const ConnectCopyRespConnectCopyStatusFailed ConnectCopyRespConnectCopyStatus = "failed"
const ConnectCopyRespConnectCopyStatusPending ConnectCopyRespConnectCopyStatus = "pending"

var enumValues_ConnectCopyRespConnectCopyStatus = []interface{}{
	"pending",
	"complete",
	"failed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectCopyRespConnectCopyStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectCopyRespConnectCopyStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectCopyRespConnectCopyStatus, v)
	}
	*j = ConnectCopyRespConnectCopyStatus(v)
	return nil
}

// Echo of the request made.
type ConnectCopyRespEchoReq map[string]interface{}

type ConnectCopyRespMsgType string

const ConnectCopyRespMsgTypeConnectCopy ConnectCopyRespMsgType = "connect_copy"

var enumValues_ConnectCopyRespMsgType = []interface{}{
	"connect_copy",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectCopyRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectCopyRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectCopyRespMsgType, v)
	}
	*j = ConnectCopyRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectCopyResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in ConnectCopyResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in ConnectCopyResp: required")
	}
	type Plain ConnectCopyResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConnectCopyResp(plain)
	return nil
}
