// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type Mt5PasswordChangeMt5PasswordChange int

var enumValues_Mt5PasswordChangeMt5PasswordChange = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangeMt5PasswordChange) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordChangeMt5PasswordChange {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordChangeMt5PasswordChange, v)
	}
	*j = Mt5PasswordChangeMt5PasswordChange(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5PasswordChangePassthrough map[string]interface{}

type Mt5PasswordChangePasswordType string

var enumValues_Mt5PasswordChangePasswordType = []interface{}{
	"main",
	"investor",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChangePasswordType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5PasswordChangePasswordType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5PasswordChangePasswordType, v)
	}
	*j = Mt5PasswordChangePasswordType(v)
	return nil
}

// To change passwords of the MT5 account.
type Mt5PasswordChange struct {
	// MT5 user login
	Login string `json:"login"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	Mt5PasswordChange Mt5PasswordChangeMt5PasswordChange `json:"mt5_password_change"`

	// New password of the account. For validation (Accepts any printable ASCII
	// character. Must be within 8-25 characters, and include numbers, lowercase and
	// uppercase letters. Must not be the same as the user's email address).
	NewPassword string `json:"new_password"`

	// Old password for validation (non-empty string, accepts any printable ASCII
	// character)
	OldPassword string `json:"old_password"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5PasswordChangePassthrough `json:"passthrough,omitempty"`

	// [Optional] Type of the password to change.
	PasswordType Mt5PasswordChangePasswordType `json:"password_type,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

const Mt5PasswordChangePasswordTypeInvestor Mt5PasswordChangePasswordType = "investor"
const Mt5PasswordChangePasswordTypeMain Mt5PasswordChangePasswordType = "main"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5PasswordChange) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["login"]; !ok || v == nil {
		return fmt.Errorf("field login in Mt5PasswordChange: required")
	}
	if v, ok := raw["mt5_password_change"]; !ok || v == nil {
		return fmt.Errorf("field mt5_password_change in Mt5PasswordChange: required")
	}
	if v, ok := raw["new_password"]; !ok || v == nil {
		return fmt.Errorf("field new_password in Mt5PasswordChange: required")
	}
	if v, ok := raw["old_password"]; !ok || v == nil {
		return fmt.Errorf("field old_password in Mt5PasswordChange: required")
	}
	type Plain Mt5PasswordChange
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["password_type"]; !ok || v == nil {
		plain.PasswordType = "main"
	}
	*j = Mt5PasswordChange(plain)
	return nil
}
