// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"

// Start copy trader bets
type CopyStart struct {
	// [Optional] Used to set assets to be copied. E.x ["frxUSDJPY", "R_50"]
	Assets interface{} `json:"assets,omitempty"`

	// API tokens identifying the accounts of trader which will be used to copy trades
	CopyStart string `json:"copy_start"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to set maximum trade stake to be copied.
	MaxTradeStake *float64 `json:"max_trade_stake,omitempty"`

	// [Optional] Used to set minimal trade stake to be copied.
	MinTradeStake *float64 `json:"min_trade_stake,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CopyStartPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Used to set trade types to be copied. E.x ["CALL", "PUT"]
	TradeTypes interface{} `json:"trade_types,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CopyStartPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopyStart) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["copy_start"]; raw != nil && !ok {
		return fmt.Errorf("field copy_start in CopyStart: required")
	}
	type Plain CopyStart
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopyStart(plain)
	return nil
}
