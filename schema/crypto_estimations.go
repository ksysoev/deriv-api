// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type CryptoEstimationsCryptoEstimations int

var enumValues_CryptoEstimationsCryptoEstimations = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimationsCryptoEstimations) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoEstimationsCryptoEstimations {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoEstimationsCryptoEstimations, v)
	}
	*j = CryptoEstimationsCryptoEstimations(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type CryptoEstimationsPassthrough map[string]interface{}

type CryptoEstimationsSubscribe int

var enumValues_CryptoEstimationsSubscribe = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimationsSubscribe) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CryptoEstimationsSubscribe {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CryptoEstimationsSubscribe, v)
	}
	*j = CryptoEstimationsSubscribe(v)
	return nil
}

// Get the current estimations for cryptocurrencies. E.g. Withdrawal fee.
type CryptoEstimations struct {
	// Must be `1`
	CryptoEstimations CryptoEstimationsCryptoEstimations `json:"crypto_estimations"`

	// Cryptocurrency code for which fee estimation is provided.
	CurrencyCode string `json:"currency_code"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough CryptoEstimationsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] If set to 1, will send updates whenever there is an update to crypto
	// estimations.
	Subscribe *CryptoEstimationsSubscribe `json:"subscribe,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CryptoEstimations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["crypto_estimations"]; !ok || v == nil {
		return fmt.Errorf("field crypto_estimations in CryptoEstimations: required")
	}
	if v, ok := raw["currency_code"]; !ok || v == nil {
		return fmt.Errorf("field currency_code in CryptoEstimations: required")
	}
	type Plain CryptoEstimations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CryptoEstimations(plain)
	return nil
}
