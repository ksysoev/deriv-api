// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Result of the P2P order disputing.
type P2POrderDisputeResp struct {
	// Echo of the request made.
	EchoReq P2POrderDisputeRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType P2POrderDisputeRespMsgType `json:"msg_type"`

	// Details of the disputed order.
	P2POrderDispute *P2POrderDisputeRespP2POrderDispute `json:"p2p_order_dispute,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type P2POrderDisputeRespEchoReq map[string]interface{}

type P2POrderDisputeRespMsgType string

const P2POrderDisputeRespMsgTypeP2POrderDispute P2POrderDisputeRespMsgType = "p2p_order_dispute"

// Details of the disputed order.
type P2POrderDisputeRespP2POrderDispute struct {
	// The currency of order.
	AccountCurrency string `json:"account_currency"`

	// Details of the advert for this order.
	AdvertDetails P2POrderDisputeRespP2POrderDisputeAdvertDetails `json:"advert_details"`

	// Details of the advertiser for this order.
	AdvertiserDetails P2POrderDisputeRespP2POrderDisputeAdvertiserDetails `json:"advertiser_details"`

	// The amount of the order.
	Amount float64 `json:"amount"`

	// The amount of the order, formatted to appropriate decimal places.
	AmountDisplay string `json:"amount_display"`

	// The URL to be used to initialise the chat for this order.
	ChatChannelUrl string `json:"chat_channel_url"`

	// Details of the client who created the order.
	ClientDetails P2POrderDisputeRespP2POrderDisputeClientDetails `json:"client_details"`

	// Seller contact information.
	ContactInfo string `json:"contact_info"`

	// The epoch time of the order creation.
	CreatedTime int `json:"created_time"`

	// Details of the order dispute.
	DisputeDetails P2POrderDisputeRespP2POrderDisputeDisputeDetails `json:"dispute_details"`

	// The epoch time in which the order will be expired.
	ExpiryTime int `json:"expiry_time"`

	// The unique identifier for this order.
	Id string `json:"id"`

	// `1` if the order is created for the advert of the current client, otherwise
	// `0`.
	IsIncoming P2POrderDisputeRespP2POrderDisputeIsIncoming `json:"is_incoming"`

	// `1` if a review can be given, otherwise `0`.
	IsReviewable P2POrderDisputeRespP2POrderDisputeIsReviewable `json:"is_reviewable"`

	// `1` if the latest order changes have been seen by the current client, otherwise
	// `0`.
	IsSeen P2POrderDisputeRespP2POrderDisputeIsSeen `json:"is_seen"`

	// Local currency for this order.
	LocalCurrency string `json:"local_currency"`

	// Payment instructions.
	PaymentInfo string `json:"payment_info"`

	// Cost in local currency.
	Price float64 `json:"price"`

	// Cost in local currency, formatted to appropriate decimal places.
	PriceDisplay string `json:"price_display"`

	// Conversion rate of the order.
	Rate float64 `json:"rate"`

	// Conversion rate of the order, formatted to appropriate decimal places.
	RateDisplay string `json:"rate_display"`

	// Current order status.
	Status P2POrderDisputeRespP2POrderDisputeStatus `json:"status"`

	// Whether this is a buy or a sell.
	Type P2POrderDisputeRespP2POrderDisputeType `json:"type"`

	// If blocked for too many failed verification attempts, the epoch time that the
	// block will end.
	VerificationLockoutUntil *int `json:"verification_lockout_until,omitempty"`

	// If a verification request has already been made, the epoch time that another
	// verification request can be made.
	VerificationNextRequest *int `json:"verification_next_request,omitempty"`

	// Indicates that the seller in the process of confirming the order.
	VerificationPending *P2POrderDisputeRespP2POrderDisputeVerificationPending `json:"verification_pending,omitempty"`

	// Epoch time that the current verification token will expire.
	VerificationTokenExpiry *int `json:"verification_token_expiry,omitempty"`
}

// Details of the advert for this order.
type P2POrderDisputeRespP2POrderDisputeAdvertDetails struct {
	// Indicates if this is block trade advert or not.
	BlockTrade P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade `json:"block_trade"`

	// General information about the advert.
	Description string `json:"description"`

	// The unique identifier for the advert.
	Id string `json:"id"`

	// The payment method.
	PaymentMethod interface{} `json:"payment_method"`

	// Type of the advert.
	Type P2POrderDisputeRespP2POrderDisputeAdvertDetailsType `json:"type"`
}

type P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade int

type P2POrderDisputeRespP2POrderDisputeAdvertDetailsType string

const P2POrderDisputeRespP2POrderDisputeAdvertDetailsTypeBuy P2POrderDisputeRespP2POrderDisputeAdvertDetailsType = "buy"
const P2POrderDisputeRespP2POrderDisputeAdvertDetailsTypeSell P2POrderDisputeRespP2POrderDisputeAdvertDetailsType = "sell"

// Details of the advertiser for this order.
type P2POrderDisputeRespP2POrderDisputeAdvertiserDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The advertiser's unique identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline `json:"is_online"`

	// The advertiser's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The advertiser's account identifier.
	Loginid string `json:"loginid"`

	// The advertiser's displayed name.
	Name string `json:"name"`
}

type P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline int

// Details of the client who created the order.
type P2POrderDisputeRespP2POrderDisputeClientDetails struct {
	// The client's first name.
	FirstName *string `json:"first_name,omitempty"`

	// The client's unique P2P identifier.
	Id string `json:"id"`

	// Indicates if the advertiser is currently online.
	IsOnline P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline `json:"is_online"`

	// The client's last name.
	LastName *string `json:"last_name,omitempty"`

	// Epoch of the latest time the advertiser was online, up to 6 months.
	LastOnlineTime interface{} `json:"last_online_time"`

	// The client's account identifier.
	Loginid string `json:"loginid"`

	// The client's displayed name.
	Name string `json:"name"`
}

type P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline int

// Details of the order dispute.
type P2POrderDisputeRespP2POrderDisputeDisputeDetails struct {
	// The dispute reason
	DisputeReason string `json:"dispute_reason"`

	// The loginid of the client who's raising the dispute
	DisputerLoginid string `json:"disputer_loginid"`
}

type P2POrderDisputeRespP2POrderDisputeIsIncoming int

type P2POrderDisputeRespP2POrderDisputeIsReviewable int

type P2POrderDisputeRespP2POrderDisputeIsSeen int

type P2POrderDisputeRespP2POrderDisputeStatus string

const P2POrderDisputeRespP2POrderDisputeStatusBlocked P2POrderDisputeRespP2POrderDisputeStatus = "blocked"
const P2POrderDisputeRespP2POrderDisputeStatusBuyerConfirmed P2POrderDisputeRespP2POrderDisputeStatus = "buyer-confirmed"
const P2POrderDisputeRespP2POrderDisputeStatusCancelled P2POrderDisputeRespP2POrderDisputeStatus = "cancelled"
const P2POrderDisputeRespP2POrderDisputeStatusCompleted P2POrderDisputeRespP2POrderDisputeStatus = "completed"
const P2POrderDisputeRespP2POrderDisputeStatusDisputeCompleted P2POrderDisputeRespP2POrderDisputeStatus = "dispute-completed"
const P2POrderDisputeRespP2POrderDisputeStatusDisputeRefunded P2POrderDisputeRespP2POrderDisputeStatus = "dispute-refunded"
const P2POrderDisputeRespP2POrderDisputeStatusDisputed P2POrderDisputeRespP2POrderDisputeStatus = "disputed"
const P2POrderDisputeRespP2POrderDisputeStatusPending P2POrderDisputeRespP2POrderDisputeStatus = "pending"
const P2POrderDisputeRespP2POrderDisputeStatusRefunded P2POrderDisputeRespP2POrderDisputeStatus = "refunded"
const P2POrderDisputeRespP2POrderDisputeStatusTimedOut P2POrderDisputeRespP2POrderDisputeStatus = "timed-out"

type P2POrderDisputeRespP2POrderDisputeType string

const P2POrderDisputeRespP2POrderDisputeTypeBuy P2POrderDisputeRespP2POrderDisputeType = "buy"
const P2POrderDisputeRespP2POrderDisputeTypeSell P2POrderDisputeRespP2POrderDisputeType = "sell"

type P2POrderDisputeRespP2POrderDisputeVerificationPending int

var enumValues_P2POrderDisputeRespMsgType = []interface{}{
	"p2p_order_dispute",
}
var enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade = []interface{}{
	0,
	1,
}
var enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsType = []interface{}{
	"buy",
	"sell",
}
var enumValues_P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline = []interface{}{
	0,
	1,
}
var enumValues_P2POrderDisputeRespP2POrderDisputeIsIncoming = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeClientDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderDisputeRespP2POrderDisputeClientDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRespP2POrderDisputeClientDetails(plain)
	return nil
}

var enumValues_P2POrderDisputeRespP2POrderDisputeStatus = []interface{}{
	"pending",
	"buyer-confirmed",
	"cancelled",
	"timed-out",
	"blocked",
	"refunded",
	"completed",
	"disputed",
	"dispute-refunded",
	"dispute-completed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeIsSeen) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeIsSeen {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeIsSeen, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeIsSeen(v)
	return nil
}

var enumValues_P2POrderDisputeRespP2POrderDisputeIsSeen = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeIsReviewable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeIsReviewable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeIsReviewable, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeIsReviewable(v)
	return nil
}

var enumValues_P2POrderDisputeRespP2POrderDisputeIsReviewable = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeIsIncoming) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeIsIncoming {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeIsIncoming, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeIsIncoming(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeAdvertiserDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeAdvertDetailsBlockTrade(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeDisputeDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["dispute_reason"]; !ok || v == nil {
		return fmt.Errorf("field dispute_reason: required")
	}
	if v, ok := raw["disputer_loginid"]; !ok || v == nil {
		return fmt.Errorf("field disputer_loginid: required")
	}
	type Plain P2POrderDisputeRespP2POrderDisputeDisputeDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRespP2POrderDisputeDisputeDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeStatus, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeStatus(v)
	return nil
}

var enumValues_P2POrderDisputeRespP2POrderDisputeType = []interface{}{
	"buy",
	"sell",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeType, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeAdvertDetailsType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeAdvertDetailsType, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeAdvertDetailsType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeClientDetailsIsOnline(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeAdvertDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["block_trade"]; !ok || v == nil {
		return fmt.Errorf("field block_trade: required")
	}
	if v, ok := raw["description"]; !ok || v == nil {
		return fmt.Errorf("field description: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["payment_method"]; !ok || v == nil {
		return fmt.Errorf("field payment_method: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderDisputeRespP2POrderDisputeAdvertDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRespP2POrderDisputeAdvertDetails(plain)
	return nil
}

var enumValues_P2POrderDisputeRespP2POrderDisputeVerificationPending = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeVerificationPending) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespP2POrderDisputeVerificationPending {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespP2POrderDisputeVerificationPending, v)
	}
	*j = P2POrderDisputeRespP2POrderDisputeVerificationPending(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_P2POrderDisputeRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_P2POrderDisputeRespMsgType, v)
	}
	*j = P2POrderDisputeRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDispute) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["account_currency"]; !ok || v == nil {
		return fmt.Errorf("field account_currency: required")
	}
	if v, ok := raw["advert_details"]; !ok || v == nil {
		return fmt.Errorf("field advert_details: required")
	}
	if v, ok := raw["advertiser_details"]; !ok || v == nil {
		return fmt.Errorf("field advertiser_details: required")
	}
	if v, ok := raw["amount"]; !ok || v == nil {
		return fmt.Errorf("field amount: required")
	}
	if v, ok := raw["amount_display"]; !ok || v == nil {
		return fmt.Errorf("field amount_display: required")
	}
	if v, ok := raw["chat_channel_url"]; !ok || v == nil {
		return fmt.Errorf("field chat_channel_url: required")
	}
	if v, ok := raw["client_details"]; !ok || v == nil {
		return fmt.Errorf("field client_details: required")
	}
	if v, ok := raw["contact_info"]; !ok || v == nil {
		return fmt.Errorf("field contact_info: required")
	}
	if v, ok := raw["created_time"]; !ok || v == nil {
		return fmt.Errorf("field created_time: required")
	}
	if v, ok := raw["dispute_details"]; !ok || v == nil {
		return fmt.Errorf("field dispute_details: required")
	}
	if v, ok := raw["expiry_time"]; !ok || v == nil {
		return fmt.Errorf("field expiry_time: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_incoming"]; !ok || v == nil {
		return fmt.Errorf("field is_incoming: required")
	}
	if v, ok := raw["is_reviewable"]; !ok || v == nil {
		return fmt.Errorf("field is_reviewable: required")
	}
	if v, ok := raw["is_seen"]; !ok || v == nil {
		return fmt.Errorf("field is_seen: required")
	}
	if v, ok := raw["local_currency"]; !ok || v == nil {
		return fmt.Errorf("field local_currency: required")
	}
	if v, ok := raw["payment_info"]; !ok || v == nil {
		return fmt.Errorf("field payment_info: required")
	}
	if v, ok := raw["price"]; !ok || v == nil {
		return fmt.Errorf("field price: required")
	}
	if v, ok := raw["price_display"]; !ok || v == nil {
		return fmt.Errorf("field price_display: required")
	}
	if v, ok := raw["rate"]; !ok || v == nil {
		return fmt.Errorf("field rate: required")
	}
	if v, ok := raw["rate_display"]; !ok || v == nil {
		return fmt.Errorf("field rate_display: required")
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain P2POrderDisputeRespP2POrderDispute
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRespP2POrderDispute(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeRespP2POrderDisputeAdvertiserDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["is_online"]; !ok || v == nil {
		return fmt.Errorf("field is_online: required")
	}
	if v, ok := raw["last_online_time"]; !ok || v == nil {
		return fmt.Errorf("field last_online_time: required")
	}
	if v, ok := raw["loginid"]; !ok || v == nil {
		return fmt.Errorf("field loginid: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain P2POrderDisputeRespP2POrderDisputeAdvertiserDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeRespP2POrderDisputeAdvertiserDetails(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *P2POrderDisputeResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain P2POrderDisputeResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = P2POrderDisputeResp(plain)
	return nil
}
