// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve a list of all available underlyings and the corresponding contract
// types and trading duration boundaries. If the user is logged in, only the assets
// available for that user's landing company will be returned.
type TradingDurations struct {
	// Deprecated - Replaced by landing_company_short.
	LandingCompany *TradingDurationsLandingCompany `json:"landing_company,omitempty"`

	// [Optional] If specified, will return only the underlyings for the specified
	// landing company.
	LandingCompanyShort *TradingDurationsLandingCompanyShort `json:"landing_company_short,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough TradingDurationsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingDurations TradingDurationsTradingDurations `json:"trading_durations"`
}

type TradingDurationsLandingCompany string

const TradingDurationsLandingCompanyChampion TradingDurationsLandingCompany = "champion"
const TradingDurationsLandingCompanyChampionVirtual TradingDurationsLandingCompany = "champion-virtual"
const TradingDurationsLandingCompanyIom TradingDurationsLandingCompany = "iom"
const TradingDurationsLandingCompanyMalta TradingDurationsLandingCompany = "malta"
const TradingDurationsLandingCompanyMaltainvest TradingDurationsLandingCompany = "maltainvest"

type TradingDurationsLandingCompanyShort string

const TradingDurationsLandingCompanyShortChampion TradingDurationsLandingCompanyShort = "champion"
const TradingDurationsLandingCompanyShortChampionVirtual TradingDurationsLandingCompanyShort = "champion-virtual"
const TradingDurationsLandingCompanyShortIom TradingDurationsLandingCompanyShort = "iom"
const TradingDurationsLandingCompanyShortMalta TradingDurationsLandingCompanyShort = "malta"
const TradingDurationsLandingCompanyShortMaltainvest TradingDurationsLandingCompanyShort = "maltainvest"
const TradingDurationsLandingCompanyShortSvg TradingDurationsLandingCompanyShort = "svg"
const TradingDurationsLandingCompanyShortVanuatu TradingDurationsLandingCompanyShort = "vanuatu"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsLandingCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsLandingCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsLandingCompany, v)
	}
	*j = TradingDurationsLandingCompany(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsLandingCompanyShort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsLandingCompanyShort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsLandingCompanyShort, v)
	}
	*j = TradingDurationsLandingCompanyShort(v)
	return nil
}

var enumValues_TradingDurationsLandingCompanyShort = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

const TradingDurationsLandingCompanyShortVirtual TradingDurationsLandingCompanyShort = "virtual"
const TradingDurationsLandingCompanyVanuatu TradingDurationsLandingCompany = "vanuatu"
const TradingDurationsLandingCompanySvg TradingDurationsLandingCompany = "svg"
const TradingDurationsLandingCompanyVirtual TradingDurationsLandingCompany = "virtual"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type TradingDurationsPassthrough map[string]interface{}

type TradingDurationsTradingDurations int

var enumValues_TradingDurationsTradingDurations = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsTradingDurations) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsTradingDurations {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsTradingDurations, v)
	}
	*j = TradingDurationsTradingDurations(v)
	return nil
}

var enumValues_TradingDurationsLandingCompany = []interface{}{
	"iom",
	"malta",
	"maltainvest",
	"svg",
	"virtual",
	"vanuatu",
	"champion",
	"champion-virtual",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["trading_durations"]; !ok || v == nil {
		return fmt.Errorf("field trading_durations in TradingDurations: required")
	}
	type Plain TradingDurations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingDurations(plain)
	return nil
}
