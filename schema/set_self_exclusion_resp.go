// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type SetSelfExclusionRespEchoReq map[string]interface{}

type SetSelfExclusionRespMsgType string

var enumValues_SetSelfExclusionRespMsgType = []interface{}{
	"set_self_exclusion",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SetSelfExclusionRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SetSelfExclusionRespMsgType, v)
	}
	*j = SetSelfExclusionRespMsgType(v)
	return nil
}

// A message with User Self-Exclusion
type SetSelfExclusionResp struct {
	// Echo of the request made.
	EchoReq SetSelfExclusionRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType SetSelfExclusionRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// `1` on success
	SetSelfExclusion *int `json:"set_self_exclusion,omitempty"`
}

const SetSelfExclusionRespMsgTypeSetSelfExclusion SetSelfExclusionRespMsgType = "set_self_exclusion"

// UnmarshalJSON implements json.Unmarshaler.
func (j *SetSelfExclusionResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain SetSelfExclusionResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SetSelfExclusionResp(plain)
	return nil
}
