// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Retrieve details of `app_markup` according to criteria specified.
type AppMarkupDetails struct {
	// [Optional] Specific application `app_id` to report on.
	AppId *int `json:"app_id,omitempty"`

	// Must be `1`
	AppMarkupDetails AppMarkupDetailsAppMarkupDetails `json:"app_markup_details"`

	// [Optional] Specific client loginid to report on, like CR12345
	ClientLoginid *string `json:"client_loginid,omitempty"`

	// Start date (epoch or YYYY-MM-DD HH:MM:SS). Results are inclusive of this time.
	DateFrom string `json:"date_from"`

	// End date (epoch or YYYY-MM-DD HH::MM::SS). Results are inclusive of this time.
	DateTo string `json:"date_to"`

	// [Optional] If set to 1, will return `app_markup` transaction details.
	Description *AppMarkupDetailsDescription `json:"description,omitempty"`

	// [Optional] Apply upper limit to count of transactions received.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] The login id of the user. If left unspecified, it defaults to the
	// initial authorized token's login id.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Number of transactions to skip.
	Offset *int `json:"offset,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough AppMarkupDetailsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Sort direction on `transaction_time`. Other fields sort order is
	// ASC.
	Sort AppMarkupDetailsSort `json:"sort,omitempty"`

	// [Optional] One or more of the specified fields to sort on. Default sort field
	// is by `transaction_time`.
	SortFields []AppMarkupDetailsSortFieldsElem `json:"sort_fields,omitempty"`
}

type AppMarkupDetailsAppMarkupDetails int

var enumValues_AppMarkupDetailsAppMarkupDetails = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsAppMarkupDetails) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsAppMarkupDetails {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsAppMarkupDetails, v)
	}
	*j = AppMarkupDetailsAppMarkupDetails(v)
	return nil
}

type AppMarkupDetailsDescription int

var enumValues_AppMarkupDetailsDescription = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsDescription) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsDescription {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsDescription, v)
	}
	*j = AppMarkupDetailsDescription(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type AppMarkupDetailsPassthrough map[string]interface{}

type AppMarkupDetailsSort string

const AppMarkupDetailsSortASC AppMarkupDetailsSort = "ASC"
const AppMarkupDetailsSortDESC AppMarkupDetailsSort = "DESC"

type AppMarkupDetailsSortFieldsElem string

const AppMarkupDetailsSortFieldsElemAppId AppMarkupDetailsSortFieldsElem = "app_id"
const AppMarkupDetailsSortFieldsElemClientLoginid AppMarkupDetailsSortFieldsElem = "client_loginid"
const AppMarkupDetailsSortFieldsElemTransactionTime AppMarkupDetailsSortFieldsElem = "transaction_time"

var enumValues_AppMarkupDetailsSortFieldsElem = []interface{}{
	"app_id",
	"client_loginid",
	"transaction_time",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsSortFieldsElem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsSortFieldsElem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsSortFieldsElem, v)
	}
	*j = AppMarkupDetailsSortFieldsElem(v)
	return nil
}

var enumValues_AppMarkupDetailsSort = []interface{}{
	"ASC",
	"DESC",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetailsSort) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_AppMarkupDetailsSort {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_AppMarkupDetailsSort, v)
	}
	*j = AppMarkupDetailsSort(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AppMarkupDetails) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["app_markup_details"]; raw != nil && !ok {
		return fmt.Errorf("field app_markup_details in AppMarkupDetails: required")
	}
	if _, ok := raw["date_from"]; raw != nil && !ok {
		return fmt.Errorf("field date_from in AppMarkupDetails: required")
	}
	if _, ok := raw["date_to"]; raw != nil && !ok {
		return fmt.Errorf("field date_to in AppMarkupDetails: required")
	}
	type Plain AppMarkupDetails
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 1000.0
	}
	if v, ok := raw["sort"]; !ok || v == nil {
		plain.Sort = "DESC"
	}
	if len(plain.SortFields) > 3 {
		return fmt.Errorf("field %s length: must be <= %d", "sort_fields", 3)
	}
	*j = AppMarkupDetails(plain)
	return nil
}
