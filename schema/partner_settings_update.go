// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with Partner Settings
type PartnerSettingsUpdate struct {
	// [Optional] Company name. Only applicable for partners of type company.
	CompanyName *string `json:"company_name,omitempty"`

	// [Optional] Company registration number. Only applicable for partners of type
	// company.
	CompanyRegistrationNo *string `json:"company_registration_no,omitempty"`

	// [Optional] The login id of the partner account. Mandatory when multiple tokens
	// were provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	PartnerSettingsUpdate PartnerSettingsUpdatePartnerSettingsUpdate `json:"partner_settings_update"`

	// Defines whether this partner is an individual or a company.
	PartnerType *PartnerSettingsUpdatePartnerType `json:"partner_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough PartnerSettingsUpdatePassthrough `json:"passthrough,omitempty"`

	// Name of the provider platform.
	Provider PartnerSettingsUpdateProvider `json:"provider"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Partner's Website URI/Promotional Platform
	Website *string `json:"website,omitempty"`
}

type PartnerSettingsUpdatePartnerSettingsUpdate int

var enumValues_PartnerSettingsUpdatePartnerSettingsUpdate = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsUpdatePartnerSettingsUpdate) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsUpdatePartnerSettingsUpdate {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsUpdatePartnerSettingsUpdate, v)
	}
	*j = PartnerSettingsUpdatePartnerSettingsUpdate(v)
	return nil
}

type PartnerSettingsUpdatePartnerType string

const PartnerSettingsUpdatePartnerTypeCompany PartnerSettingsUpdatePartnerType = "company"
const PartnerSettingsUpdatePartnerTypeIndividual PartnerSettingsUpdatePartnerType = "individual"

var enumValues_PartnerSettingsUpdatePartnerType = []interface{}{
	"individual",
	"company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsUpdatePartnerType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsUpdatePartnerType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsUpdatePartnerType, v)
	}
	*j = PartnerSettingsUpdatePartnerType(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type PartnerSettingsUpdatePassthrough map[string]interface{}

type PartnerSettingsUpdateProvider string

const PartnerSettingsUpdateProviderDynamicworks PartnerSettingsUpdateProvider = "dynamicworks"
const PartnerSettingsUpdateProviderMyaffiliate PartnerSettingsUpdateProvider = "myaffiliate"

var enumValues_PartnerSettingsUpdateProvider = []interface{}{
	"myaffiliate",
	"dynamicworks",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsUpdateProvider) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PartnerSettingsUpdateProvider {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PartnerSettingsUpdateProvider, v)
	}
	*j = PartnerSettingsUpdateProvider(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PartnerSettingsUpdate) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["partner_settings_update"]; raw != nil && !ok {
		return fmt.Errorf("field partner_settings_update in PartnerSettingsUpdate: required")
	}
	if _, ok := raw["provider"]; raw != nil && !ok {
		return fmt.Errorf("field provider in PartnerSettingsUpdate: required")
	}
	type Plain PartnerSettingsUpdate
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = PartnerSettingsUpdate(plain)
	return nil
}
