// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get the list of servers for a trading platform.
type TradingServers struct {
	// [Optional] Trading account type.
	AccountType *TradingServersAccountType `json:"account_type,omitempty"`

	// [Optional] Pass the environment (installation) instance. Currently, there are
	// one demo and two real environments. Defaults to 'all'.
	Environment TradingServersEnvironment `json:"environment,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Market type.
	MarketType TradingServersMarketType `json:"market_type,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough TradingServersPassthrough `json:"passthrough,omitempty"`

	// [Optional] Pass the trading platform name, default to mt5
	Platform TradingServersPlatform `json:"platform,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	TradingServers TradingServersTradingServers `json:"trading_servers"`
}

type TradingServersAccountType string

const TradingServersAccountTypeDemo TradingServersAccountType = "demo"
const TradingServersAccountTypeReal TradingServersAccountType = "real"

var enumValues_TradingServersAccountType = []interface{}{
	"demo",
	"real",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersAccountType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersAccountType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersAccountType, v)
	}
	*j = TradingServersAccountType(v)
	return nil
}

type TradingServersEnvironment string

const TradingServersEnvironmentAll TradingServersEnvironment = "all"
const TradingServersEnvironmentDerivDemo TradingServersEnvironment = "Deriv-Demo"
const TradingServersEnvironmentDerivServer TradingServersEnvironment = "Deriv-Server"
const TradingServersEnvironmentDerivServer02 TradingServersEnvironment = "Deriv-Server-02"
const TradingServersEnvironmentDerivServer03 TradingServersEnvironment = "Deriv-Server-03"

var enumValues_TradingServersEnvironment = []interface{}{
	"all",
	"Deriv-Demo",
	"Deriv-Server",
	"Deriv-Server-02",
	"Deriv-Server-03",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersEnvironment) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersEnvironment {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersEnvironment, v)
	}
	*j = TradingServersEnvironment(v)
	return nil
}

type TradingServersMarketType string

const TradingServersMarketTypeAll TradingServersMarketType = "all"
const TradingServersMarketTypeFinancial TradingServersMarketType = "financial"
const TradingServersMarketTypeSynthetic TradingServersMarketType = "synthetic"

var enumValues_TradingServersMarketType = []interface{}{
	"all",
	"financial",
	"synthetic",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersMarketType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersMarketType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersMarketType, v)
	}
	*j = TradingServersMarketType(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type TradingServersPassthrough map[string]interface{}

type TradingServersPlatform string

const TradingServersPlatformDxtrade TradingServersPlatform = "dxtrade"
const TradingServersPlatformMt5 TradingServersPlatform = "mt5"

var enumValues_TradingServersPlatform = []interface{}{
	"mt5",
	"dxtrade",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersPlatform) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersPlatform {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersPlatform, v)
	}
	*j = TradingServersPlatform(v)
	return nil
}

type TradingServersTradingServers int

var enumValues_TradingServersTradingServers = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServersTradingServers) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingServersTradingServers {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingServersTradingServers, v)
	}
	*j = TradingServersTradingServers(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingServers) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["trading_servers"]; raw != nil && !ok {
		return fmt.Errorf("field trading_servers in TradingServers: required")
	}
	type Plain TradingServers
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["environment"]; !ok || v == nil {
		plain.Environment = "all"
	}
	if v, ok := raw["market_type"]; !ok || v == nil {
		plain.MarketType = "synthetic"
	}
	if v, ok := raw["platform"]; !ok || v == nil {
		plain.Platform = "mt5"
	}
	*j = TradingServers(plain)
	return nil
}
