// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type ForgetAllRespEchoReq map[string]interface{}

type ForgetAllRespMsgType string

var enumValues_ForgetAllRespMsgType = []interface{}{
	"forget_all",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAllRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ForgetAllRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ForgetAllRespMsgType, v)
	}
	*j = ForgetAllRespMsgType(v)
	return nil
}

// The result of forget all request made.
type ForgetAllResp struct {
	// Echo of the request made.
	EchoReq ForgetAllRespEchoReq `json:"echo_req"`

	// IDs of the cancelled streams
	ForgetAll []interface{} `json:"forget_all,omitempty"`

	// Action name of the request made.
	MsgType ForgetAllRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const ForgetAllRespMsgTypeForgetAll ForgetAllRespMsgType = "forget_all"

// UnmarshalJSON implements json.Unmarshaler.
func (j *ForgetAllResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain ForgetAllResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ForgetAllResp(plain)
	return nil
}
