// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Exchange Verification Code Response
type ExchangeVerificationCodeResp struct {
	// Echo of the request made.
	EchoReq ExchangeVerificationCodeRespEchoReq `json:"echo_req"`

	// Exchange Verification Code details
	ExchangeVerificationCode *ExchangeVerificationCodeRespExchangeVerificationCode `json:"exchange_verification_code,omitempty"`

	// Action name of the request made.
	MsgType ExchangeVerificationCodeRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type ExchangeVerificationCodeRespEchoReq map[string]interface{}

// Exchange Verification Code details
type ExchangeVerificationCodeRespExchangeVerificationCode struct {
	// The new code generated after successful verification
	NewVerificationCode string `json:"new_verification_code"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCodeRespExchangeVerificationCode) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["new_verification_code"]; raw != nil && !ok {
		return fmt.Errorf("field new_verification_code in ExchangeVerificationCodeRespExchangeVerificationCode: required")
	}
	type Plain ExchangeVerificationCodeRespExchangeVerificationCode
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeVerificationCodeRespExchangeVerificationCode(plain)
	return nil
}

type ExchangeVerificationCodeRespMsgType string

const ExchangeVerificationCodeRespMsgTypeExchangeVerificationCode ExchangeVerificationCodeRespMsgType = "exchange_verification_code"

var enumValues_ExchangeVerificationCodeRespMsgType = []interface{}{
	"exchange_verification_code",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCodeRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ExchangeVerificationCodeRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ExchangeVerificationCodeRespMsgType, v)
	}
	*j = ExchangeVerificationCodeRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ExchangeVerificationCodeResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in ExchangeVerificationCodeResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in ExchangeVerificationCodeResp: required")
	}
	type Plain ExchangeVerificationCodeResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ExchangeVerificationCodeResp(plain)
	return nil
}
