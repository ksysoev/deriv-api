// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Specify a currency to receive a list of events related to that specific
// currency. For example, specifying USD will return a list of USD-related events.
// If the currency is omitted, you will receive a list for all currencies.
type EconomicCalendar struct {
	// [Optional] Currency symbol.
	Currency *string `json:"currency,omitempty"`

	// Must be `1`
	EconomicCalendar EconomicCalendarEconomicCalendar `json:"economic_calendar"`

	// [Optional] End date.
	EndDate *int `json:"end_date,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough EconomicCalendarPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// [Optional] Start date.
	StartDate *int `json:"start_date,omitempty"`
}

type EconomicCalendarEconomicCalendar int

var enumValues_EconomicCalendarEconomicCalendar = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendarEconomicCalendar) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EconomicCalendarEconomicCalendar {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EconomicCalendarEconomicCalendar, v)
	}
	*j = EconomicCalendarEconomicCalendar(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type EconomicCalendarPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EconomicCalendar) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["economic_calendar"]; raw != nil && !ok {
		return fmt.Errorf("field economic_calendar in EconomicCalendar: required")
	}
	type Plain EconomicCalendar
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = EconomicCalendar(plain)
	return nil
}
