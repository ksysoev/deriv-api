// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Return transaction updates
type TransactionResp struct {
	// Echo of the request made.
	EchoReq TransactionRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TransactionRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *TransactionRespSubscription `json:"subscription,omitempty"`

	// Realtime stream of user transaction updates.
	Transaction *TransactionRespTransaction `json:"transaction,omitempty"`
}

// Echo of the request made.
type TransactionRespEchoReq map[string]interface{}

type TransactionRespMsgType string

const TransactionRespMsgTypeTransaction TransactionRespMsgType = "transaction"

var enumValues_TransactionRespMsgType = []interface{}{
	"transaction",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionRespMsgType, v)
	}
	*j = TransactionRespMsgType(v)
	return nil
}

// For subscription requests only.
type TransactionRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in TransactionRespSubscription: required")
	}
	type Plain TransactionRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionRespSubscription(plain)
	return nil
}

// Realtime stream of user transaction updates.
type TransactionRespTransaction struct {
	// The transaction type.
	Action *TransactionRespTransactionAction `json:"action,omitempty"`

	// It is the amount of transaction performed.
	Amount *float64 `json:"amount,omitempty"`

	// Balance amount
	Balance *float64 `json:"balance,omitempty"`

	// Barrier of the contract. Only applicable to single barrier contracts. Could be
	// undefined if a contract does not have a barrier.
	Barrier interface{} `json:"barrier,omitempty"`

	// It is the contract ID.
	ContractId *int `json:"contract_id,omitempty"`

	// Transaction currency
	Currency *string `json:"currency,omitempty"`

	// Epoch value of the expiry time of the contract. Please note that in case of buy
	// transaction this is approximate value not exact one.
	DateExpiry *int `json:"date_expiry,omitempty"`

	// Display name of symbol
	DisplayName *string `json:"display_name,omitempty"`

	// The high barrier of a contract. Only applicable to double barrier contracts.
	HighBarrier interface{} `json:"high_barrier,omitempty"`

	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id *string `json:"id,omitempty"`

	// Description of contract purchased
	Longcode *string `json:"longcode,omitempty"`

	// The low barrier of a contract. Only applicable to double barrier contracts.
	LowBarrier *string `json:"low_barrier,omitempty"`

	// Time at which contract was purchased, present only for sell transaction
	PurchaseTime *int `json:"purchase_time,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// at the loss specified by the user.
	StopLoss *string `json:"stop_loss,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// when the value of the contract is close to zero. This is set by the us.
	StopOut *string `json:"stop_out,omitempty"`

	// Symbol code
	Symbol *string `json:"symbol,omitempty"`

	// The pip-sized target spot price where the contract will be closed automatically
	// at the profit specified by the user.
	TakeProfit *string `json:"take_profit,omitempty"`

	// It is the transaction ID. Every contract (buy or sell) or payment has a unique
	// ID.
	TransactionId *int `json:"transaction_id,omitempty"`

	// Time at which transaction was performed: for buy it is purchase time, for sell
	// it is sell time.
	TransactionTime *int `json:"transaction_time,omitempty"`
}

type TransactionRespTransactionAction string

const TransactionRespTransactionActionAdjustment TransactionRespTransactionAction = "adjustment"
const TransactionRespTransactionActionBuy TransactionRespTransactionAction = "buy"
const TransactionRespTransactionActionDeposit TransactionRespTransactionAction = "deposit"
const TransactionRespTransactionActionEscrow TransactionRespTransactionAction = "escrow"
const TransactionRespTransactionActionSell TransactionRespTransactionAction = "sell"
const TransactionRespTransactionActionTransfer TransactionRespTransactionAction = "transfer"
const TransactionRespTransactionActionVirtualCredit TransactionRespTransactionAction = "virtual_credit"
const TransactionRespTransactionActionWithdrawal TransactionRespTransactionAction = "withdrawal"

var enumValues_TransactionRespTransactionAction = []interface{}{
	"buy",
	"sell",
	"deposit",
	"withdrawal",
	"escrow",
	"adjustment",
	"virtual_credit",
	"transfer",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionRespTransactionAction) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TransactionRespTransactionAction {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TransactionRespTransactionAction, v)
	}
	*j = TransactionRespTransactionAction(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TransactionResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in TransactionResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in TransactionResp: required")
	}
	type Plain TransactionResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TransactionResp(plain)
	return nil
}
