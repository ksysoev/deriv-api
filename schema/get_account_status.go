// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Get Account Status
type GetAccountStatus struct {
	// Must be `1`
	GetAccountStatus GetAccountStatusGetAccountStatus `json:"get_account_status"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough GetAccountStatusPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

type GetAccountStatusGetAccountStatus int

var enumValues_GetAccountStatusGetAccountStatus = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatusGetAccountStatus) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetAccountStatusGetAccountStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetAccountStatusGetAccountStatus, v)
	}
	*j = GetAccountStatusGetAccountStatus(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type GetAccountStatusPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetAccountStatus) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["get_account_status"]; raw != nil && !ok {
		return fmt.Errorf("field get_account_status in GetAccountStatus: required")
	}
	type Plain GetAccountStatus
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = GetAccountStatus(plain)
	return nil
}
