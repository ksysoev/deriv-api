// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type SellExpiredPassthrough map[string]interface{}

type SellExpiredSellExpired int

var enumValues_SellExpiredSellExpired = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpiredSellExpired) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SellExpiredSellExpired {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SellExpiredSellExpired, v)
	}
	*j = SellExpiredSellExpired(v)
	return nil
}

// This call will try to sell any expired contracts and return the number of sold
// contracts.
type SellExpired struct {
	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough SellExpiredPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Must be `1`
	SellExpired SellExpiredSellExpired `json:"sell_expired"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SellExpired) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["sell_expired"]; !ok || v == nil {
		return fmt.Errorf("field sell_expired in SellExpired: required")
	}
	type Plain SellExpired
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SellExpired(plain)
	return nil
}
