// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

type ContractUpdateHistoryContractUpdateHistory int

var enumValues_ContractUpdateHistoryContractUpdateHistory = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistoryContractUpdateHistory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ContractUpdateHistoryContractUpdateHistory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ContractUpdateHistoryContractUpdateHistory, v)
	}
	*j = ContractUpdateHistoryContractUpdateHistory(v)
	return nil
}

// Request for contract update history.
type ContractUpdateHistory struct {
	// Internal unique contract identifier.
	ContractId int `json:"contract_id"`

	// Must be `1`
	ContractUpdateHistory ContractUpdateHistoryContractUpdateHistory `json:"contract_update_history"`

	// [Optional] Maximum number of historical updates to receive.
	Limit float64 `json:"limit,omitempty"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough ContractUpdateHistoryPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type ContractUpdateHistoryPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ContractUpdateHistory) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id: required")
	}
	if v, ok := raw["contract_update_history"]; !ok || v == nil {
		return fmt.Errorf("field contract_update_history: required")
	}
	type Plain ContractUpdateHistory
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["limit"]; !ok || v == nil {
		plain.Limit = 500
	}
	*j = ContractUpdateHistory(plain)
	return nil
}
