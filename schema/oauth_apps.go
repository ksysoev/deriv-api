// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

type OauthAppsOauthApps int

var enumValues_OauthAppsOauthApps = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthAppsOauthApps) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_OauthAppsOauthApps {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_OauthAppsOauthApps, v)
	}
	*j = OauthAppsOauthApps(v)
	return nil
}

// List all my used OAuth applications.
type OauthApps struct {
	// Must be `1`
	OauthApps OauthAppsOauthApps `json:"oauth_apps"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field. Maximum size is 3500 bytes.
	Passthrough OauthAppsPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field. Maximum size is 3500 bytes.
type OauthAppsPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *OauthApps) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["oauth_apps"]; !ok || v == nil {
		return fmt.Errorf("field oauth_apps in OauthApps: required")
	}
	type Plain OauthApps
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = OauthApps(plain)
	return nil
}
