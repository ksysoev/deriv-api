// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This call allows deposit into MT5 account from Binary account.
type Mt5Deposit struct {
	// Amount to deposit (in the currency of from_binary); min = $1 or an equivalent
	// amount, max = $20000 or an equivalent amount
	Amount *float64 `json:"amount,omitempty"`

	// Binary account loginid to transfer money from
	FromBinary *string `json:"from_binary,omitempty"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	Mt5Deposit Mt5DepositMt5Deposit `json:"mt5_deposit"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5DepositPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// MT5 account login to deposit money to
	ToMt5 string `json:"to_mt5"`
}

type Mt5DepositMt5Deposit int

var enumValues_Mt5DepositMt5Deposit = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5DepositMt5Deposit) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5DepositMt5Deposit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5DepositMt5Deposit, v)
	}
	*j = Mt5DepositMt5Deposit(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5DepositPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5Deposit) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["mt5_deposit"]; raw != nil && !ok {
		return fmt.Errorf("field mt5_deposit in Mt5Deposit: required")
	}
	if _, ok := raw["to_mt5"]; raw != nil && !ok {
		return fmt.Errorf("field to_mt5 in Mt5Deposit: required")
	}
	type Plain Mt5Deposit
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5Deposit(plain)
	return nil
}
