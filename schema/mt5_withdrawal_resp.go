// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "reflect"
import "encoding/json"

// Echo of the request made.
type Mt5WithdrawalRespEchoReq map[string]interface{}

type Mt5WithdrawalRespMsgType string

var enumValues_Mt5WithdrawalRespMsgType = []interface{}{
	"mt5_withdrawal",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5WithdrawalRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5WithdrawalRespMsgType, v)
	}
	*j = Mt5WithdrawalRespMsgType(v)
	return nil
}

// The result of MT5 withdrawal request made.
type Mt5WithdrawalResp struct {
	// Deposit reference ID of Binary account.
	BinaryTransactionId *int `json:"binary_transaction_id,omitempty"`

	// Echo of the request made.
	EchoReq Mt5WithdrawalRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType Mt5WithdrawalRespMsgType `json:"msg_type"`

	// `1` on success
	Mt5Withdrawal *int `json:"mt5_withdrawal,omitempty"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

const Mt5WithdrawalRespMsgTypeMt5Withdrawal Mt5WithdrawalRespMsgType = "mt5_withdrawal"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type: required")
	}
	type Plain Mt5WithdrawalResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5WithdrawalResp(plain)
	return nil
}
