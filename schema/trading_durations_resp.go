// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// A message with trading duration information for symbol and contract
// combinations.
type TradingDurationsResp struct {
	// Echo of the request made.
	EchoReq TradingDurationsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType TradingDurationsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// List of underlyings by their display name and symbol followed by their
	// available contract types and trading duration boundaries.
	TradingDurations []TradingDurationsRespTradingDurationsElem `json:"trading_durations,omitempty"`
}

// Echo of the request made.
type TradingDurationsRespEchoReq map[string]interface{}

type TradingDurationsRespMsgType string

const TradingDurationsRespMsgTypeTradingDurations TradingDurationsRespMsgType = "trading_durations"

var enumValues_TradingDurationsRespMsgType = []interface{}{
	"trading_durations",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TradingDurationsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TradingDurationsRespMsgType, v)
	}
	*j = TradingDurationsRespMsgType(v)
	return nil
}

type TradingDurationsRespTradingDurationsElem struct {
	// Available contract types and trading duration boundaries
	Data []TradingDurationsRespTradingDurationsElemDataElem `json:"data,omitempty"`

	// The market in which the underlyings listed in `symbol` located.
	Market *TradingDurationsRespTradingDurationsElemMarket `json:"market,omitempty"`

	// The submarket in which the underlyings listed in `symbol` located.
	Submarket *TradingDurationsRespTradingDurationsElemSubmarket `json:"submarket,omitempty"`
}

type TradingDurationsRespTradingDurationsElemDataElem struct {
	// The market in which the underlyings listed in `symbol` located.
	Market *TradingDurationsRespTradingDurationsElemDataElemMarket `json:"market,omitempty"`

	// The submarket in which the underlyings listed in `symbol` located.
	Submarket *TradingDurationsRespTradingDurationsElemDataElemSubmarket `json:"submarket,omitempty"`

	// List of underlying symbols.
	Symbol []TradingDurationsRespTradingDurationsElemDataElemSymbolElem `json:"symbol,omitempty"`

	// List of trade durations available for symbols and contract combinations.
	TradeDurations []TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElem `json:"trade_durations,omitempty"`
}

// The market in which the underlyings listed in `symbol` located.
type TradingDurationsRespTradingDurationsElemDataElemMarket struct {
	// Translated market name.
	DisplayName *string `json:"display_name,omitempty"`

	// Market name.
	Name *string `json:"name,omitempty"`
}

// The submarket in which the underlyings listed in `symbol` located.
type TradingDurationsRespTradingDurationsElemDataElemSubmarket struct {
	// Translated submarket name.
	DisplayName *string `json:"display_name,omitempty"`

	// Submarket name.
	Name *string `json:"name,omitempty"`
}

type TradingDurationsRespTradingDurationsElemDataElemSymbolElem struct {
	// Translated symbol name.
	DisplayName *string `json:"display_name,omitempty"`

	// Symbol name.
	Name *string `json:"name,omitempty"`
}

type TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElem struct {
	// List of trade durations available for the symbols.
	Durations []TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElemDurationsElem `json:"durations,omitempty"`

	// List of trade types available for the symbols.
	TradeType *TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElemTradeType `json:"trade_type,omitempty"`
}

type TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElemDurationsElem struct {
	// Translated duration type name.
	DisplayName *string `json:"display_name,omitempty"`

	// Maximum allowed duration for this type.
	Max *int `json:"max,omitempty"`

	// Minimum allowed duration for this type.
	Min *int `json:"min,omitempty"`

	// Duration type name.
	Name *string `json:"name,omitempty"`
}

// List of trade types available for the symbols.
type TradingDurationsRespTradingDurationsElemDataElemTradeDurationsElemTradeType struct {
	// Translated trade type name.
	DisplayName *string `json:"display_name,omitempty"`

	// Trade type name.
	Name *string `json:"name,omitempty"`
}

// The market in which the underlyings listed in `symbol` located.
type TradingDurationsRespTradingDurationsElemMarket struct {
	// Translated market name.
	DisplayName *string `json:"display_name,omitempty"`

	// Market name.
	Name *string `json:"name,omitempty"`
}

// The submarket in which the underlyings listed in `symbol` located.
type TradingDurationsRespTradingDurationsElemSubmarket struct {
	// Translated submarket name.
	DisplayName *string `json:"display_name,omitempty"`

	// Submarket name.
	Name *string `json:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *TradingDurationsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in TradingDurationsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in TradingDurationsResp: required")
	}
	type Plain TradingDurationsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = TradingDurationsResp(plain)
	return nil
}
