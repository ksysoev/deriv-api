// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// This call allows withdrawal from MT5 account to Binary account.
type Mt5Withdrawal struct {
	// Amount to withdraw (in the currency of the MT5 account); min = $1 or an
	// equivalent amount, max = $20000 or an equivalent amount.
	Amount float64 `json:"amount"`

	// MT5 account login to withdraw money from
	FromMt5 string `json:"from_mt5"`

	// [Optional] The login id of the user. Mandatory when multiple tokens were
	// provided during authorize.
	Loginid *string `json:"loginid,omitempty"`

	// Must be `1`
	Mt5Withdrawal Mt5WithdrawalMt5Withdrawal `json:"mt5_withdrawal"`

	// [Optional] Used to pass data through the websocket, which may be retrieved via
	// the `echo_req` output field.
	Passthrough Mt5WithdrawalPassthrough `json:"passthrough,omitempty"`

	// [Optional] Used to map request to response.
	ReqId *int `json:"req_id,omitempty"`

	// Binary account loginid to transfer money to
	ToBinary string `json:"to_binary"`
}

type Mt5WithdrawalMt5Withdrawal int

var enumValues_Mt5WithdrawalMt5Withdrawal = []interface{}{
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5WithdrawalMt5Withdrawal) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Mt5WithdrawalMt5Withdrawal {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Mt5WithdrawalMt5Withdrawal, v)
	}
	*j = Mt5WithdrawalMt5Withdrawal(v)
	return nil
}

// [Optional] Used to pass data through the websocket, which may be retrieved via
// the `echo_req` output field.
type Mt5WithdrawalPassthrough map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Mt5Withdrawal) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["amount"]; raw != nil && !ok {
		return fmt.Errorf("field amount in Mt5Withdrawal: required")
	}
	if _, ok := raw["from_mt5"]; raw != nil && !ok {
		return fmt.Errorf("field from_mt5 in Mt5Withdrawal: required")
	}
	if _, ok := raw["mt5_withdrawal"]; raw != nil && !ok {
		return fmt.Errorf("field mt5_withdrawal in Mt5Withdrawal: required")
	}
	if _, ok := raw["to_binary"]; raw != nil && !ok {
		return fmt.Errorf("field to_binary in Mt5Withdrawal: required")
	}
	type Plain Mt5Withdrawal
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Mt5Withdrawal(plain)
	return nil
}
