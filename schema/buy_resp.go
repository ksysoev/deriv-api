// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// Receipt confirmation for the purchase
type BuyRespBuy struct {
	// The new account balance after completion of the purchase
	BalanceAfter float64 `json:"balance_after"`

	// Actual effected purchase price
	BuyPrice float64 `json:"buy_price"`

	// Internal contract identifier
	ContractId int `json:"contract_id"`

	// The description of contract purchased
	Longcode string `json:"longcode"`

	// Proposed payout value
	Payout float64 `json:"payout"`

	// Epoch value of the transaction purchase time
	PurchaseTime int `json:"purchase_time"`

	// Compact description of the contract purchased
	Shortcode string `json:"shortcode"`

	// Epoch value showing the expected start time of the contract
	StartTime int `json:"start_time"`

	// Internal transaction identifier
	TransactionId int `json:"transaction_id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRespBuy) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["balance_after"]; !ok || v == nil {
		return fmt.Errorf("field balance_after in BuyRespBuy: required")
	}
	if v, ok := raw["buy_price"]; !ok || v == nil {
		return fmt.Errorf("field buy_price in BuyRespBuy: required")
	}
	if v, ok := raw["contract_id"]; !ok || v == nil {
		return fmt.Errorf("field contract_id in BuyRespBuy: required")
	}
	if v, ok := raw["longcode"]; !ok || v == nil {
		return fmt.Errorf("field longcode in BuyRespBuy: required")
	}
	if v, ok := raw["payout"]; !ok || v == nil {
		return fmt.Errorf("field payout in BuyRespBuy: required")
	}
	if v, ok := raw["purchase_time"]; !ok || v == nil {
		return fmt.Errorf("field purchase_time in BuyRespBuy: required")
	}
	if v, ok := raw["shortcode"]; !ok || v == nil {
		return fmt.Errorf("field shortcode in BuyRespBuy: required")
	}
	if v, ok := raw["start_time"]; !ok || v == nil {
		return fmt.Errorf("field start_time in BuyRespBuy: required")
	}
	if v, ok := raw["transaction_id"]; !ok || v == nil {
		return fmt.Errorf("field transaction_id in BuyRespBuy: required")
	}
	type Plain BuyRespBuy
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyRespBuy(plain)
	return nil
}

// Echo of the request made.
type BuyRespEchoReq map[string]interface{}

type BuyRespMsgType string

var enumValues_BuyRespMsgType = []interface{}{
	"buy",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BuyRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BuyRespMsgType, v)
	}
	*j = BuyRespMsgType(v)
	return nil
}

const BuyRespMsgTypeBuy BuyRespMsgType = "buy"

// For subscription requests only.
type BuyRespSubscription struct {
	// A per-connection unique identifier. Can be passed to the `forget` API call to
	// unsubscribe.
	Id string `json:"id"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyRespSubscription) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in BuyRespSubscription: required")
	}
	type Plain BuyRespSubscription
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyRespSubscription(plain)
	return nil
}

// A message with transaction results is received
type BuyResp struct {
	// Receipt confirmation for the purchase
	Buy *BuyRespBuy `json:"buy,omitempty"`

	// Echo of the request made.
	EchoReq BuyRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType BuyRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`

	// For subscription requests only.
	Subscription *BuyRespSubscription `json:"subscription,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BuyResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["echo_req"]; !ok || v == nil {
		return fmt.Errorf("field echo_req in BuyResp: required")
	}
	if v, ok := raw["msg_type"]; !ok || v == nil {
		return fmt.Errorf("field msg_type in BuyResp: required")
	}
	type Plain BuyResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BuyResp(plain)
	return nil
}
