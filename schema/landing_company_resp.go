// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// After first deposit requirements
type AfterFirstDepositRequirements struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type ComplianceRequirements struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyInfo struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyInfoChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyInfoCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyInfoHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LegalRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyInfoSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyInfoTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyInfoChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyInfoCurrencyConfig map[string]interface{}

type LandingCompanyInfoHasRealityCheck int

var enumValues_LandingCompanyInfoHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyInfoHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyInfoHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyInfoHasRealityCheck, v)
	}
	*j = LandingCompanyInfoHasRealityCheck(v)
	return nil
}

type LandingCompanyInfoSupportProfessionalClient int

var enumValues_LandingCompanyInfoSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyInfoSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyInfoSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyInfoSupportProfessionalClient, v)
	}
	*j = LandingCompanyInfoSupportProfessionalClient(v)
	return nil
}

type LandingCompanyInfoTinNotMandatory int

var enumValues_LandingCompanyInfoTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyInfoTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyInfoTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyInfoTinNotMandatory, v)
	}
	*j = LandingCompanyInfoTinNotMandatory(v)
	return nil
}

// Returns the Landing Company for clients of a given country.
type LandingCompanyResp struct {
	// Echo of the request made.
	EchoReq LandingCompanyRespEchoReq `json:"echo_req"`

	// Landing Company
	LandingCompany *LandingCompanyRespLandingCompany `json:"landing_company,omitempty"`

	// Action name of the request made.
	MsgType LandingCompanyRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Echo of the request made.
type LandingCompanyRespEchoReq map[string]interface{}

// Landing Company
type LandingCompanyRespLandingCompany struct {
	// Flag to indicate if address parseable or not
	AddressParseable *LandingCompanyRespLandingCompanyAddressParseable `json:"address_parseable,omitempty"`

	// Config for all account types (Synthetic Indices and Financials).
	AllCompany *LandingCompanyRespLandingCompanyAllCompany `json:"all_company,omitempty"`

	// Config structure with document types ,taxRequired ,tin format details.
	Config LandingCompanyRespLandingCompanyConfig `json:"config,omitempty"`

	// Available CTrader accounts.
	Ctrader *LandingCompanyRespLandingCompanyCtrader `json:"ctrader,omitempty"`

	// Available Deriv X all account types (Synthetic Indices and Financials).
	DxtradeAllCompany *LandingCompanyRespLandingCompanyDxtradeAllCompany `json:"dxtrade_all_company,omitempty"`

	// Available Deriv X financial account types (all except Synthetic Indices).
	DxtradeFinancialCompany *LandingCompanyRespLandingCompanyDxtradeFinancialCompany `json:"dxtrade_financial_company,omitempty"`

	// Available Deriv X derived account types (Synthetic Indices).
	DxtradeGamingCompany *LandingCompanyRespLandingCompanyDxtradeGamingCompany `json:"dxtrade_gaming_company,omitempty"`

	// Landing Company for financial contracts (all except Synthetic Indices)
	FinancialCompany *LandingCompanyRespLandingCompanyFinancialCompany `json:"financial_company,omitempty"`

	// Forbidden postcode pattern
	ForbiddenPostcodePattern *string `json:"forbidden_postcode_pattern,omitempty"`

	// Landing Company for derived contracts (Synthetic Indices)
	GamingCompany *LandingCompanyRespLandingCompanyGamingCompany `json:"gaming_company,omitempty"`

	// Country code
	Id *string `json:"id,omitempty"`

	// Flag to indicate if idv is supported or not
	IsIdvSupported *LandingCompanyRespLandingCompanyIsIdvSupported `json:"is_idv_supported,omitempty"`

	// Open mf account lc details.
	LcToOpenMfAccount *string `json:"lc_to_open_mf_account,omitempty"`

	// Minimum age
	MinimumAge *int `json:"minimum_age,omitempty"`

	// Flag to indicate if mt5 age verification detail.
	Mt5AgeVerification *LandingCompanyRespLandingCompanyMt5AgeVerification `json:"mt5_age_verification,omitempty"`

	// Landing Company for MT5 standard combined all Synthetic and financial,
	// currently has Financial as subtype.
	MtAllCompany *LandingCompanyRespLandingCompanyMtAllCompany `json:"mt_all_company,omitempty"`

	// Landing Company for MT5 financial contracts (all except Synthetic Indices),
	// currently divided into Financial STP, Financial (standard) as subtypes.
	MtFinancialCompany *LandingCompanyRespLandingCompanyMtFinancialCompany `json:"mt_financial_company,omitempty"`

	// Landing Company for MT5 standard derived contracts (Synthetic Indices),
	// currently has Financial as subtype.
	MtGamingCompany *LandingCompanyRespLandingCompanyMtGamingCompany `json:"mt_gaming_company,omitempty"`

	// Country name
	Name *string `json:"name,omitempty"`

	// Flag to indicate whether max turnover limit settings.
	NeedSetMaxTurnoverLimit *LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit `json:"need_set_max_turnover_limit,omitempty"`

	// Flag to indicate province settings.
	NoProvince *LandingCompanyRespLandingCompanyNoProvince `json:"no_province,omitempty"`

	// Flag to indicate whether address postcode is required or not.
	RequireAddressPostcode *LandingCompanyRespLandingCompanyRequireAddressPostcode `json:"require_address_postcode,omitempty"`

	// Flag to indicate whether age verification required ofr synthetic or not.
	RequireAgeVerifiedForSynthetic *LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic `json:"require_age_verified_for_synthetic,omitempty"`

	// Flag to indicate whether poi is required.
	RequirePoi *LandingCompanyRespLandingCompanyRequirePoi `json:"require_poi,omitempty"`

	// Flag to indicate whether verification required if age not verified.
	RequireVerificationWhenNotAgeVerified *LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified `json:"require_verification_when_not_age_verified,omitempty"`

	// Flag to indicate whether to skip deposit verifcation or not.
	SkipDepositVerification *LandingCompanyRespLandingCompanySkipDepositVerification `json:"skip_deposit_verification,omitempty"`

	// Virtual Company
	VirtualCompany *string `json:"virtual_company,omitempty"`
}

type LandingCompanyRespLandingCompanyAddressParseable int

var enumValues_LandingCompanyRespLandingCompanyAddressParseable = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyAddressParseable) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyAddressParseable {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyAddressParseable, v)
	}
	*j = LandingCompanyRespLandingCompanyAddressParseable(v)
	return nil
}

type LandingCompanyRespLandingCompanyAllCompany string

const LandingCompanyRespLandingCompanyAllCompanyNone LandingCompanyRespLandingCompanyAllCompany = "none"
const LandingCompanyRespLandingCompanyAllCompanySvg LandingCompanyRespLandingCompanyAllCompany = "svg"

var enumValues_LandingCompanyRespLandingCompanyAllCompany = []interface{}{
	"svg",
	"none",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyAllCompany) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyAllCompany {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyAllCompany, v)
	}
	*j = LandingCompanyRespLandingCompanyAllCompany(v)
	return nil
}

// Config structure with document types ,taxRequired ,tin format details.
type LandingCompanyRespLandingCompanyConfig map[string]interface{}

// Available CTrader accounts.
type LandingCompanyRespLandingCompanyCtrader struct {
	// CTrader all account types (Synthetic Indices and Financials).
	All *LandingCompanyRespLandingCompanyCtraderAll `json:"all,omitempty"`
}

// CTrader all account types (Synthetic Indices and Financials).
type LandingCompanyRespLandingCompanyCtraderAll struct {
	// For standard client
	Standard *LandingCompanyRespLandingCompanyCtraderAllStandard `json:"standard,omitempty"`
}

type LandingCompanyRespLandingCompanyCtraderAllStandard string

const LandingCompanyRespLandingCompanyCtraderAllStandardNone LandingCompanyRespLandingCompanyCtraderAllStandard = "none"
const LandingCompanyRespLandingCompanyCtraderAllStandardSvg LandingCompanyRespLandingCompanyCtraderAllStandard = "svg"

var enumValues_LandingCompanyRespLandingCompanyCtraderAllStandard = []interface{}{
	"svg",
	"none",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyCtraderAllStandard) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyCtraderAllStandard {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyCtraderAllStandard, v)
	}
	*j = LandingCompanyRespLandingCompanyCtraderAllStandard(v)
	return nil
}

// Available Deriv X all account types (Synthetic Indices and Financials).
type LandingCompanyRespLandingCompanyDxtradeAllCompany struct {
	// Landing Company details.
	Standard *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandard struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeAllCompanyStandardTinNotMandatory(v)
	return nil
}

// Available Deriv X financial account types (all except Synthetic Indices).
type LandingCompanyRespLandingCompanyDxtradeFinancialCompany struct {
	// Landing Company details.
	Standard *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandard struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeFinancialCompanyStandardTinNotMandatory(v)
	return nil
}

// Available Deriv X derived account types (Synthetic Indices).
type LandingCompanyRespLandingCompanyDxtradeGamingCompany struct {
	// Landing Company details.
	Standard *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandard `json:"standard,omitempty"`
}

// Landing Company details.
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandard struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyDxtradeGamingCompanyStandardTinNotMandatory(v)
	return nil
}

// Landing Company for financial contracts (all except Synthetic Indices)
type LandingCompanyRespLandingCompanyFinancialCompany struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyFinancialCompanyChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyFinancialCompanyCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types for this Landing Company
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowed account currencies for this Landing Company
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowed markets for this Landing Company
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyFinancialCompanyRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyFinancialCompanyChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyFinancialCompanyCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyFinancialCompanyHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyFinancialCompanyRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyFinancialCompanyRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyFinancialCompanyRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyFinancialCompanyRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyFinancialCompanyRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyFinancialCompanySupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyFinancialCompanyTinNotMandatory(v)
	return nil
}

// Landing Company for derived contracts (Synthetic Indices)
type LandingCompanyRespLandingCompanyGamingCompany struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyGamingCompanyChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyGamingCompanyCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyGamingCompanyRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyGamingCompanyChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyGamingCompanyCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyGamingCompanyHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyGamingCompanyRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyGamingCompanyRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyGamingCompanyRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyGamingCompanyRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyGamingCompanyRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyGamingCompanySupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyGamingCompanyTinNotMandatory(v)
	return nil
}

type LandingCompanyRespLandingCompanyIsIdvSupported int

var enumValues_LandingCompanyRespLandingCompanyIsIdvSupported = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyIsIdvSupported) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyIsIdvSupported {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyIsIdvSupported, v)
	}
	*j = LandingCompanyRespLandingCompanyIsIdvSupported(v)
	return nil
}

type LandingCompanyRespLandingCompanyMt5AgeVerification int

var enumValues_LandingCompanyRespLandingCompanyMt5AgeVerification = []interface{}{
	1,
	0,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMt5AgeVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMt5AgeVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMt5AgeVerification, v)
	}
	*j = LandingCompanyRespLandingCompanyMt5AgeVerification(v)
	return nil
}

// Landing Company for MT5 standard combined all Synthetic and financial, currently
// has Financial as subtype.
type LandingCompanyRespLandingCompanyMtAllCompany struct {
	// Landing Company for MT5 combined all Synthetic and financial
	SwapFree *LandingCompanyInfo `json:"swap_free,omitempty"`

	// Contain details for landing company for zero_spread sub account type.
	ZeroSpread *LandingCompanyInfo `json:"zero_spread,omitempty"`
}

// Landing Company for MT5 financial contracts (all except Synthetic Indices),
// currently divided into Financial STP, Financial (standard) as subtypes.
type LandingCompanyRespLandingCompanyMtFinancialCompany struct {
	// Contain details for landing company for financial subtype. The Financial
	// account is suitable for a wide range of traders, both new and experienced. It
	// gives you mid-range leverage and variable spreads that give you a great deal of
	// flexibility for whatever position you wish to take in the market.
	Financial *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancial `json:"financial,omitempty"`

	// Contain details for landing company for Financial STP subtype. The Financial
	// STP account provides you with tight spreads, higher ticket size and offers a
	// variety of FX pairs from majors to exotics. It is a straight through processing
	// (STP) account with direct access to FX liquidity from various providers.
	FinancialStp *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStp `json:"financial_stp,omitempty"`
}

// Contain details for landing company for financial subtype. The Financial account
// is suitable for a wide range of traders, both new and experienced. It gives you
// mid-range leverage and variable spreads that give you a great deal of
// flexibility for whatever position you wish to take in the market.
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancial struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types for this Landing Company
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowed account currencies for this Landing Company
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowed markets for this Landing Company
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

// Contain details for landing company for Financial STP subtype. The Financial STP
// account provides you with tight spreads, higher ticket size and offers a variety
// of FX pairs from majors to exotics. It is a straight through processing (STP)
// account with direct access to FX liquidity from various providers.
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStp struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types for this Landing Company
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowed account currencies for this Landing Company
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowed markets for this Landing Company
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialStpTinNotMandatory(v)
	return nil
}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyMtFinancialCompanyFinancialTinNotMandatory(v)
	return nil
}

// Landing Company for MT5 standard derived contracts (Synthetic Indices),
// currently has Financial as subtype.
type LandingCompanyRespLandingCompanyMtGamingCompany struct {
	// Landing Company for MT5 derived contracts (Synthetic Indices)
	Financial *LandingCompanyRespLandingCompanyMtGamingCompanyFinancial `json:"financial,omitempty"`
}

// Landing Company for MT5 derived contracts (Synthetic Indices)
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancial struct {
	// Landing Company address
	Address []string `json:"address,omitempty"`

	// Special conditions for changing sensitive fields
	ChangeableFields LandingCompanyRespLandingCompanyMtGamingCompanyFinancialChangeableFields `json:"changeable_fields,omitempty"`

	// Landing Company country of incorporation
	Country *string `json:"country,omitempty"`

	// The configuration of each currency.
	CurrencyConfig LandingCompanyRespLandingCompanyMtGamingCompanyFinancialCurrencyConfig `json:"currency_config,omitempty"`

	// Flag to indicate whether reality check is applicable for this Landing Company.
	// `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives
	// a summary of the client's trades and account balances on a regular basis
	// throughout his session, and is a regulatory requirement for certain Landing
	// Companies.
	HasRealityCheck *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck `json:"has_reality_check,omitempty"`

	// Allowed contract types
	LegalAllowedContractCategories []string `json:"legal_allowed_contract_categories,omitempty"`

	// Allowable currencies
	LegalAllowedCurrencies []string `json:"legal_allowed_currencies,omitempty"`

	// Allowable markets
	LegalAllowedMarkets []string `json:"legal_allowed_markets,omitempty"`

	// Default account currency
	LegalDefaultCurrency *string `json:"legal_default_currency,omitempty"`

	// Landing Company legal name
	Name *string `json:"name,omitempty"`

	// Legal requirements for the Landing Company
	Requirements *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirements `json:"requirements,omitempty"`

	// Landing Company short code
	Shortcode *string `json:"shortcode,omitempty"`

	// Flag that indicates whether the landing company supports professional accounts
	// or not
	SupportProfessionalClient *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient `json:"support_professional_client,omitempty"`

	// Flag that indicates whether tax identifier number is not mandatory for the
	// current country and landing company.
	TinNotMandatory *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory `json:"tin_not_mandatory,omitempty"`
}

// Special conditions for changing sensitive fields
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialChangeableFields map[string]interface{}

// The configuration of each currency.
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialCurrencyConfig map[string]interface{}

type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck int

var enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck, v)
	}
	*j = LandingCompanyRespLandingCompanyMtGamingCompanyFinancialHasRealityCheck(v)
	return nil
}

// Legal requirements for the Landing Company
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirementsAfterFirstDeposit `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirementsCompliance `json:"compliance,omitempty"`

	// Sign up requirements
	Signup []string `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal []string `json:"withdrawal,omitempty"`
}

// After first deposit requirements
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirementsAfterFirstDeposit struct {
	// Financial assessment requirements
	FinancialAssessment []string `json:"financial_assessment,omitempty"`
}

// Compliance requirements
type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialRequirementsCompliance struct {
	// Compliance MT5 requirements
	Mt5 []string `json:"mt5,omitempty"`

	// Compliance tax information requirements
	TaxInformation []string `json:"tax_information,omitempty"`
}

type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient int

var enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient, v)
	}
	*j = LandingCompanyRespLandingCompanyMtGamingCompanyFinancialSupportProfessionalClient(v)
	return nil
}

type LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory int

var enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory, v)
	}
	*j = LandingCompanyRespLandingCompanyMtGamingCompanyFinancialTinNotMandatory(v)
	return nil
}

type LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit int

var enumValues_LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit, v)
	}
	*j = LandingCompanyRespLandingCompanyNeedSetMaxTurnoverLimit(v)
	return nil
}

type LandingCompanyRespLandingCompanyNoProvince int

var enumValues_LandingCompanyRespLandingCompanyNoProvince = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyNoProvince) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyNoProvince {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyNoProvince, v)
	}
	*j = LandingCompanyRespLandingCompanyNoProvince(v)
	return nil
}

type LandingCompanyRespLandingCompanyRequireAddressPostcode int

var enumValues_LandingCompanyRespLandingCompanyRequireAddressPostcode = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyRequireAddressPostcode) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyRequireAddressPostcode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyRequireAddressPostcode, v)
	}
	*j = LandingCompanyRespLandingCompanyRequireAddressPostcode(v)
	return nil
}

type LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic int

var enumValues_LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic, v)
	}
	*j = LandingCompanyRespLandingCompanyRequireAgeVerifiedForSynthetic(v)
	return nil
}

type LandingCompanyRespLandingCompanyRequirePoi int

var enumValues_LandingCompanyRespLandingCompanyRequirePoi = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyRequirePoi) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyRequirePoi {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyRequirePoi, v)
	}
	*j = LandingCompanyRespLandingCompanyRequirePoi(v)
	return nil
}

type LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified int

var enumValues_LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified, v)
	}
	*j = LandingCompanyRespLandingCompanyRequireVerificationWhenNotAgeVerified(v)
	return nil
}

type LandingCompanyRespLandingCompanySkipDepositVerification int

var enumValues_LandingCompanyRespLandingCompanySkipDepositVerification = []interface{}{
	0,
	1,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespLandingCompanySkipDepositVerification) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespLandingCompanySkipDepositVerification {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespLandingCompanySkipDepositVerification, v)
	}
	*j = LandingCompanyRespLandingCompanySkipDepositVerification(v)
	return nil
}

type LandingCompanyRespMsgType string

const LandingCompanyRespMsgTypeLandingCompany LandingCompanyRespMsgType = "landing_company"

var enumValues_LandingCompanyRespMsgType = []interface{}{
	"landing_company",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_LandingCompanyRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_LandingCompanyRespMsgType, v)
	}
	*j = LandingCompanyRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LandingCompanyResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in LandingCompanyResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in LandingCompanyResp: required")
	}
	type Plain LandingCompanyResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = LandingCompanyResp(plain)
	return nil
}

// Legal requirements for the Landing Company
type LegalRequirements struct {
	// After first deposit requirements
	AfterFirstDeposit *AfterFirstDepositRequirements `json:"after_first_deposit,omitempty"`

	// Compliance requirements
	Compliance *ComplianceRequirements `json:"compliance,omitempty"`

	// Sign up requirements
	Signup SignUpRequirements `json:"signup,omitempty"`

	// Withdrawal requirements
	Withdrawal WithdrawalRequirements `json:"withdrawal,omitempty"`
}

// Sign up requirements
type SignUpRequirements []string

// Withdrawal requirements
type WithdrawalRequirements []string
