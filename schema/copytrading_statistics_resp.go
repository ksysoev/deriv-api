// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "encoding/json"
import "fmt"
import "reflect"

// The statistics of the trader.
type CopytradingStatisticsResp struct {
	// Statistics of the trader
	CopytradingStatistics *CopytradingStatisticsRespCopytradingStatistics `json:"copytrading_statistics,omitempty"`

	// Echo of the request made.
	EchoReq CopytradingStatisticsRespEchoReq `json:"echo_req"`

	// Action name of the request made.
	MsgType CopytradingStatisticsRespMsgType `json:"msg_type"`

	// Optional field sent in request to map to response, present only when request
	// contains `req_id`.
	ReqId *int `json:"req_id,omitempty"`
}

// Statistics of the trader
type CopytradingStatisticsRespCopytradingStatistics struct {
	// This is the epoch the investor started trading.
	ActiveSince int `json:"active_since"`

	// Average seconds of keeping positions open.
	AvgDuration int `json:"avg_duration"`

	// Average loss of trades in percentage.
	AvgLoss float64 `json:"avg_loss"`

	// Average profitable trades in percentage.
	AvgProfit float64 `json:"avg_profit"`

	// Number of copiers for this trader.
	Copiers float64 `json:"copiers"`

	// Represents the net change in equity for a 12-month period.
	Last12MonthsProfitableTrades float64 `json:"last_12months_profitable_trades"`

	// Represents the net change in equity per month.
	MonthlyProfitableTrades CopytradingStatisticsRespCopytradingStatisticsMonthlyProfitableTrades `json:"monthly_profitable_trades"`

	// Trader performance probability.
	PerformanceProbability float64 `json:"performance_probability"`

	// Total number of trades for all time.
	TotalTrades int `json:"total_trades"`

	// Represents the portfolio distribution by markets.
	TradesBreakdown CopytradingStatisticsRespCopytradingStatisticsTradesBreakdown `json:"trades_breakdown"`

	// Number of profit trades in percentage.
	TradesProfitable float64 `json:"trades_profitable"`

	// Represents the net change in equity per year.
	YearlyProfitableTrades CopytradingStatisticsRespCopytradingStatisticsYearlyProfitableTrades `json:"yearly_profitable_trades,omitempty"`
}

// Represents the net change in equity per month.
type CopytradingStatisticsRespCopytradingStatisticsMonthlyProfitableTrades map[string]interface{}

// Represents the portfolio distribution by markets.
type CopytradingStatisticsRespCopytradingStatisticsTradesBreakdown map[string]interface{}

// Represents the net change in equity per year.
type CopytradingStatisticsRespCopytradingStatisticsYearlyProfitableTrades map[string]interface{}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsRespCopytradingStatistics) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["active_since"]; raw != nil && !ok {
		return fmt.Errorf("field active_since in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["avg_duration"]; raw != nil && !ok {
		return fmt.Errorf("field avg_duration in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["avg_loss"]; raw != nil && !ok {
		return fmt.Errorf("field avg_loss in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["avg_profit"]; raw != nil && !ok {
		return fmt.Errorf("field avg_profit in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["copiers"]; raw != nil && !ok {
		return fmt.Errorf("field copiers in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["last_12months_profitable_trades"]; raw != nil && !ok {
		return fmt.Errorf("field last_12months_profitable_trades in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["monthly_profitable_trades"]; raw != nil && !ok {
		return fmt.Errorf("field monthly_profitable_trades in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["performance_probability"]; raw != nil && !ok {
		return fmt.Errorf("field performance_probability in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["total_trades"]; raw != nil && !ok {
		return fmt.Errorf("field total_trades in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["trades_breakdown"]; raw != nil && !ok {
		return fmt.Errorf("field trades_breakdown in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	if _, ok := raw["trades_profitable"]; raw != nil && !ok {
		return fmt.Errorf("field trades_profitable in CopytradingStatisticsRespCopytradingStatistics: required")
	}
	type Plain CopytradingStatisticsRespCopytradingStatistics
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatisticsRespCopytradingStatistics(plain)
	return nil
}

// Echo of the request made.
type CopytradingStatisticsRespEchoReq map[string]interface{}

type CopytradingStatisticsRespMsgType string

const CopytradingStatisticsRespMsgTypeCopytradingStatistics CopytradingStatisticsRespMsgType = "copytrading_statistics"

var enumValues_CopytradingStatisticsRespMsgType = []interface{}{
	"copytrading_statistics",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsRespMsgType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CopytradingStatisticsRespMsgType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CopytradingStatisticsRespMsgType, v)
	}
	*j = CopytradingStatisticsRespMsgType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CopytradingStatisticsResp) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["echo_req"]; raw != nil && !ok {
		return fmt.Errorf("field echo_req in CopytradingStatisticsResp: required")
	}
	if _, ok := raw["msg_type"]; raw != nil && !ok {
		return fmt.Errorf("field msg_type in CopytradingStatisticsResp: required")
	}
	type Plain CopytradingStatisticsResp
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = CopytradingStatisticsResp(plain)
	return nil
}
